/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.CustomTextField;
import Procedimientos.Cliente;
import Procedimientos.Conexion;
import Procedimientos.ClienteJuridico;
import com.keffect.effects.animatedEffects.EntryBoucing;
import com.keffect.effects.animatedEffects.Shape;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Reymundo Tenorio
 */
public class ClienteJuridicoP extends javax.swing.JFrame {

    /**
     * Creates new form ClienteJuridicoP
     */
    public ClienteJuridicoP() {

       try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         
//         

        initComponents();
//        Tabla.setFont(new java.awt.Font("Tahoma", 0, 18)); 
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        /*COPIAR PEGAR DESACTIVAR*/
//         JTextComponent.KeyBinding[] newBindings = {
////        new JTextComponent.KeyBinding(
////          KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
////          DefaultEditorKit.beepAction),
//        new JTextComponent.KeyBinding(
//          KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
//          DefaultEditorKit.beepAction),
////        new JTextComponent.KeyBinding(
////            KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
////            DefaultEditorKit.beepAction)
////      
//         };
//            
//    Keymap k = txtNombre.getKeymap();
//    JTextComponent.loadKeymap(k, newBindings, txtNombre.getActions());
//    
        txtNombre.setTransferHandler(null);

//        MultipleEffect effects = new MultipleEffect();
//				effects.addEffect(new ShadowFrame(20));
//				effects.addEffect(new Shadow(1000));
//				effects.addEffect(new SplitHorizontalFade(1000));
//				effects.addEffect(new SplitVerticalFade(2000));
//				effects.addEffect(new DarkenReverse(6000,50));
//                                
        // PanelEffect.setEffect(effects);                    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopupMenu = new javax.swing.JPopupMenu();
        MnItemModificar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MnItemActDes = new javax.swing.JMenuItem();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelNuevo = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnnew = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtRuc = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        txttel = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtdireccion = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        txtcorreo = new javax.swing.JTextField();
        cmbDescuento = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        btnFoto = new javax.swing.JButton();
        jLblFoto = new javax.swing.JLabel();
        lblalerta = new javax.swing.JLabel();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        txtbusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnActivar = new javax.swing.JButton();
        btnDesactivar = new javax.swing.JButton();
        btnmodify = new javax.swing.JButton();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLblFoto1 = new javax.swing.JLabel();

        MnItemModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ModificarIcon.png"))); // NOI18N
        MnItemModificar.setMnemonic('m');
        MnItemModificar.setText("Modificar");
        MnItemModificar.setToolTipText("Modificar Registro");
        MnItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemModificarActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemModificar);
        PopupMenu.add(jSeparator1);

        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
        MnItemActDes.setMnemonic('a');
        MnItemActDes.setText("Activar");
        MnItemActDes.setToolTipText("Activar");
        MnItemActDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemActDesActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemActDes);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cliente Jur√≠dico");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });

        //KEffectPanel effectPanel = new KEffectPanel();
        //PanelNuevo = effectPanel;
        PanelNuevo = PanelEffect;
        PanelNuevo.setBackground(new java.awt.Color(0, 153, 204));
        PanelNuevo.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        btnnew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnnew.setForeground(new java.awt.Color(255, 255, 255));
        btnnew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Nuevo_1.png"))); // NOI18N
        btnnew.setMnemonic('n');
        btnnew.setText("Nuevo");
        btnnew.setToolTipText("Ingresar Nuevo Registro");
        btnnew.setContentAreaFilled(false);
        btnnew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnnew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewActionPerformed(evt);
            }
        });
        jPanel1.add(btnnew);

        btnsave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(255, 255, 255));
        btnsave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Agregar.png"))); // NOI18N
        btnsave.setMnemonic('g');
        btnsave.setText("Guardar");
        btnsave.setToolTipText("Guardar Registro");
        btnsave.setContentAreaFilled(false);
        btnsave.setEnabled(false);
        btnsave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnsave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnsave);

        btncancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel.setForeground(new java.awt.Color(255, 255, 255));
        btncancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel.setMnemonic('c');
        btncancel.setText("Cancelar");
        btncancel.setToolTipText("Cancelar / Salir");
        btncancel.setContentAreaFilled(false);
        btncancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });
        jPanel1.add(btncancel);

        PanelNuevo.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBackground(new java.awt.Color(0, 153, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informaci√≥n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N

        jPanel3.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre");

        /*CustomTextField customTextField = new CustomTextField(100);
        txtNombre = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNombre.setToolTipText("Ingrese Nombres");
        txtNombre.setEnabled(false);
        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Descuento");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("No. RUC");

        try {
            txtRuc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("U#############")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtRuc.setToolTipText("Ingrese No. C√©dula");
        txtRuc.setEnabled(false);
        txtRuc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtRuc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRucFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRucFocusLost(evt);
            }
        });
        txtRuc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRucKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("No. Tel√©fono");

        try {
            txttel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txttel.setToolTipText("Ingrese No. Tel√©fono");
        txttel.setEnabled(false);
        txttel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txttel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txttelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txttelFocusLost(evt);
            }
        });
        txttel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txttelKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Direcci√≥n");

        /*CustomTextFieldArea customTextField2 = new CustomTextFieldArea();
        txtdireccion = customTextField2;
        customTextField2.setPlaceholder("Ingrese Direcci√≥n del Ejecutivo");
        customTextField2.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField2.setForeground(Color.BLACK);
        customTextField2.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtdireccion.setColumns(20);
        txtdireccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtdireccion.setRows(5);
        txtdireccion.setToolTipText("Ingrese Direcci√≥n");
        txtdireccion.setEnabled(false);
        txtdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtdireccion);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Correo Electr√≥nico");

        /*CustomTextField customTextField3 = new CustomTextField(100);
        txtcorreo = customTextField3;
        customTextField3.setPlaceholder("Ingrese Correo del Ejecutivo");
        customTextField3.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField3.setForeground(Color.BLACK);
        customTextField3.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtcorreo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtcorreo.setToolTipText("Ingrese Correo Electr√≥nico");
        txtcorreo.setEnabled(false);
        txtcorreo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtcorreoFocusLost(evt);
            }
        });
        txtcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcorreoKeyTyped(evt);
            }
        });

        cmbDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbDescuento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno", "5%", "10%", "15%", "30%" }));
        cmbDescuento.setToolTipText("Seleccione Proveedor");
        cmbDescuento.setEnabled(false);
        cmbDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDescuentoActionPerformed(evt);
            }
        });
        cmbDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbDescuentoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cmbDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel9.setOpaque(false);

        btnFoto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFoto.setForeground(new java.awt.Color(255, 255, 255));
        btnFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Foto.png"))); // NOI18N
        btnFoto.setMnemonic('a');
        btnFoto.setText("Agregar Fotograf√≠a");
        btnFoto.setToolTipText("Seleccionar Fotograf√≠a");
        btnFoto.setContentAreaFilled(false);
        btnFoto.setEnabled(false);
        btnFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFoto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFotoActionPerformed(evt);
            }
        });

        jLblFoto.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFoto)
                .addContainerGap())
        );

        lblalerta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblalerta.setForeground(new java.awt.Color(255, 255, 0));
        lblalerta.setText("Alertas");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblalerta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(110, 110, 110)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblalerta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        PanelNuevo.add(jPanel6, java.awt.BorderLayout.CENTER);

        TabbedPane.addTab("Nuevo", PanelNuevo);

        PanelVer = PanelEffect2;
        PanelVer.setBackground(new java.awt.Color(0, 153, 204));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Nombre", "No. RUC", "Descuento", "Estado" }));
        cmbbusc.setToolTipText("Buscar Por:");

        txtbusc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtbusc.setToolTipText("Buscar");
        CustomTextField customTextField9 = new CustomTextField(100);
        txtbusc = customTextField9;
        customTextField9.setPlaceholder("Ingrese Informaci√≥n a Buscar");
        customTextField9.setFont(new java.awt.Font("Tahoma", 0, 16));
        customTextField9.setForeground(Color.BLACK);
        customTextField9.setPlaceholderForeground(Color.LIGHT_GRAY);
        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();
        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));
        ModeloAutoCompletar modelo1 = new ModeloVendNames();
        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));
        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });
        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Tabla.setToolTipText("Lista Registros");
        Tabla.setComponentPopupMenu(PopupMenu);
        Tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnActivar.setForeground(new java.awt.Color(255, 255, 255));
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png"))); // NOI18N
        btnActivar.setMnemonic('A');
        btnActivar.setText("Activar");
        btnActivar.setToolTipText("Activar");
        btnActivar.setContentAreaFilled(false);
        btnActivar.setEnabled(false);
        btnActivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnActivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnActivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnActivarFocusLost(evt);
            }
        });
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnActivar);

        btnDesactivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDesactivar.setForeground(new java.awt.Color(255, 255, 255));
        btnDesactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png"))); // NOI18N
        btnDesactivar.setMnemonic('D');
        btnDesactivar.setText("Desactivar");
        btnDesactivar.setToolTipText("Desactivar");
        btnDesactivar.setContentAreaFilled(false);
        btnDesactivar.setEnabled(false);
        btnDesactivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDesactivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDesactivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusLost(evt);
            }
        });
        btnDesactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesactivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnDesactivar);

        btnmodify.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnmodify.setForeground(new java.awt.Color(255, 255, 255));
        btnmodify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modificar.png"))); // NOI18N
        btnmodify.setMnemonic('o');
        btnmodify.setText("Modificar");
        btnmodify.setToolTipText("Modificar Registro");
        btnmodify.setContentAreaFilled(false);
        btnmodify.setEnabled(false);
        btnmodify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnmodify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnmodify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnmodifyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnmodifyFocusLost(evt);
            }
        });
        btnmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifyActionPerformed(evt);
            }
        });
        jPanel5.add(btnmodify);

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TablaTodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Registros");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel11.setOpaque(false);

        jLblFoto1.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.EAST);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1230, 722));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // private int ID_ClienteJuridico;
    private boolean Modify;
    private String File = "";
    private MenuPrincipal MP;
    private String Foto;

    public void Foto(String Foto) {
        this.Foto = Foto;
    }

    public void setFoto() {

        File = this.Foto;
        jLblFoto.setIcon(new ImageIcon(File));
        //Convirtiendo Imagen a ImageIcon
        ImageIcon icon = new ImageIcon(File);
        //Se Extrae La Imagen de Icono
        Image img = icon.getImage();
        //Se Cambia y Ajusta El Tamano de La Imagen
        Image newimg = img.getScaledInstance(342, 350, java.awt.Image.SCALE_SMOOTH);
        //Se Genera La Nueva Imagen Con El ImageIcon
        ImageIcon newIcon = new ImageIcon(newimg);
        //Se Coloca el Nuevo Icono Modificado
        jLblFoto.setIcon(newIcon);
        //Se Cambia el Tamano de la Etiqueta
        jLblFoto.setSize(256, 256);
    }

    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }

    String Nombres_Represent;
    String Apellidos_Represent;
    String FotoP_Represent;
    String Sexo_Represent;
    String Cedula_Represent;
    String Correo_Represent;
    String Direccion_Represent;
    String Telefono_Represent;
    String Representante_Represent;
    double Descuento_Represent;

    public void GuardarRepresentante(String Nombres_Represent,
            String Apellidos_Represent, String FotoP_Represent,
            String Sexo_Represent, String Cedula_Represent,
            String Correo_Represent, String Direccion_Represent,
            String Telefono_Represent, String Representante_Represent,
            double Descuento_Represent) {

        this.Nombres_Represent = Nombres_Represent;
        this.Apellidos_Represent = Apellidos_Represent;
        this.FotoP_Represent = FotoP_Represent;
        this.Sexo_Represent = Sexo_Represent;
        this.Cedula_Represent = Cedula_Represent;
        this.Correo_Represent = Correo_Represent;
        this.Direccion_Represent = Direccion_Represent;
        this.Telefono_Represent = Telefono_Represent;
        this.Representante_Represent = Representante_Represent;
        this.Descuento_Represent = Descuento_Represent;

        this.Listo = true;
    }

    public static ResultSet resultado;
    public static ResultSet resultado2;
    public static ResultSet resultado3;

    int ID_ClienteJuridico;

    public void Guardar() {

        String Nombre, NoRUC, FotoP, Correo, Direccion, Telefono;
        int Descuento = 0;
        int SelectCombo = 0;

        Nombre = txtNombre.getText().trim();
        NoRUC = txtRuc.getText().trim();
        SelectCombo = cmbDescuento.getSelectedIndex();
        Correo = txtcorreo.getText().trim();
        Direccion = txtdireccion.getText().trim();
        Telefono = txttel.getText().trim();
        FotoP = File;

        if (SelectCombo == 1) {

            Descuento = 5;
        }
        if (SelectCombo == 2) {

            Descuento = 10;
        }
        if (SelectCombo == 3) {

            Descuento = 15;
        }
        if (SelectCombo == 4) {

            Descuento = 30;
        }

        if ("".equals(Correo)) {
            Correo = "No Ingresado";
        } else {

            if (!Correo.contains("@") || !Correo.contains(".")) {
                JOptionPane.showMessageDialog(this, "Direcci√≥n de Correo Electr√≥nico No V√°lido",
                        "Correo No V√°lido", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if ("".equals(Direccion)) {
            Direccion = "No Ingresada";
        }
        if ("-".equals(Telefono)) {
            Telefono = "No Ingresado";
        }
        if ("".equals(Correo)) {
            Correo = "No Ingresado";
        }

        if ("".equals(Nombre)) {
            JOptionPane.showMessageDialog(this, "Ingrese El Nombre", "Ingrese", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ("".equals(NoRUC)) {
//            JOptionPane.showMessageDialog(this,"Ingrese Los Apellidos","Ingrese",JOptionPane.ERROR_MESSAGE);
//            return;

            NoRUC = "No Ingresado";
        } else {

            int IDC = 0;

            try {

                resultado = Conexion.consulta("Select [ID_ClienteJuridico] from [dbo].[ClienteJuridico] where [ID_ClienteJuridico] != " + ID_ClienteJuridico + " and "
                        + " [No_Ruc] = '" + NoRUC + "'");

                while (resultado.next()) {
                    IDC = resultado.getInt(1);
                }
            } catch (SQLException ex) {

            }

            if (IDC != 0) {
                JOptionPane.showMessageDialog(this, "N√∫mero de RUC " + NoRUC + " ya Existe en el Registro", "No. RUC ya Registrado", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        int IDC1 = 0;

        try {

            resultado = Conexion.consulta("Select [ID_ClienteJuridico] from [dbo].[ClienteJuridico] where [ID_ClienteJuridico] != " + ID_ClienteJuridico + " and "
                    + " [Nombre_ClienteJuridico] = '" + Nombre + "'");

            while (resultado.next()) {
                IDC1 = resultado.getInt(1);
            }
        } catch (SQLException ex) {

        }

        if (IDC1 != 0) {
            JOptionPane.showMessageDialog(this, "Nombre del Cliente Juridico " + Nombre + " ya Existe en el Registro", "Nombre ya Registrado", JOptionPane.ERROR_MESSAGE);
            return;
        }
//        if("".equals(Foto) && Modify == false)  {
//            JOptionPane.showMessageDialog(this,"Seleccione La Fotograf√≠a","Seleccione",JOptionPane.ERROR_MESSAGE);
//            return;
//           }

        if ("".equals(FotoP)) {
            File F = new File("");
            FotoP = F.getAbsolutePath() + "\\Farmacia\\Default\\ClienteJuridico.png";
        }

        if (Modify == true) {

            int ID = ID_ClienteJuridico;

            ClienteJuridico.Actualizar_ClienteJuridico(ID, Nombre, NoRUC, Telefono, Descuento, Correo, Direccion, FotoP);

            ActualizarTabla();
            CleanAll();
            DisableAll();
            Modify = false;

        } else {

            if (Listo == true) {

                ID_ClienteJ = ClienteJuridico.Agregar_ClienteJuridico(Nombre, NoRUC, Telefono,
                        Descuento, Correo, Direccion, FotoP);

                ID_ClienteJ++;

//              System.out.println("Nombre: "+Nombres_Represent);
//              System.out.println("Apellido: "+Apellidos_Represent);
//              System.out.println("Telefono: "+Telefono_Represent);
//              System.out.println("Cedula: "+Cedula_Represent);
//              System.out.println("Correo: "+Correo_Represent);
//              System.out.println("Direccion: "+Direccion_Represent);
//              System.out.println("Sexo: "+Sexo_Represent);
//              System.out.println("Descuento: "+Descuento_Represent);
//              System.out.println("Foto: "+FotoP_Represent);
//              System.out.println("ID Cliente Juridico: "+ID_ClienteJ);
//              System.out.println("Representante: "+Representante_Represent);
                Cliente.Agregar_Cliente(Nombres_Represent, Apellidos_Represent, Telefono_Represent,
                        Cedula_Represent, Correo_Represent, Direccion_Represent, Sexo_Represent, Descuento_Represent,
                        FotoP_Represent, ID_ClienteJ, Representante_Represent);

                ActualizarTabla();
                CleanAll();
                DisableAll();

            } else {

                RepresentanteP RP = new RepresentanteP(this, true);
                RP.Datos(this, Nombre, (String) cmbDescuento.getSelectedItem());
                RP.setVisible(true);
            }

        }
    }

    boolean Listo = false;

    int ID_ClienteJ;

    public void CleanAll() {

        ID_ClienteJ = 0;
        Listo = false;
        File = "";
        txtRuc.setText("");
        txtNombre.setText("");
        txtcorreo.setText("");
        txtdireccion.setText("");
        txttel.setText("");
        cmbDescuento.setSelectedIndex(0);
        ID_ClienteJuridico = 0;
        jLblFoto.setIcon(null);
        Modify = false;

    }

    public void EnableAll() {

        txtRuc.setEnabled(true);
        txtNombre.setEnabled(true);
        txtcorreo.setEnabled(true);
        txtdireccion.setEnabled(true);
        txttel.setEnabled(true);
        cmbDescuento.setEnabled(true);
        jLblFoto.setEnabled(true);
        btnFoto.setEnabled(true);
        btnsave.setEnabled(true);

    }

    public void DisableAll() {

        txtRuc.setEnabled(false);
        txtNombre.setEnabled(false);
        txtcorreo.setEnabled(false);
        txtdireccion.setEnabled(false);
        txttel.setEnabled(false);
        cmbDescuento.setEnabled(false);
        jLblFoto.setEnabled(false);
        btnFoto.setEnabled(false);
        btnsave.setEnabled(false);

    }

    public void AddPic() {

        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filtroImagen = new FileNameExtensionFilter("JPG, PNG, GIF, BMP, & TIFF", "jpg", "png", "gif", "bmp", "tif");

        dlg.setFileFilter(filtroImagen);

        int option = dlg.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            //Obtiene La Ruta del Archivo Seleccionado
            File = dlg.getSelectedFile().getPath();

            jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342, 350, java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
            jLblFoto.setSize(256, 256);
        }
    }

    public void Titulo() {

        Object[] Titulo = {"", "No.", "Nombre",
            "No. RUC", "Tel√©fono", "Direcci√≥n", "Correo", "Descuento", "Deuda", "Fecha Ingreso",
            "Registrado Por", "Estado"};

        model.setColumnIdentifiers(Titulo);

        this.Tabla.setModel(model);

        JTableHeader header = Tabla.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));

        Tabla.setDefaultRenderer(Object.class, new FormatoTabla());

        CheckBoxHeader();
    }

    public void ActualizarTabla() {

        Titulo();

        model.setRowCount(0);
        Tabla.setModel(model);

        try {

            resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV]");

            while (resultado.next()) {
                
                Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);

                model.addRow(Datos);

            }

            Tabla.setModel(model);

//        Tabla.getColumnModel().getColumn( 10 ).setCellEditor( new Celda_CheckBox() );
//        //para pintar la columna con el CheckBox en la tabla, en este caso, la primera columna
//        Tabla.getColumnModel().getColumn( 10 ).setCellRenderer(new Render_CheckBox());      
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

    }

    public void Buscar() {

        Titulo();

        int index = cmbbusc.getSelectedIndex() + 1;

        switch (index) {

            case 1:

                try {
                    model.setRowCount(0);
                    String Buscar = txtbusc.getText();
                    resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV] where "
                            + "[ID_ClienteJuridico] like '%" + Buscar + "%'");

                    while (resultado.next()) {
 
                        
                Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);

                        model.addRow(Datos);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "No Encontrado");
                }

                break;

            case 2:

                try {
                    model.setRowCount(0);
                    String Buscar = txtbusc.getText();
                    resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV] where "
                            + "[Nombre_ClienteJuridico] like '%" + Buscar + "%'");

                    while (resultado.next()) {

                        Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);

                        model.addRow(Datos);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "No Encontrado");
                }

                break;

            case 3:

                try {
                    model.setRowCount(0);
                    String Buscar = txtbusc.getText();
                    resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV] "
                            + "where [No_RUC] like '%" + Buscar + "%'");

                    while (resultado.next()) {

                       Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);

                        model.addRow(Datos);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "No Encontrado");
                }

                break;

               case 4:

                try {
                    model.setRowCount(0);
                    String Buscar = txtbusc.getText();
                    resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV] where "
                            + "[Descuento_ClienteJuridico] like '%" + Buscar + "%'");

                    while (resultado.next()) {

                         Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);

                        model.addRow(Datos);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "No Encontrado");
                }

                break;

           
                
                
            case 5:

                try {
                    model.setRowCount(0);
                    String Buscar = txtbusc.getText();
                    resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoV] where "
                            + "[Estado_ClienteJuridico] like '%" + Buscar + "%'");

                    while (resultado.next()) {

                        Object[] Datos = new Object[12];

                Datos[0] = false;

                int ID_CJ = resultado.getInt(1);

                Datos[1] = String.valueOf(ID_CJ);
                Datos[2] = resultado.getString(2);
                Datos[3] = resultado.getString(3);
                Datos[4] = resultado.getString(4);
                Datos[5] = resultado.getString(5);
                Datos[6] = resultado.getString(6);
                Datos[7] = resultado.getString(7);

                double Deuda = 0;
                int ID_C = 0;

                try {
                    resultado2 = Conexion.consulta("Select ID_Cliente from Cliente where ID_ClienteJuridico = " + ID_CJ);

                    while (resultado2.next()) {

                        ID_C = resultado2.getInt(1);

                        resultado3 = Conexion.consulta("Select Sum(Saldo) from "
                                + "CuentaCobrar where ID_Cliente =" + ID_C);

                        while (resultado3.next()) {

                            Deuda = Deuda + resultado3.getDouble(1);

                        }

                    }

                } catch (SQLException ex) {
                }

                Datos[8] = Deuda;
                java.util.Date FechaI = resultado.getDate(8);
                DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
                String Fecha = df4.format(FechaI);
                Datos[9] = Fecha;
                String Empleado = resultado.getString(9).trim() + " " + resultado.getString(10).trim();
                Datos[10] = Empleado;
                Datos[11] = resultado.getString(11);


                        model.addRow(Datos);

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "No Encontrado");
                }

                break;

            default:

                break;

        }
        Tabla.setModel(model);

    }


    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
        Buscar();
// TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

    public void VerFoto() {

        int fila = Tabla.getSelectedRow();

        if (fila > -1) {

            int ID = 0;

            ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());

            String Fotografia;

            try {

                resultado = Conexion.consulta("Select Fotografia_ClienteJuridico from ClienteJuridico where ID_ClienteJuridico = " + ID);

                if (resultado.next()) {
                    Fotografia = resultado.getString(1);

                    File = Fotografia;
                    jLblFoto1.setIcon(new ImageIcon(File));
                    //Convirtiendo Imagen a ImageIcon
                    ImageIcon icon = new ImageIcon(File);
                    //Se Extrae La Imagen de Icono
                    Image img = icon.getImage();
                    //Se Cambia y Ajusta El Tamano de La Imagen
                    Image newimg = img.getScaledInstance(289, 292, java.awt.Image.SCALE_SMOOTH);
                    //Se Genera La Nueva Imagen Con El ImageIcon
                    ImageIcon newIcon = new ImageIcon(newimg);
                    //Se Coloca el Nuevo Icono Modificado
                    jLblFoto1.setIcon(newIcon);

                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "El ClienteJuridico No Posee Fotograf√≠a", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }

    public void ActualizarFoto() {

        int fila = Tabla.getSelectedRow();

        if (fila > -1) {

            int ID = 0;

            ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());

            String Fotografia;

            try {

                resultado = Conexion.consulta("Select Fotografia_ClienteJuridico from ClienteJuridico where ID_ClienteJuridico = " + ID);

                if (resultado.next()) {
                    Fotografia = resultado.getString(1);

                    File = Fotografia;
                    jLblFoto.setIcon(new ImageIcon(File));
                    //Convirtiendo Imagen a ImageIcon
                    ImageIcon icon = new ImageIcon(File);
                    //Se Extrae La Imagen de Icono
                    Image img = icon.getImage();
                    //Se Cambia y Ajusta El Tamano de La Imagen
                    Image newimg = img.getScaledInstance(342, 350, java.awt.Image.SCALE_SMOOTH);
                    //Se Genera La Nueva Imagen Con El ImageIcon
                    ImageIcon newIcon = new ImageIcon(newimg);
                    //Se Coloca el Nuevo Icono Modificado
                    jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
                    // jLblFoto.setSize(256,256);

                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "El ClienteJuridico No Posee Fotograf√≠a", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }

    public void ActivarBotones() {

        boolean Checkbox = false;

        for (int j = 0; j < Tabla.getRowCount(); j++) {

            Checkbox = (boolean) Tabla.getValueAt(j, 0);

            if (Checkbox == true) {

                btnActivar.setEnabled(true);
                btnDesactivar.setEnabled(true);

                break;
            }
        }

        int Fila = Tabla.getSelectedRow();

        if (Checkbox == false) {

            btnActivar.setEnabled(false);
            btnDesactivar.setEnabled(false);

            if (Fila > -1) {

                btnmodify.setEnabled(true);

                MnItemActDes.setEnabled(true);
                MnItemModificar.setEnabled(true);

                String Estado = ((String) this.Tabla.getModel().getValueAt(Fila, 11));

                if ("Activo".equalsIgnoreCase(Estado)) {
                    MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/DesactivarIcon.png"))); // NOI18N
                    MnItemActDes.setText("Desactivar");
                }
                if ("Inactivo".equalsIgnoreCase(Estado)) {
                    MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
                    MnItemActDes.setText("Activar");
                }

            } else {
                btnmodify.setEnabled(false);
                MnItemActDes.setEnabled(false);
                MnItemModificar.setEnabled(false);

            }
        }

        if (Fila > -1) {
            btnmodify.setEnabled(true);
            MnItemActDes.setEnabled(true);
            MnItemModificar.setEnabled(true);
        } else {
            btnmodify.setEnabled(false);
            MnItemActDes.setEnabled(false);
            MnItemModificar.setEnabled(false);
        }
    }


    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked

        VerFoto();
        ActivarBotones();

        int fila = Tabla.getSelectedRow();
        if (fila > -1) {

            int ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());

            if (evt.getClickCount() == 2) {
                ClienteJuridicoNaturalP CJP = new ClienteJuridicoNaturalP(this, true);
                CJP.setID_ClienteJ(ID);
                CJP.setVisible(true);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost

        ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed

        ActivarBotones();
        Activar();
        ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarActionPerformed

    public void Activar() {

        int ID, Opcion;
        boolean Flag;

        Opcion = JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar ClienteJuridico(es) ?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

        if (Opcion == JOptionPane.YES_OPTION) {

            for (int i = 0; i < Tabla.getRowCount(); i++) {

                Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);

                if (Flag == true) {
                    ID = Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());

                    ClienteJuridico.Activar_ClienteJuridico(ID);
                }

            }
            JOptionPane.showMessageDialog(this, "ClienteJuridico(s) Activado(s) Con √âxito", "Activado(s) Con √âxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }

    public void Desactivar() {

        int ID, Opcion;
        boolean Flag;

        Opcion = JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar ClienteJuridico(es) ?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

        if (Opcion == JOptionPane.YES_OPTION) {

            for (int i = 0; i < Tabla.getRowCount(); i++) {

                Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);

                if (Flag == true) {
                    ID = Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());

                    ClienteJuridico.Desactivar_ClienteJuridico(ID);
                }

            }
            JOptionPane.showMessageDialog(this, "ClienteJuridico(s) Desactivado(s) Con √âxito", "Activado(s) Con √âxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }


    private void btnActivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusGained

        ActivarBotones();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusGained

    public void Modificar() {
        int fila = Tabla.getSelectedRow();

        int ID;
        String Nombre, Desc, NoRUC, Direccion, Correo, Telefono;

        if (fila > -1) {

            ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Nombre = ((String) this.Tabla.getModel().getValueAt(fila, 2));
            NoRUC = ((String) this.Tabla.getModel().getValueAt(fila, 3));
            Telefono = ((String) this.Tabla.getModel().getValueAt(fila, 4));
            Direccion = ((String) this.Tabla.getModel().getValueAt(fila, 5));
            Correo = ((String) this.Tabla.getModel().getValueAt(fila, 6));
            Desc = ((String) this.Tabla.getModel().getValueAt(fila, 7));

            CleanAll();
            EnableAll();

            if ("No Ingresado".equals(NoRUC)) {
                NoRUC = "";
            }
            if ("No Ingres".equals(Telefono)) {
                Telefono = "";
            }
            if ("No Ingresado".equals(Correo)) {
                Correo = "";
            }
            if ("No Ingresada".equals(Direccion)) {
                Direccion = "";
            }

            ID_ClienteJuridico = ID;
            txtNombre.setText(Nombre);
            txtRuc.setText(NoRUC);
            txtcorreo.setText(Correo);
            txtdireccion.setText(Direccion);
            txttel.setText(Telefono);

            int Descuento = BigDecimal.valueOf(Double.parseDouble(Desc)).intValue();

            if (Descuento == 0) {
                cmbDescuento.setSelectedIndex(0);
            }
            if (Descuento == 5) {
                cmbDescuento.setSelectedIndex(1);
            }
            if (Descuento == 10) {
                cmbDescuento.setSelectedIndex(2);
            }
            if (Descuento == 15) {
                cmbDescuento.setSelectedIndex(3);
            }
            if (Descuento == 30) {
                cmbDescuento.setSelectedIndex(4);
            }

            ActualizarFoto();

            TabbedPane.setSelectedComponent(PanelNuevo);
            Modify = true;

        } else {

            JOptionPane.showMessageDialog(this, "Seleccione Un ClienteJuridico a Modificar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }

    private void btnmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifyActionPerformed

        ActivarBotones();
        Modificar();

    }//GEN-LAST:event_btnmodifyActionPerformed

    private void btnmodifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusGained
        ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusGained

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed

        ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed


    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

        File miDir = new File("");
        String reporte = miDir.getAbsolutePath() + "\\src\\Reportes\\ClienteJuridico.jasper";

        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(reporte, null, Conexion.con);
        } catch (JRException ex) {

//                Logger.getLogger(ClienteJuridicoP.class.getName()).log(Level.SEVERE, null, ex);
        }

        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("ClienteJuridicoes - Sistema de Inventario y Facturaci√≥n RJ");

        view.setZoomRatio((float) 0.95);
        view.setVisible(true);

        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();
   //     this.toBack();

   //    this.setExtendedState(javax.swing.JFrame.CROSSHAIR_CURSOR); 

    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged

        int index = TabbedPane.getSelectedIndex();
        if (index == 0) {

            PanelEffect.setEffect(new EntryBoucing(1000));
            PanelEffect.startEffect();
        }
        if (index == 1) {

            PanelEffect2.setEffect(new Shape(1000));
            PanelEffect2.startEffect();
            txtbusc.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

    KEffectPanel PanelEffect = new KEffectPanel();
    KEffectPanel PanelEffect2 = new KEffectPanel();


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//                this.panelColor = new JPanel();
//		this.panelColor.setBackground(Color.BLACK);
//		this.panelColor.setBorder(new LineBorder(new Color(0, 0, 0)));
//		this.panelColor.setBounds(133, 618, 43, 32);
//                
//     PanelEffect.setEffect(new SplitHorizontalFade (1000,panelColor.getBackground()));
//     PanelEffect.startEffect();

        PanelEffect.setEffect(new EntryBoucing(1000));
        PanelEffect.startEffect();

//Date now = new Date();
//
//DateFormat df =  DateFormat.getDateInstance();
//DateFormat df1 = DateFormat.getDateInstance(DateFormat.SHORT);
//DateFormat df2 = DateFormat.getDateInstance(DateFormat.MEDIUM);
//DateFormat df3 = DateFormat.getDateInstance(DateFormat.LONG);
//DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
//String s =  df.format(now);
//String s1 = df1.format(now);
//String s2 = df2.format(now);
//String s3 = df3.format(now);
//String s4 = df4.format(now);
//System.out.println("(Default) Hoy es:" + s);
//System.out.println("(SHORT)   Hoy es:" + s1);
//System.out.println("(MEDIUM)  Hoy es:" + s2);
//System.out.println("(LONG)    Hoy es:" + s3);
//System.out.println("(FULL)    Hoy es:" + s4);
        //this.setResizable(false);
       //  String Dia, Mes, Ano;
//
//        Calendar c = new GregorianCalendar();
//
//        Dia = Integer.toString(c.get(Calendar.DATE));
//        Mes = Integer.toString(c.get(Calendar.MONTH)+1);
//        Ano = Integer.toString(c.get(Calendar.YEAR));
//
//        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//        String strFecha =Dia+"-"+Mes+"-"+Ano ;
//        Date Fecha;
//        try {
//
//            Fecha = sdf.parse(strFecha);
//
//            jdFechaNacimiento.setMaxSelectableDate(Fecha);
//
//        } catch (ParseException ex) {
//        }
//        
        ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btnFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFotoActionPerformed
        ModoImagen Pic = new ModoImagen(this, false);
        this.setVisible(false);
        Pic.setClienteJ(this);
        Pic.setVisible(true);
        Pic.toFront();

        //   AddPic();        // TODO add your handling code here:
    }//GEN-LAST:event_btnFotoActionPerformed

    private void btnActivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusLost

        ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusLost

    private void btnmodifyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusLost
        ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusLost

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained

        ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed

        ActivarBotones();  // TODO add your handling code here:
    }//GEN-LAST:event_TablaMousePressed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed

        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancelActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed

        Guardar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewActionPerformed

        EnableAll();
        CleanAll();


    }//GEN-LAST:event_btnnewActionPerformed

    private void txtRucFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRucFocusGained
        txtRuc.setCaretPosition(0);        // TODO add your handling code here:
    }//GEN-LAST:event_txtRucFocusGained

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        char a = evt.getKeyChar();

        if (Character.isDigit(a) && !Character.isISOControl(a)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
        if (a == KeyEvent.VK_ENTER) {
            txtRuc.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped


    private void txtRucFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRucFocusLost

        String NoRUC = txtRuc.getText();

        int ID = 0;
        try {

            resultado = Conexion.consulta("Select [ID_ClienteJuridico] from [dbo].[ClienteJuridico] where [ID_ClienteJuridico] != " + ID_ClienteJuridico + " and "
                    + " [No_Ruc] = '" + NoRUC + "'");

            while (resultado.next()) {
                ID = resultado.getInt(1);
            }
        } catch (SQLException ex) {

        }

        if (ID != 0) {
            txtRuc.setBackground(new java.awt.Color(255, 204, 204));
            lblalerta.setText("No. RUC ya se registr√≥ en la Base de Datos");
        } else {
            txtRuc.setBackground(new java.awt.Color(255, 255, 255));
            lblalerta.setText("");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_txtRucFocusLost

    private void txtRucKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRucKeyTyped
        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txttel.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRucKeyTyped


    private void txtcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcorreoKeyTyped
        char a = evt.getKeyChar();

        if (Character.isDigit(a) && !Character.isISOControl(a)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
        if (a == KeyEvent.VK_ENTER) {
            btnFoto.requestFocus();
        } // TODO add your handling code here:
    }//GEN-LAST:event_txtcorreoKeyTyped

    private void txttelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttelFocusGained
        txttel.setCaretPosition(0);           // TODO add your handling code here:
    }//GEN-LAST:event_txttelFocusGained

    private void txttelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txttelFocusLost

    private void txttelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttelKeyTyped
        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtdireccion.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txttelKeyTyped

    private void MnItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemModificarActionPerformed
        Modificar();      // TODO add your handling code here:
    }//GEN-LAST:event_MnItemModificarActionPerformed

    public void ActivarDesactivar() {
        int fila = Tabla.getSelectedRow();

        int ID;
        String Nombre;
        int v = JOptionPane.NO_OPTION;
        String Estado;

        if (fila > -1) {

            ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Nombre = ((String) this.Tabla.getModel().getValueAt(fila, 2));
            Estado = ((String) this.Tabla.getModel().getValueAt(fila, 11));

            if ("Activo".equalsIgnoreCase(Estado)) {

                v = JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar al ClienteJuridico " + Nombre.trim() + "?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }
            if ("Inactivo".equalsIgnoreCase(Estado)) {

                v = JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar al ClienteJuridico " + Nombre.trim() + "?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }

            if (v == JOptionPane.YES_OPTION) {

                ClienteJuridico.Activar_Desactivar_ClienteJuridico(ID);

                ActualizarTabla();
            }
        } else {

            JOptionPane.showMessageDialog(this, "Seleccione Un ClienteJuridico a Activar/Desactivar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }


    private void MnItemActDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemActDesActionPerformed
        ActivarDesactivar();        // TODO add your handling code here:
    }//GEN-LAST:event_MnItemActDesActionPerformed

    private void btnDesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesactivarActionPerformed
        ActivarBotones();
        Desactivar();
        ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarActionPerformed

    private void btnDesactivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusGained
        ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusGained

    private void btnDesactivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusLost
        ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusLost

    private void txtdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdireccionKeyTyped
        char a = evt.getKeyChar();

        if (a == KeyEvent.VK_ENTER) {
            txtcorreo.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtdireccionKeyTyped

    private void cmbDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDescuentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDescuentoActionPerformed

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        String Nombre = txtNombre.getText();

        int ID = 0;
        try {

            resultado = Conexion.consulta("Select [ID_ClienteJuridico] from [dbo].[ClienteJuridico] where [ID_ClienteJuridico] != " + ID_ClienteJuridico + " and "
                    + "[Nombre_ClienteJuridico] = '" + Nombre + "'");

            while (resultado.next()) {
                ID = resultado.getInt(1);
            }
        } catch (SQLException ex) {

        }

        if (ID != 0) {
            txtNombre.setBackground(new java.awt.Color(255, 204, 204));
            lblalerta.setText("Nombre del ClienteJuridico ya se registr√≥ en la Base de Datos");
        } else {
            txtNombre.setBackground(new java.awt.Color(255, 255, 255));
            lblalerta.setText("");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreFocusLost

    private void cmbDescuentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbDescuentoKeyTyped
        char a = evt.getKeyChar();

        if (Character.isDigit(a) && !Character.isISOControl(a)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
        if (a == KeyEvent.VK_ENTER) {
            txtRuc.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDescuentoKeyTyped

    private void txtcorreoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcorreoFocusLost
        String Correo = txtcorreo.getText().trim();

        if (!"".equals(Correo)) {

            if (!Correo.contains("@") || !Correo.contains(".")) {
                lblalerta.setText("Direcci√≥n de Correo Electr√≥nico No V√°lido");
            } else {
                lblalerta.setText("");
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_txtcorreoFocusLost

    DefaultTableModel model = new DefaultTableModel() {

        Class[] types = new Class[]{
            java.lang.Boolean.class, java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.String.class, java.lang.String.class
        };

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        @Override
        public boolean isCellEditable(int row, int column) {

            if (column == 0) {
                return true;
            } else {
                return false;
            }
       //all cells false

        }
    };

    public class FormatoTabla extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {

            if (String.valueOf(table.getValueAt(row, 11)).equalsIgnoreCase("Inactivo")) {
                setForeground(Color.RED);
            } else {
                setForeground(Color.BLACK);
            }

            if (column == 8) {
                setForeground(Color.RED);
            }

//   if(String.valueOf(table.getValueAt(row,9)).equalsIgnoreCase("Si"))  {
//      setForeground(Color.GREEN);
//  }
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            return this;
        }
    }

    public class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected CheckBoxHeader rendererComponent;
        protected int column;
        protected boolean mousePressed = false;

        public CheckBoxHeader(ItemListener itemListener) {
            rendererComponent = this;
            rendererComponent.addItemListener(itemListener);
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            rendererComponent.setText("Selecc. Todo");
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;
                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();
                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int columna = tableView.convertColumnIndexToModel(viewColumn);

                if (viewColumn == this.column && e.getClickCount() == 1 && columna != -1) {
                    doClick();
                }
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        @Override
        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }

    public void CheckBoxHeader() {

        TableColumn tc = Tabla.getColumnModel().getColumn(0);  //No Columna
        tc.setCellEditor(Tabla.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(Tabla.getDefaultRenderer(Boolean.class));
        tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));

    }

    class MyItemListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = Tabla.getRowCount(); x < y; x++) {
                Tabla.setValueAt(checked, x, 0);  //No Columna
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteJuridicoP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new ClienteJuridicoP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnItemActDes;
    private javax.swing.JMenuItem MnItemModificar;
    private javax.swing.JPanel PanelNuevo;
    private javax.swing.JPanel PanelVer;
    private javax.swing.JPopupMenu PopupMenu;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnDesactivar;
    private javax.swing.JButton btnFoto;
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnmodify;
    private javax.swing.JButton btnnew;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnshowall;
    private javax.swing.JComboBox cmbDescuento;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblFoto;
    private javax.swing.JLabel jLblFoto1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblalerta;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JFormattedTextField txtRuc;
    private javax.swing.JTextField txtbusc;
    private javax.swing.JTextField txtcorreo;
    private javax.swing.JTextArea txtdireccion;
    private javax.swing.JFormattedTextField txttel;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Ventanas;

import Clases.CustomTextField;
import Procedimientos.Conexion;
import Procedimientos.Cliente;
import com.keffect.effects.animatedEffects.EntryBoucing;
import com.keffect.effects.animatedEffects.Shape;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.BadLocationException;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Reymundo Tenorio
 */
public class ClienteNaturalP extends javax.swing.JFrame {

    /**
     * Creates new form ClienteP
     */
    
 
    
    public ClienteNaturalP() {
        
         try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         
        initComponents();
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        /*COPIAR PEGAR DESACTIVAR*/
        
//         JTextComponent.KeyBinding[] newBindings = {
////        new JTextComponent.KeyBinding(
////          KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
////          DefaultEditorKit.beepAction),
//        new JTextComponent.KeyBinding(
//          KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
//          DefaultEditorKit.beepAction),
////        new JTextComponent.KeyBinding(
////            KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
////            DefaultEditorKit.beepAction)
////      
//         };
//            
//    Keymap k = txtNombre.getKeymap();
//    JTextComponent.loadKeymap(k, newBindings, txtNombre.getActions());
//    
    
        txtNombre.setTransferHandler(null);
        txtApellido.setTransferHandler(null);
       
//        MultipleEffect effects = new MultipleEffect();
//				effects.addEffect(new ShadowFrame(20));
//				effects.addEffect(new Shadow(1000));
//				effects.addEffect(new SplitHorizontalFade(1000));
//				effects.addEffect(new SplitVerticalFade(2000));
//				effects.addEffect(new DarkenReverse(6000,50));
//                                
           // PanelEffect.setEffect(effects);                    
   
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PopupMenu = new javax.swing.JPopupMenu();
        MnItemModificar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MnItemActDes = new javax.swing.JMenuItem();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelNuevo = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnnew = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtcedula = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        rdFemenino = new javax.swing.JRadioButton();
        rdMasculino = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        txttel = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtdireccion = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        txtcorreo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbClienteJuridico = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cmbDescuento = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        btnFoto = new javax.swing.JButton();
        jLblFoto = new javax.swing.JLabel();
        lblalerta = new javax.swing.JLabel();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        txtbusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnActivar = new javax.swing.JButton();
        btnDesactivar = new javax.swing.JButton();
        btnmodify = new javax.swing.JButton();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLblFoto1 = new javax.swing.JLabel();

        MnItemModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ModificarIcon.png"))); // NOI18N
        MnItemModificar.setMnemonic('m');
        MnItemModificar.setText("Modificar");
        MnItemModificar.setToolTipText("Modificar Registro");
        MnItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemModificarActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemModificar);
        PopupMenu.add(jSeparator1);

        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
        MnItemActDes.setMnemonic('a');
        MnItemActDes.setText("Activar");
        MnItemActDes.setToolTipText("Activar");
        MnItemActDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemActDesActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemActDes);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cliente");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });

        //KEffectPanel effectPanel = new KEffectPanel();
        //PanelNuevo = effectPanel;
        PanelNuevo = PanelEffect;
        PanelNuevo.setBackground(new java.awt.Color(0, 153, 204));
        PanelNuevo.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        btnnew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnnew.setForeground(new java.awt.Color(255, 255, 255));
        btnnew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Nuevo_1.png"))); // NOI18N
        btnnew.setMnemonic('n');
        btnnew.setText("Nuevo");
        btnnew.setToolTipText("Ingresar Nuevo Registro");
        btnnew.setContentAreaFilled(false);
        btnnew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnnew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewActionPerformed(evt);
            }
        });
        jPanel1.add(btnnew);

        btnsave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(255, 255, 255));
        btnsave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Agregar.png"))); // NOI18N
        btnsave.setMnemonic('g');
        btnsave.setText("Guardar");
        btnsave.setToolTipText("Guardar Registro");
        btnsave.setContentAreaFilled(false);
        btnsave.setEnabled(false);
        btnsave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnsave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnsave);

        btncancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel.setForeground(new java.awt.Color(255, 255, 255));
        btncancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel.setMnemonic('c');
        btncancel.setText("Cancelar");
        btncancel.setToolTipText("Cancelar / Salir");
        btncancel.setContentAreaFilled(false);
        btncancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });
        jPanel1.add(btncancel);

        PanelNuevo.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBackground(new java.awt.Color(0, 153, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N

        jPanel3.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombres");

        /*CustomTextField customTextField = new CustomTextField(100);
        txtNombre = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNombre.setToolTipText("Ingrese Nombres");
        txtNombre.setEnabled(false);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Apellidos");

        /*CustomTextField customTextField1 = new CustomTextField(100);
        txtApellido = customTextField1;
        customTextField1.setPlaceholder("Ingrese Apellidos del Ejecutivo");
        customTextField1.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField1.setForeground(Color.BLACK);
        customTextField1.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtApellido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtApellido.setToolTipText("Ingrese Apellidos");
        txtApellido.setEnabled(false);
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("No. Cédula");

        try {
            txtcedula.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-######-####U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtcedula.setToolTipText("Ingrese No. Cédula");
        txtcedula.setEnabled(false);
        txtcedula.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtcedula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtcedulaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtcedulaFocusLost(evt);
            }
        });
        txtcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcedulaKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Sexo");

        jPanel10.setOpaque(false);
        jPanel10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPanel10KeyTyped(evt);
            }
        });

        buttonGroup1.add(rdFemenino);
        rdFemenino.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rdFemenino.setForeground(new java.awt.Color(255, 255, 255));
        rdFemenino.setSelected(true);
        rdFemenino.setText("Femenino");
        rdFemenino.setEnabled(false);
        rdFemenino.setOpaque(false);
        rdFemenino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rdFemeninoKeyTyped(evt);
            }
        });
        jPanel10.add(rdFemenino);

        buttonGroup1.add(rdMasculino);
        rdMasculino.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rdMasculino.setForeground(new java.awt.Color(255, 255, 255));
        rdMasculino.setText("Masculino");
        rdMasculino.setEnabled(false);
        rdMasculino.setOpaque(false);
        rdMasculino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rdMasculinoKeyTyped(evt);
            }
        });
        jPanel10.add(rdMasculino);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("No. Teléfono");

        try {
            txttel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txttel.setToolTipText("Ingrese No. Teléfono");
        txttel.setEnabled(false);
        txttel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txttel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txttelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txttelFocusLost(evt);
            }
        });
        txttel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txttelKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Dirección");

        /*CustomTextFieldArea customTextField2 = new CustomTextFieldArea();
        txtdireccion = customTextField2;
        customTextField2.setPlaceholder("Ingrese Dirección del Ejecutivo");
        customTextField2.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField2.setForeground(Color.BLACK);
        customTextField2.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtdireccion.setColumns(20);
        txtdireccion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtdireccion.setRows(5);
        txtdireccion.setToolTipText("Ingrese Dirección");
        txtdireccion.setEnabled(false);
        txtdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtdireccion);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Correo Electrónico");

        /*CustomTextField customTextField3 = new CustomTextField(100);
        txtcorreo = customTextField3;
        customTextField3.setPlaceholder("Ingrese Correo del Ejecutivo");
        customTextField3.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField3.setForeground(Color.BLACK);
        customTextField3.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtcorreo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtcorreo.setToolTipText("Ingrese Correo Electrónico");
        txtcorreo.setEnabled(false);
        txtcorreo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtcorreoFocusLost(evt);
            }
        });
        txtcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcorreoKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Organización o Empresa");

        cmbClienteJuridico.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbClienteJuridico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Particular" }));
        cmbClienteJuridico.setToolTipText("Seleccione Proveedor");
        cmbClienteJuridico.setEnabled(false);
        cmbClienteJuridico.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClienteJuridicoItemStateChanged(evt);
            }
        });
        cmbClienteJuridico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbClienteJuridicoKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Descuento");

        cmbDescuento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbDescuento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ninguno", "5%", "10%", "15%", "30%" }));
        cmbDescuento.setToolTipText("Seleccione Proveedor");
        cmbDescuento.setEnabled(false);
        cmbDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbDescuentoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtcedula, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cmbDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cmbClienteJuridico, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcedula, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClienteJuridico, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotografía", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel9.setOpaque(false);

        btnFoto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFoto.setForeground(new java.awt.Color(255, 255, 255));
        btnFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Foto.png"))); // NOI18N
        btnFoto.setMnemonic('a');
        btnFoto.setText("Agregar Fotografía");
        btnFoto.setToolTipText("Seleccionar Fotografía");
        btnFoto.setContentAreaFilled(false);
        btnFoto.setEnabled(false);
        btnFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFoto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFotoActionPerformed(evt);
            }
        });

        jLblFoto.setForeground(new java.awt.Color(235, 235, 150));
        jLblFoto.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFoto)
                .addContainerGap())
        );

        lblalerta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblalerta.setForeground(new java.awt.Color(255, 255, 0));
        lblalerta.setText("Alertas");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblalerta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(102, 102, 102)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(lblalerta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        PanelNuevo.add(jPanel6, java.awt.BorderLayout.CENTER);

        TabbedPane.addTab("Nuevo", PanelNuevo);

        PanelVer = PanelEffect2;
        PanelVer.setBackground(new java.awt.Color(0, 153, 204));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Nombres", "Apellidos", "No. Cédula", "Sexo", "Descuento", "Estado" }));
        cmbbusc.setToolTipText("Buscar Por:");

        txtbusc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtbusc.setToolTipText("Buscar");
        CustomTextField customTextField9 = new CustomTextField(100);
        txtbusc = customTextField9;
        customTextField9.setPlaceholder("Ingrese Información a Buscar");
        customTextField9.setFont(new java.awt.Font("Tahoma", 0, 16));
        customTextField9.setForeground(Color.BLACK);
        customTextField9.setPlaceholderForeground(Color.LIGHT_GRAY);
        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();
        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));
        ModeloAutoCompletar modelo1 = new ModeloVendNames();
        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));
        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });
        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Tabla.setToolTipText("Lista Registros");
        Tabla.setComponentPopupMenu(PopupMenu);
        Tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnActivar.setForeground(new java.awt.Color(255, 255, 255));
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png"))); // NOI18N
        btnActivar.setMnemonic('A');
        btnActivar.setText("Activar");
        btnActivar.setToolTipText("Activar");
        btnActivar.setContentAreaFilled(false);
        btnActivar.setEnabled(false);
        btnActivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnActivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnActivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnActivarFocusLost(evt);
            }
        });
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnActivar);

        btnDesactivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDesactivar.setForeground(new java.awt.Color(255, 255, 255));
        btnDesactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png"))); // NOI18N
        btnDesactivar.setMnemonic('D');
        btnDesactivar.setText("Desactivar");
        btnDesactivar.setToolTipText("Desactivar");
        btnDesactivar.setContentAreaFilled(false);
        btnDesactivar.setEnabled(false);
        btnDesactivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDesactivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDesactivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusLost(evt);
            }
        });
        btnDesactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesactivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnDesactivar);

        btnmodify.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnmodify.setForeground(new java.awt.Color(255, 255, 255));
        btnmodify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modificar.png"))); // NOI18N
        btnmodify.setMnemonic('o');
        btnmodify.setText("Modificar");
        btnmodify.setToolTipText("Modificar Registro");
        btnmodify.setContentAreaFilled(false);
        btnmodify.setEnabled(false);
        btnmodify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnmodify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnmodify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnmodifyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnmodifyFocusLost(evt);
            }
        });
        btnmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifyActionPerformed(evt);
            }
        });
        jPanel5.add(btnmodify);

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TablaTodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Registros");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotografía", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel11.setOpaque(false);

        jLblFoto1.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.EAST);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1230, 754));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private int ID_Cliente;
    private boolean Modify;
    private String File = "";
    private MenuPrincipal MP;
    private String Foto;
    

   
    
    public void Foto (String Foto) {
        this.Foto = Foto;
    }
      
   
    public void setFoto(){
        
           File = this.Foto;
           jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
            jLblFoto.setSize(256,256);
    }
    
    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }
    
    
    public static ResultSet resultado;
    public static ResultSet resultado2;

   
    
    public void Guardar (){
        
        
        String Nombres, Apellidos, FotoP, Sexo, Cedula, Correo, Direccion, Telefono;
        int SelectCombo = cmbDescuento.getSelectedIndex();
        
        Nombres = txtNombre.getText().trim();
        Apellidos = txtApellido.getText().trim();
        Cedula = txtcedula.getText().trim();
        Correo = txtcorreo.getText().trim();
        Direccion = txtdireccion.getText().trim();
        Telefono = txttel.getText().trim();
        FotoP = File;
        
        String Representante = "No";
        
        
        if(rdFemenino.isSelected()){
            Sexo = "Femenino";
        }
        else{
            Sexo = "Masculino";
        }
        
        if("".equals(Correo)){
            Correo="No Ingresado";
        }
        else{
        
        if(!Correo.contains("@")||!Correo.contains(".")) {
     JOptionPane.showMessageDialog(this,"Dirección de Correo Electrónico No Válido",
     "Correo No Válido",JOptionPane.ERROR_MESSAGE);
     return;  
           }
        }
            
        
          if("".equals(Direccion))  {
            Direccion = "No Ingresada";
           }
          if("-".equals(Telefono))  {
            Telefono = "No Ingresado";
           }
          if("".equals(Correo))  {
            Correo = "No Ingresado";
           }
          if("".equals(Apellidos))  {
            Apellidos = "No Ingresado";
           }
          
          if("".equals(Nombres))  {
            JOptionPane.showMessageDialog(this,"Ingrese Los Nombres","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
//        
//        if("".equals(Apellidos))  {
//            JOptionPane.showMessageDialog(this,"Ingrese Los Apellidos","Ingrese",JOptionPane.ERROR_MESSAGE);
//            return;
//           }
//        
        if("-      -".equals(Cedula))  {
//            JOptionPane.showMessageDialog(this,"Ingrese El No. Cédula","Ingrese",JOptionPane.ERROR_MESSAGE);
//            return;
            
            Cedula = "No Ingresada";
         
        }
        else{
        
  
            int IDC = 0;  
 
    try{
    
    resultado = Conexion.consulta("Select [ID_Cliente] from [dbo].[Cliente] where [ID_Cliente] != "+ID_Cliente+" and "
            + "[Cedula_Cliente] = '"+Cedula+"'");
    
    while(resultado.next()){
        IDC = resultado.getInt(1);
    }
    }catch(SQLException ex){

    }     

if(IDC != 0){
    JOptionPane.showMessageDialog(this, "Número de Cédula "+Cedula+" del Cliente ya Existe en el Registro", "No. Cédula ya Registrado", JOptionPane.ERROR_MESSAGE);
    return;
}
        
}
        
      double Descuento = 0;
      
   
          if(SelectCombo==1){
              Descuento = 5;
          }
           if(SelectCombo==2){
              Descuento = 10;
          }
            if(SelectCombo==3){
              Descuento = 15;
          }
             if(SelectCombo==4){
              Descuento = 30;
          }
      

       
         
//        if("".equals(Foto) && Modify == false)  {
//            JOptionPane.showMessageDialog(this,"Seleccione La Fotografía","Seleccione",JOptionPane.ERROR_MESSAGE);
//            return;
//           }
       
       if("".equals(FotoP)){
           File F = new File("");
           
           FotoP = F.getAbsolutePath()+"\\Farmacia\\Default\\Cliente.jpg";
       }
       
       
       int SelectComboJ = cmbClienteJuridico.getSelectedIndex();

       int ID_ClienteJ = ID_ClienteJuridico [SelectComboJ];

            if(Modify==true){

                int ID = ID_Cliente;
           
                Cliente.Actualizar_Cliente(ID, Nombres, Apellidos, Telefono, Cedula, Correo, Direccion, Sexo,
                        Descuento, FotoP, ID_ClienteJ, Representante);
//                
//                if(!"".equals(FotoP)){
//                Cliente.Agregar_Imagen(ID, FotoP);
//                }
//                
                ActualizarTabla();
                CleanAll();
                DisableAll();
                Modify = false;
                
            }
            else{

               
                Cliente.Agregar_Cliente(Nombres, Apellidos, Telefono, Cedula, Correo, Direccion, Sexo, 
                        Descuento, FotoP,  ID_ClienteJ, Representante);
                ActualizarTabla();
                CleanAll();
                DisableAll();

            }
    }
    
    public void CleanAll(){
        
        File = "";
        txtApellido.setText("");
        txtcedula.setText("");
        txtNombre.setText("");
        txtcorreo.setText("");
        txtdireccion.setText("");
        txttel.setText("");
        cmbClienteJuridico.setSelectedIndex(0);
        cmbDescuento.setSelectedIndex(0);
        ID_Cliente = 0;
        jLblFoto.setIcon(null);
        rdFemenino.setSelected(true);
        Modify = false;
        
    }
    
    public void EnableAll(){
        txtApellido.setEnabled(true);
        txtcedula.setEnabled(true);
        txtNombre.setEnabled(true);
        txtcorreo.setEnabled(true);
        txtdireccion.setEnabled(true);
        txttel.setEnabled(true);
        cmbClienteJuridico.setEnabled(true);
        cmbDescuento.setEnabled(true);
        rdFemenino.setEnabled(true);
        rdMasculino.setEnabled(true);
        jLblFoto.setEnabled(true);
        btnFoto.setEnabled(true);
        btnsave.setEnabled(true);  
    }
    
      public void DisableAll(){
        txtApellido.setEnabled(false);
        txtcedula.setEnabled(false);
        txtNombre.setEnabled(false);
        txtcorreo.setEnabled(false);
        txtdireccion.setEnabled(false);
        txttel.setEnabled(false);
        cmbClienteJuridico.setEnabled(false);
        cmbDescuento.setEnabled(false);
        rdFemenino.setEnabled(false);
        rdMasculino.setEnabled(false);
        jLblFoto.setEnabled(false);
        btnFoto.setEnabled(false);
        btnsave.setEnabled(false);
        
    }
    
    
      
    public void AddPic(){
        
          JFileChooser dlg = new JFileChooser();
          FileNameExtensionFilter filtroImagen=new FileNameExtensionFilter("JPG, PNG, GIF, BMP, & TIFF","jpg","png","gif","bmp", "tif");
         
          dlg.setFileFilter(filtroImagen);
        
        int option = dlg.showOpenDialog(this);

        if(option==JFileChooser.APPROVE_OPTION) {
            //Obtiene La Ruta del Archivo Seleccionado
            File = dlg.getSelectedFile().getPath();
        
            jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
            jLblFoto.setSize(256,256);
        }
    }
    
    
   
    
   public void ActualizarTabla(){
        
       Titulo();
        
       model.setRowCount(0);
       Tabla.setModel(model);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from [dbo].[ClienteV]");

        
       
     
       while (resultado.next())
       {     
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              
              model.addRow(Datos);  
   
    }
       
       Tabla.setModel(model);
    
   
//        Tabla.getColumnModel().getColumn( 10 ).setCellEditor( new Celda_CheckBox() );
//        //para pintar la columna con el CheckBox en la tabla, en este caso, la primera columna
//        Tabla.getColumnModel().getColumn( 10 ).setCellRenderer(new Render_CheckBox());      

        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
//       for(int i =0;i<Tabla.getColumnCount();i++){
//       Tabla.getColumnModel().getColumn(i).setCellRenderer(getRenderer());
//        }    
//       Tabla.repaint();
    }
   
   public void Buscar(){
       
       Titulo();
       
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where "
                        + "[ID_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
            Tabla.getColumnModel().getColumn(1).setCellRenderer(getRenderer());
       
            break;

                case 2:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where "
                        + "[Nombres_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
                Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            Tabla.getColumnModel().getColumn(3).setCellRenderer(getRenderer());
//            
             break;
                    
          case 3:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where "
                        + "[Apellidos_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
               Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            Tabla.getColumnModel().getColumn(4).setCellRenderer(getRenderer());
            
            break;
           
           case 4:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where "
                        + "[Cedula_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
               Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

               Tabla.getColumnModel().getColumn(6).setCellRenderer(getRenderer());
               
            break;
               
            case 5:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where "
                        + "[Sexo_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
               Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
               Tabla.getColumnModel().getColumn(7).setCellRenderer(getRenderer());

            break;
                
            case 6:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where [Descuento_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
               Tabla.getColumnModel().getColumn(11).setCellRenderer(getRenderer());

            break;
                
            case 7:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteV] where [Estado_Cliente] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= false;
              
              int ID_C = resultado.getInt(1);
              
              Datos [1]= String.valueOf(ID_C);    
              
              String Juridico = "-";
              int ID_CJ = resultado.getInt(2);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(5);
              Datos [7]= resultado.getString(6);
              Datos [8]= resultado.getString(7);
              Datos [9]= resultado.getString(8);
              Datos [10]= resultado.getString(9);
              Datos [11]= resultado.getString(10);
              java.util.Date FechaI = resultado.getDate(11);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(12).trim()+" "+resultado.getString(13).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(14);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

               Tabla.getColumnModel().getColumn(14).setCellRenderer(getRenderer());
               
            break;
                
         
           
            default:

            break;

          
        
        }
        Tabla.setModel(model);
        
         
        Tabla.repaint();
             
//         for(int i =0;i<Tabla.getColumnCount();i++){
////       Tabla.getColumnModel().getColumn(i).setCellRenderer(getRenderer());
//        }
//       Tabla.repaint();
   }

   
    
   
    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
       Buscar();
// TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

    
    
    public void VerFoto(){
       
   int fila = Tabla.getSelectedRow();
      
   if (fila > -1){
     
          int ID = 0;
          
         ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
         
         String Fotografia;
                 
         try {
                 
          
   resultado = Conexion.consulta("Select Fotografia_Cliente from Cliente where ID_Cliente = "+ID);
          
     if (resultado.next()){
            Fotografia = resultado.getString(1);
                            
            File = Fotografia;
            jLblFoto1.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(289,292,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto1.setIcon(newIcon);
            
           
     }                          
     
                              
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "El Cliente No Posee Fotografía","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      
        }
    }
   
     public void ActivarBotones(){
       

   
      boolean Checkbox = false;
      
      for(int j=0; j<Tabla.getRowCount(); j++){
        
          Checkbox = (boolean) Tabla.getValueAt(j, 0);
          
          if(Checkbox == true){      
            
             btnActivar.setEnabled(true);
             btnDesactivar.setEnabled(true);
             
              break;
          }
       }
      
      
       
      int Fila = Tabla.getSelectedRow();
        
      if(Checkbox == false){
      
           btnActivar.setEnabled(false);
           btnDesactivar.setEnabled(false);

        if (Fila > -1){

            btnmodify.setEnabled(true);
            MnItemActDes.setEnabled(true);
            MnItemModificar.setEnabled(true);

            String Estado = ((String)this.Tabla.getModel().getValueAt(Fila, 14));
     

            if("Activo".equalsIgnoreCase(Estado)){
        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/DesactivarIcon.png"))); // NOI18N
        MnItemActDes.setText("Desactivar");
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
        MnItemActDes.setText("Activar");
            }
   
        }
        else{
            btnmodify.setEnabled(false);
            MnItemActDes.setEnabled(false);
            MnItemModificar.setEnabled(false);
    
        }  
      }

      
        if (Fila > -1){
              btnmodify.setEnabled(true);
              MnItemActDes.setEnabled(true);
              MnItemModificar.setEnabled(true);
        }
        else{
              btnmodify.setEnabled(false);
              MnItemActDes.setEnabled(false);
              MnItemModificar.setEnabled(false);
        }
    }
   
    
    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
      

   VerFoto();
   ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost
        
   ActivarBotones();
   // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed

       ActivarBotones();
       Activar();
       ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarActionPerformed

   public void Activar(){
       
       
       int ID, Opcion;
       boolean Flag;
      
             
             Opcion= JOptionPane.showConfirmDialog(this, "Está Seguro Que Desea Activar Cliente(s) ?", "Confirmación", JOptionPane.YES_NO_OPTION);
            
            if(Opcion==JOptionPane.YES_OPTION){

                 
        for(int i=0; i<Tabla.getRowCount();i++){
            
            
            Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);
      
         if(Flag == true){
               ID= Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());
      
               Cliente.Activar_Cliente(ID);
         }
               
            }
         JOptionPane.showMessageDialog(this, "Cliente(s) Activado(s) Con Éxito", "Activado(s) Con Éxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }
 
   
     public void Desactivar(){
       
       
       int ID, Opcion;
       boolean Flag;
      
             
             Opcion= JOptionPane.showConfirmDialog(this, "Está Seguro Que Desea Desactivar Cliente(s) ?", "Confirmación", JOptionPane.YES_NO_OPTION);
            
            if(Opcion==JOptionPane.YES_OPTION){

                 
        for(int i=0; i<Tabla.getRowCount();i++){
            
            
            Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);
      
         if(Flag == true){
               ID= Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());
      
               Cliente.Desactivar_Cliente(ID);
         }
               
            }
         JOptionPane.showMessageDialog(this, "Cliente(s) Desactivado(s) Con Éxito", "Activado(s) Con Éxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }

   
    private void btnActivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusGained
       
        
        ActivarBotones();
 
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusGained

    public void Modificar(){
        int fila = Tabla.getSelectedRow();

        int ID;
        String Nombres, Apellidos, Cedula,  Desc, Direccion, Correo,
                Sexo, Telefono, Juridico;
        
        if (fila > -1){

            ID= Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Juridico = ((String)this.Tabla.getModel().getValueAt(fila, 2));
            Nombres=((String)this.Tabla.getModel().getValueAt(fila, 3));
            Apellidos=((String)this.Tabla.getModel().getValueAt(fila, 4));
            Cedula=((String)this.Tabla.getModel().getValueAt(fila, 6));
            Sexo=((String)this.Tabla.getModel().getValueAt(fila, 7));
            Telefono=((String)this.Tabla.getModel().getValueAt(fila, 8));
            Correo=((String)this.Tabla.getModel().getValueAt(fila, 9));
            Direccion=((String)this.Tabla.getModel().getValueAt(fila, 10));
            Desc= ((String)this.Tabla.getModel().getValueAt(fila, 11));

            CleanAll();
            EnableAll();
           
            Juridico = Juridico.trim();
            
            if(!"-".equals(Juridico)){
                cmbClienteJuridico.setSelectedItem(Juridico);
            }

        if("No Ingresada".equals(Cedula)){
            Cedula="";
        }
        if("No Ingres".equals(Telefono)){
            Telefono="";
        }
        if("No Ingresado".equals(Correo)){
            Correo="";
        }
        if("No Ingresada".equals(Direccion)){
            Direccion="";
        }
        if("No Ingresado".equals(Apellidos)){
            Apellidos="";
        }
        
            
        ID_Cliente = ID;
        txtNombre.setText(Nombres);
        txtApellido.setText(Apellidos);
        txtcedula.setText(Cedula);
        txtcorreo.setText(Correo);
        txtdireccion.setText(Direccion);
        txttel.setText(Telefono);
        
        int Descuento = BigDecimal.valueOf(Double.parseDouble(Desc)).intValue();
     
        
        if(Descuento == 0){
             cmbDescuento.setSelectedIndex(0);
         }
          if(Descuento == 5){
             cmbDescuento.setSelectedIndex(1);
         }
           if(Descuento == 10){
             cmbDescuento.setSelectedIndex(2);
         }
            if(Descuento == 15){
             cmbDescuento.setSelectedIndex(3);
            }
             if(Descuento == 30){
             cmbDescuento.setSelectedIndex(4);
         }
        
        if( "Masculino".equals(Sexo)){
            rdMasculino.setSelected(true);
        }
        if( "Femenino".equals(Sexo)){
            rdFemenino.setSelected(true);
        }

        ActualizarFoto();
        
        String Representante = "";
        
           try{
                resultado = Conexion.consulta("Select [Representante] from Cliente where ID_Cliente = "+ID);
                
                while(resultado.next()){
                    Representante = resultado.getString(1);
                }
            }catch(SQLException ex){ }
           
           if("Si".equals(Representante)){
               cmbClienteJuridico.setEnabled(false);
               cmbDescuento.setEnabled(false);
           }
           
            TabbedPane.setSelectedComponent(PanelNuevo);
            Modify=true;

        }
        
        

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Cliente a Modificar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }
    
    private void btnmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifyActionPerformed

        ActivarBotones();      
        Modificar();
       
    }//GEN-LAST:event_btnmodifyActionPerformed

    private void btnmodifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusGained
        ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusGained

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed
   
        ActualizarTabla();  
    
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed

    private TableCellRenderer getRenderer() {
        return new TableCellRenderer() {
            JTextField f = new JTextField();

            @Override
            public Component getTableCellRendererComponent(JTable arg0, Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                if(arg1 != null){
                    f.setText(arg1.toString());
                    String string = arg1.toString();
                    string = string.toLowerCase();
                    String Busc = txtbusc.getText().toLowerCase();
                    if(string.contains(Busc)){
                        int indexOf = string.indexOf(Busc);
                        try {
                            f.getHighlighter().addHighlight(indexOf,indexOf+Busc.length(),
                                    new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.CYAN));
                        } catch (BadLocationException e) {
                        }
                    }
                } else {
                    f.setText("");
                    f.getHighlighter().removeAllHighlights();
                }
                return f;
            }
        };
    }

    
    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

       
        File miDir = new File ("");
        String reporte = miDir.getAbsolutePath()+"\\src\\Reportes\\Cliente.jasper";

        JasperPrint jp = null;
        try {
                jp = JasperFillManager.fillReport(reporte, null,Conexion.con);
            } catch (JRException ex) {
    
//                Logger.getLogger(ProveedorP.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("Clientes - Sistema de Inventario y Facturación RJ");
        
        view.setZoomRatio((float) 0.70);
        view.setVisible(true);
        
        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();
   //     this.toBack();
        
   //    this.setExtendedState(javax.swing.JFrame.CROSSHAIR_CURSOR); 
        
        

    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);  
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed
      
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged

   int index = TabbedPane.getSelectedIndex();
   if(index==0){
     
      PanelEffect.setEffect(new EntryBoucing(1000));
      PanelEffect.startEffect();
   }
   if(index==1){
     
      PanelEffect2.setEffect(new Shape(1000));
      PanelEffect2.startEffect();
      txtbusc.requestFocus();
   }
   
         // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

int [] ID_ClienteJuridico;	  
    
KEffectPanel PanelEffect = new KEffectPanel();
KEffectPanel PanelEffect2 = new KEffectPanel();

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//                this.panelColor = new JPanel();
//		this.panelColor.setBackground(Color.BLACK);
//		this.panelColor.setBorder(new LineBorder(new Color(0, 0, 0)));
//		this.panelColor.setBounds(133, 618, 43, 32);
//                
//     PanelEffect.setEffect(new SplitHorizontalFade (1000,panelColor.getBackground()));
//     PanelEffect.startEffect();
    
				
PanelEffect.setEffect(new EntryBoucing(1000));
PanelEffect.startEffect();
                                

//Date now = new Date();
//
//DateFormat df =  DateFormat.getDateInstance();
//DateFormat df1 = DateFormat.getDateInstance(DateFormat.SHORT);
//DateFormat df2 = DateFormat.getDateInstance(DateFormat.MEDIUM);
//DateFormat df3 = DateFormat.getDateInstance(DateFormat.LONG);
//DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
//String s =  df.format(now);
//String s1 = df1.format(now);
//String s2 = df2.format(now);
//String s3 = df3.format(now);
//String s4 = df4.format(now);
//System.out.println("(Default) Hoy es:" + s);
//System.out.println("(SHORT)   Hoy es:" + s1);
//System.out.println("(MEDIUM)  Hoy es:" + s2);
//System.out.println("(LONG)    Hoy es:" + s3);
//System.out.println("(FULL)    Hoy es:" + s4);


      
        //this.setResizable(false);
        
       
        
       //  String Dia, Mes, Ano;
//
//        Calendar c = new GregorianCalendar();
//
//        Dia = Integer.toString(c.get(Calendar.DATE));
//        Mes = Integer.toString(c.get(Calendar.MONTH)+1);
//        Ano = Integer.toString(c.get(Calendar.YEAR));
//
//        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//        String strFecha =Dia+"-"+Mes+"-"+Ano ;
//        Date Fecha;
        
//        try {
//
//            Fecha = sdf.parse(strFecha);
//
//            jdFechaNacimiento.setMaxSelectableDate(Fecha);
//
//        } catch (ParseException ex) {
//        }
//        
int MaxID = 0;

try{
    
    
     resultado = Conexion.consulta("Select Max(ID_ClienteJuridico)from ClienteJuridico");
    
    while(resultado.next()){
        
        MaxID = resultado.getInt(1);    
    }
    
    }catch(SQLException ex){}

MaxID++;

ID_ClienteJuridico = new int[MaxID];

ID_ClienteJuridico [0] = 0;

int i=1;

try{
    
    resultado = Conexion.consulta("Select ID_ClienteJuridico, Nombre_ClienteJuridico from ClienteJuridico "
            + "where Estado_ClienteJuridico = 'Activo'");
    
    while(resultado.next()){
        
        ID_ClienteJuridico [i] = resultado.getInt(1);
        cmbClienteJuridico.addItem(resultado.getString(2).trim());
        i++;
    }
    
    
}catch(SQLException ex){}

       
   ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
    public void Titulo(){
         Object [] Titulo = {"","No.", "Organización", "Nombres", "Apellidos", "Deuda",
            "No. Cédula", "Sexo", "Teléfono", "Correo", "Dirección", "Descuento", 
            "Fecha Ingreso", "Registrado Por", "Estado"};
        
        model.setColumnIdentifiers(Titulo);
        
        this.Tabla.setModel(model);
        
        JTableHeader header = Tabla.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));
      
        Tabla.setDefaultRenderer(Object.class, new FormatoTabla());
      
        CheckBoxHeader();  
    }
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btnFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFotoActionPerformed
              ModoImagen Pic = new ModoImagen(this, false);
              this.setVisible(false);
              Pic.setCliente(this);
              Pic.setVisible(true);
              Pic.toFront();
        
     //   AddPic();        // TODO add your handling code here:
    }//GEN-LAST:event_btnFotoActionPerformed

    private void btnActivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusLost
 
      ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusLost

    private void btnmodifyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusLost
      ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusLost

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained

      ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
  
      ActivarBotones();  // TODO add your handling code here:
    }//GEN-LAST:event_TablaMousePressed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed

        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancelActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed

        Guardar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewActionPerformed

        EnableAll();
        CleanAll();
      
             
              
    }//GEN-LAST:event_btnnewActionPerformed

    private void txtcedulaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcedulaFocusGained
txtcedula.setCaretPosition(0);        // TODO add your handling code here:
    }//GEN-LAST:event_txtcedulaFocusGained

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
char a = evt.getKeyChar();

if(!Character.isLetter(a)&&!Character.isISOControl(a)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
    }
if(a == KeyEvent.VK_ENTER){
    txtApellido.requestFocus();
}
// TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
char a = evt.getKeyChar();

if(!Character.isLetter(a)&&!Character.isISOControl(a)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
    } 

if(a == KeyEvent.VK_ENTER){
    txtcedula.requestFocus();
}
// TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoKeyTyped

    
    
    private void txtcedulaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcedulaFocusLost

 String NoCedula = txtcedula.getText();
 
 int ID = 0;       
try{
    
    resultado = Conexion.consulta("Select [ID_Cliente] from [dbo].[Cliente] where [ID_Cliente] != "+ID_Cliente+" and "
            + " [Cedula_Cliente] = '"+NoCedula+"'");
    
    while(resultado.next()){
        ID = resultado.getInt(1);
    }
}catch(SQLException ex){

}     

if(ID != 0){
    txtcedula.setBackground(new java.awt.Color(255, 204, 204));
    lblalerta.setText("No. Cédula ya se registró en la Base de Datos");
}
else{
    txtcedula.setBackground(new java.awt.Color(255,255,255));
    lblalerta.setText("");
}
// TODO add your handling code here:
    }//GEN-LAST:event_txtcedulaFocusLost

    private void txtcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcedulaKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    rdFemenino.requestFocus();
}       
 // TODO add your handling code here:
    }//GEN-LAST:event_txtcedulaKeyTyped

    private void cmbClienteJuridicoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbClienteJuridicoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    cmbDescuento.requestFocus();
}        
// TODO add your handling code here:
    }//GEN-LAST:event_cmbClienteJuridicoKeyTyped

    
    
       public void ActualizarFoto(){
       
   int fila = Tabla.getSelectedRow();
      
   if (fila > -1){
     
          int ID = 0;
          
         ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
         
         String Fotografia;
                 
         try {
                 
          
   resultado = Conexion.consulta("Select Fotografia_Cliente from Cliente where ID_Cliente = "+ID);
          
     if (resultado.next()){
            Fotografia = resultado.getString(1);
                            
            File = Fotografia;
            jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
           // jLblFoto.setSize(256,256);
            
           
     }                          
     
                              
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "El Cliente No Posee Fotografía","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      
        }
    }
  
    
    private void jPanel10KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel10KeyTyped
         // TODO add your handling code here:
    }//GEN-LAST:event_jPanel10KeyTyped


    private void txtcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcorreoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    cmbClienteJuridico.requestFocus();
}          // TODO add your handling code here:
    }//GEN-LAST:event_txtcorreoKeyTyped

    private void txttelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttelFocusGained
txttel.setCaretPosition(0);           // TODO add your handling code here:
    }//GEN-LAST:event_txttelFocusGained

    private void txttelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txttelFocusLost

    private void txttelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttelKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    txtdireccion.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txttelKeyTyped

    private void MnItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemModificarActionPerformed
        Modificar();      // TODO add your handling code here:
    }//GEN-LAST:event_MnItemModificarActionPerformed

    
    public void ActivarDesactivar(){
        int fila = Tabla.getSelectedRow();

        int ID;
        String Nombre;
        int v=JOptionPane.NO_OPTION;
        String Estado;
        String Apellido;

        if (fila > -1){
            
            

            ID= Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Nombre=((String)this.Tabla.getModel().getValueAt(fila, 2));
            Apellido = ((String)this.Tabla.getModel().getValueAt(fila, 3));
            Estado = ((String)this.Tabla.getModel().getValueAt(fila,14));

           
            
            if("Activo".equalsIgnoreCase(Estado)){
                
                v= JOptionPane.showConfirmDialog(this, "Está Seguro Que Desea Desactivar al Cliente "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmación", JOptionPane.YES_NO_OPTION);
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
             
                v= JOptionPane.showConfirmDialog(this, "Está Seguro Que Desea Activar al Cliente "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmación", JOptionPane.YES_NO_OPTION);
            }

            if(v==JOptionPane.YES_OPTION){

                
                Cliente.Activar_Desactivar_Cliente(ID);
               
                ActualizarTabla();
            }
        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Cliente a Activar/Desactivar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }
    
    
    
    private void MnItemActDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemActDesActionPerformed
        ActivarDesactivar();        // TODO add your handling code here:
    }//GEN-LAST:event_MnItemActDesActionPerformed

    private void btnDesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesactivarActionPerformed
ActivarBotones();
Desactivar();
ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarActionPerformed

    private void btnDesactivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusGained
   ActivarBotones();        // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusGained

    private void btnDesactivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusLost
   ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusLost

    private void rdFemeninoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rdFemeninoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    txttel.requestFocus();
}         // TODO add your handling code here:
    }//GEN-LAST:event_rdFemeninoKeyTyped

    private void rdMasculinoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rdMasculinoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    txttel.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_rdMasculinoKeyTyped

    private void txtdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdireccionKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    txtcorreo.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtdireccionKeyTyped

    private void txtcorreoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcorreoFocusLost
     String Correo = txtcorreo.getText().trim();
     
     if(!"".equals(Correo)){
         
        if(!Correo.contains("@")||!Correo.contains(".")) {
     lblalerta.setText("Dirección de Correo Electrónico No Válido");  
           } 
        else{
     lblalerta.setText("");  
        }  
     }
// TODO add your handling code here:
    }//GEN-LAST:event_txtcorreoFocusLost

    private void cmbDescuentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbDescuentoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    btnFoto.requestFocus();
}                // TODO add your handling code here:
    }//GEN-LAST:event_cmbDescuentoKeyTyped

    private void cmbClienteJuridicoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClienteJuridicoItemStateChanged
        
        int index = cmbClienteJuridico.getSelectedIndex();
        
        if(index==0){
            cmbDescuento.setEnabled(true);
        }
        else{     
            cmbDescuento.setEnabled(false); 
        }
        
        int Descuento = 0;
        
        int ID_CJ = ID_ClienteJuridico [index];
        

        
           try{
                resultado = Conexion.consulta("Select [Descuento_ClienteJuridico] from [dbo].[ClienteJuridicoV]"
                        + " where [ID_ClienteJuridico] = "+ID_CJ);
                
                while(resultado.next()){
                    Descuento = resultado.getInt(1);
                }
            }catch(SQLException ex){ }
           
         
           
         if(Descuento == 0){
             cmbDescuento.setSelectedIndex(0);
         }
          if(Descuento == 5){
             cmbDescuento.setSelectedIndex(1);
         }
           if(Descuento == 10){
             cmbDescuento.setSelectedIndex(2);
         }
            if(Descuento == 15){
             cmbDescuento.setSelectedIndex(3);
            }
         
             if(Descuento == 30){
             cmbDescuento.setSelectedIndex(4);
         }
        
// TODO add your handling code here:
    }//GEN-LAST:event_cmbClienteJuridicoItemStateChanged

    
    
    DefaultTableModel model = new DefaultTableModel() {

        
        
    Class[] types = new Class [] {
  
        java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class
    };
 

    @Override
    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

  

    @Override
    public boolean isCellEditable(int row, int column) {
    
     if(column == 0){
            return true;
        }else{
            return false;
    }
       //all cells false
    
    }
};
    
    
    
    
     public class FormatoTabla extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
      
  if(String.valueOf(table.getValueAt(row,14)).equalsIgnoreCase("Inactivo"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }
  if(column==5){
     setForeground(Color.RED); 
  }   
  
//   if(String.valueOf(table.getValueAt(row,9)).equalsIgnoreCase("Si"))  {
//      setForeground(Color.GREEN);
//  }
                  
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }
   
     
 public class CheckBoxHeader extends JCheckBox  implements TableCellRenderer, MouseListener {  
 
  protected CheckBoxHeader rendererComponent;  
  protected int column;  
  protected boolean mousePressed = false;  
  
  public CheckBoxHeader(ItemListener itemListener) {  
    rendererComponent = this;  
    rendererComponent.addItemListener(itemListener);  
  }  
  @Override
  public Component getTableCellRendererComponent(  
      JTable table, Object value,  
      boolean isSelected, boolean hasFocus, int row, int column) {  
    if (table != null) {  
      JTableHeader header = table.getTableHeader();  
      if (header != null) {  
        rendererComponent.setForeground(header.getForeground());  
        rendererComponent.setBackground(header.getBackground());  
        rendererComponent.setFont(header.getFont());  
        header.addMouseListener(rendererComponent);  
      }  
    }  
    setColumn(column);  
    rendererComponent.setText("Selecc. Todo");  
    setBorder(UIManager.getBorder("TableHeader.cellBorder"));  
    return rendererComponent;  
  }  
  protected void setColumn(int column) {  
    this.column = column;  
  }  
  public int getColumn() {  
    return column;  
  }  
  
  protected void handleClickEvent(MouseEvent e) {  
    if (mousePressed) {  
      mousePressed=false;  
      JTableHeader header = (JTableHeader)(e.getSource());  
      JTable tableView = header.getTable();  
      TableColumnModel columnModel = tableView.getColumnModel();  
      int viewColumn = columnModel.getColumnIndexAtX(e.getX());  
      int columna = tableView.convertColumnIndexToModel(viewColumn);  
   
      if (viewColumn == this.column && e.getClickCount() == 1 && columna != -1) {  
        doClick();  
      }  
    }  
  } 
  
  @Override
  public void mouseClicked(MouseEvent e) {  
    handleClickEvent(e);  
    ((JTableHeader)e.getSource()).repaint();  
  }  
  @Override
  public void mousePressed(MouseEvent e) {  
    mousePressed = true;  
  }  
  @Override
  public void mouseReleased(MouseEvent e) {  
  }  
  @Override
  public void mouseEntered(MouseEvent e) {  
  }  
  @Override
  public void mouseExited(MouseEvent e) {  
  }  
}  

 public void CheckBoxHeader()  
  {  
   
    TableColumn tc = Tabla.getColumnModel().getColumn(0);  //No Columna
    tc.setCellEditor(Tabla.getDefaultEditor(Boolean.class));  
    tc.setCellRenderer(Tabla.getDefaultRenderer(Boolean.class));  
    tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));  
   
  }  
  class MyItemListener implements ItemListener  
  {  
    @Override
    public void itemStateChanged(ItemEvent e) {  
      Object source = e.getSource();  
      if (source instanceof AbstractButton == false) return;  
      boolean checked = e.getStateChange() == ItemEvent.SELECTED;  
      for(int x = 0, y = Tabla.getRowCount(); x < y; x++)  
      {  
        Tabla.setValueAt(checked,x,0);  //No Columna
      }
        Tabla.requestFocus();
    }  
  }  
 
      
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteNaturalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new ClienteNaturalP().setVisible(true);               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnItemActDes;
    private javax.swing.JMenuItem MnItemModificar;
    private javax.swing.JPanel PanelNuevo;
    private javax.swing.JPanel PanelVer;
    private javax.swing.JPopupMenu PopupMenu;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnDesactivar;
    private javax.swing.JButton btnFoto;
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnmodify;
    private javax.swing.JButton btnnew;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnshowall;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbClienteJuridico;
    private javax.swing.JComboBox cmbDescuento;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblFoto;
    private javax.swing.JLabel jLblFoto1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblalerta;
    private javax.swing.JRadioButton rdFemenino;
    private javax.swing.JRadioButton rdMasculino;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtbusc;
    private javax.swing.JFormattedTextField txtcedula;
    private javax.swing.JTextField txtcorreo;
    private javax.swing.JTextArea txtdireccion;
    private javax.swing.JFormattedTextField txttel;
    // End of variables declaration//GEN-END:variables
}

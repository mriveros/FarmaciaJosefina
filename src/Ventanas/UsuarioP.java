/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;



import Clases.StringMD;
import Procedimientos.Conexion;
import Procedimientos.Usuario;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.StringTokenizer;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Sala de Medios
 */
public class UsuarioP extends javax.swing.JFrame {

    /**
     * Creates new form RegistrarUsuario
     */
    public UsuarioP() {
              try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         
        initComponents();
        
        this.setResizable(false);
    }

    MenuPrincipal MP;

    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }
    
//    public void AddPic(String file){
//        
//        jLblFoto.setIcon(new ImageIcon(file));
//            //Modificando la imagen
//            ImageIcon icon = new ImageIcon(file);
//            //Se extrae la imagen del icono
//            Image img = icon.getImage();
//            //Se modifica su tamaño
//            Image newimg = img.getScaledInstance(200,180,java.awt.Image.SCALE_SMOOTH);
//            //SE GENERA EL IMAGE ICON CON LA NUEVA IMAGEN
//            ImageIcon newIcon = new ImageIcon(newimg);
//            //Se coloca el nuevo icono modificado
//            jLblFoto.setIcon(newIcon);
//            //Se cambia el tamaño de la etiqueta
//            jLblFoto.setSize(256,256);
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtpasswd = new javax.swing.JPasswordField();
        txtpasswdconfirmation = new javax.swing.JPasswordField();
        ckshow = new javax.swing.JCheckBox();
        txtpasswdclear = new javax.swing.JTextField();
        jLblFoto = new javax.swing.JLabel();
        cmbvende = new javax.swing.JComboBox();
        ckAdmin = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jLabel4 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnok = new javax.swing.JButton();
        btnok1 = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ingresar Nuevo Usuario");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("  Nombre Usuario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("  Contraseña");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("  Confirmar Contraseña   ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        txtpasswd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtpasswd.setToolTipText("Introducir Contraseña");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(txtpasswd, gridBagConstraints);

        txtpasswdconfirmation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtpasswdconfirmation.setToolTipText("Confirmar Contraseña");
        txtpasswdconfirmation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpasswdconfirmationKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtpasswdconfirmationKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(txtpasswdconfirmation, gridBagConstraints);

        ckshow.setBackground(new java.awt.Color(235, 235, 150));
        ckshow.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ckshow.setForeground(new java.awt.Color(255, 255, 255));
        ckshow.setText("Mostrar Contraseña");
        ckshow.setToolTipText("Mostrar Contraseña");
        ckshow.setContentAreaFilled(false);
        ckshow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ckshowStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(ckshow, gridBagConstraints);

        txtpasswdclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpasswdclearActionPerformed(evt);
            }
        });
        txtpasswdclear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpasswdclearKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(txtpasswdclear, gridBagConstraints);
        txtpasswdclear.setVisible(false);

        jLblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/AddUser.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        jPanel1.add(jLblFoto, gridBagConstraints);

        cmbvende.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbvende.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbvende.setToolTipText("Seleccione Empleado");
        cmbvende.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbvendeItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 4, 0, 5);
        jPanel1.add(cmbvende, gridBagConstraints);

        ckAdmin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ckAdmin.setForeground(new java.awt.Color(255, 255, 255));
        ckAdmin.setText("Administrador");
        ckAdmin.setContentAreaFilled(false);
        ckAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAdminActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(ckAdmin, gridBagConstraints);
        jPanel1.add(filler1, new java.awt.GridBagConstraints());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("  Empleado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        txtUserName.setEditable(false);
        txtUserName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 5);
        jPanel1.add(txtUserName, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnok.setForeground(new java.awt.Color(51, 51, 51));
        btnok.setMnemonic('g');
        btnok.setText("Guardar");
        btnok.setToolTipText("Guardar Nuevo Usuario");
        btnok.setEnabled(false);
        btnok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnokActionPerformed(evt);
            }
        });
        jPanel2.add(btnok);

        btnok1.setForeground(new java.awt.Color(51, 51, 51));
        btnok1.setMnemonic('e');
        btnok1.setText("Desactivar");
        btnok1.setToolTipText("Eliminar Usuario");
        btnok1.setEnabled(false);
        btnok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnok1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnok1);

        btncancel.setForeground(new java.awt.Color(51, 51, 51));
        btncancel.setMnemonic('c');
        btncancel.setText("Cancelar");
        btncancel.setToolTipText("Cancelar / Salir");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });
        jPanel2.add(btncancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(658, 334));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setCmbvende(String cmbvende) {
        this.cmbvende.setSelectedItem(cmbvende);
    }

    public void Registrar(){
        
         String user,passwd,passwdc;
    
        user = txtUserName.getText();
        passwd = txtpasswd.getText();
        passwdc = new String(txtpasswdconfirmation.getPassword());
        if(!passwd.equals(passwdc)){
            JOptionPane.showMessageDialog(this, "Contraseñas No Coinciden", "Contraseñas No Coinciden", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        if("<Seleccione>".equals(user)){
            JOptionPane.showMessageDialog(this, "Seleccione Un Empleado", "Seleccione", JOptionPane.ERROR_MESSAGE);
            return;
        } 
      
            
           String Privilegio = "";
     
         int index = cmbvende.getSelectedIndex()-1;
                   int ID = IDe [index];  
           
     try{
     resultado = Conexion.consulta("Select [Privilegio] from [dbo].[Usuario] where [ID_Empleado] = " +ID);
     
     while(resultado.next()){
        Privilegio = resultado.getString(1);         
     }
     
     }catch(SQLException ex){}
     
     if("".equals(Privilegio)){
         
         //SI NO EXISTE

//                JOptionPane.showMessageDialog(this, "Usuario Ya Está Registrado", "Usuario Ya Está Registrado", JOptionPane.ERROR_MESSAGE);
//                return;
//            }
            
        String privi = "Publico";
           
        if(ckAdmin.isSelected()){
         privi = "Administrador";
        }
        
       //    passwd =  StringMD.getStringMessageDigest(passwd, StringMD.MD5);
         
        
        String Nombre = (String) cmbvende.getSelectedItem();
        Nombre = txtUserName.getText().trim();
                
        Usuario.Agregar_Usuario(Nombre, ID, passwd, privi);
        MP.setVisible(true);
        dispose();
         
        }
     

            else{
         
         //SI YA EXISTE
              if(ckAdmin.isSelected()){
         
         int index1 = cmbvende.getSelectedIndex()-1;
      int ID1 = IDe [index1];  
           
     try{
     resultado = Conexion.consulta("Select [Privilegio] from [dbo].[Usuario] where [ID_Empleado] = " +ID1);
     
     while(resultado.next()){
        Privilegio = resultado.getString(1);         
     }
     
     }catch(SQLException ex){}
     
     if(!"Administrador".equals(Privilegio)){ 
         
       int f = JOptionPane.showConfirmDialog(this, "Desea Que El Usuario "+user+" Sea Administrador?", "Usuario Como Administrador", JOptionPane.YES_NO_OPTION);
   
     
       if(f==JOptionPane.YES_OPTION){
               
           Usuario.CambiarPrivilegio(ID, "Administrador");
        //  dispose();
            }     
                
       else{
           ckAdmin.setSelected(false);
         //  dispose();
       }
     }
     }         
              else{
        int index11 = cmbvende.getSelectedIndex()-1;
      int ID11 = IDe [index11];  
           
     try{
     resultado = Conexion.consulta("Select [Privilegio] from [dbo].[Usuario] where [ID_Empleado] = " +ID11);
     
     while(resultado.next()){
        Privilegio = resultado.getString(1);         
     }
     
     }catch(SQLException ex){}
     
     if( "Administrador".equals(Privilegio)){ 
      
                  
         int f = JOptionPane.showConfirmDialog(this, "Desea Que El Usuario "+user+" Se Elimine de Administradores?", "Eliminar Administrador", JOptionPane.YES_NO_OPTION);

       if(f==JOptionPane.YES_OPTION){
          
           String cc = "Publico";
           
           Usuario.CambiarPrivilegio(ID11, cc);
          //     dispose();
              }
     
   //dispose();
   
            }
            
        
              }
           
              
              String contraa = "";
              
         try{
             
           
              resultado = Conexion.consulta("Select [Contrasena] from [dbo].[Usuario] where [ID_Empleado] = "+ID);
    
              
              while(resultado.next()){
                  
                  contraa = resultado.getString(1);
              }
         }catch(SQLException ex){
             
         }
         
         String connn = txtpasswd.getText();
         if( contraa.equals(connn) ){
             
         }
         else{
             if(!"".equals(connn)){
             Usuario.Cambiar_Contraseña(ID, connn);
         }
         }
         }
      MP.setVisible(true);        
      dispose();         //  JOptionPane.showMessageDialog(this, "Usuario Eliminado Con Éxito", "Eliminado Con Éxito", JOptionPane.INFORMATION_MESSAGE);
        //    return;
            
    }
    
    public void Eliminar(){
        
           int index11 = cmbvende.getSelectedIndex()-1;
      int ID11 = IDe [index11];
         
      Usuario.Activar_Usuario(ID11);
        
      dispose();
    }
    private void btnokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnokActionPerformed
       Registrar();
    }//GEN-LAST:event_btnokActionPerformed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed
       MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancelActionPerformed

    ResultSet resultado;
    ResultSet resultado1;
    int [] IDe ;
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
  
      MP.setVisible(false);
      
        int Tamano = 0;
       try{
           
       
        resultado = Conexion.consulta("Select Max([ID_Empleado]) from [dbo].[Empleado]");
       
        while(resultado.next()){
         Tamano = resultado.getInt(1); 
     
        }
        
        }catch(SQLException ex){}   
       
        //   System.out.println("tamano "+Tamano);   
           
          String Nombre, Apellido;
       
          IDe = new int[Tamano];
        
        int k = 0;
        
        try{
            
        resultado1 = Conexion.consulta("Select [ID_Empleado] , [Nombres_Empleado], [Apellidos_Empleado] "
                + "from [dbo].[EmpleadoV] Where Estado_Empleado = 'Activo'");
        
      while(resultado1.next()) {
          
          
          IDe [k] = resultado1.getInt(1);
          k++;
          Nombre =resultado1.getString(2);
          Apellido = resultado1.getString(3);
          
         // System.out.println("nombre "+ Nombre);
          
          cmbvende.addItem(Nombre.trim()+" "+Apellido.trim());
      }
        
    }catch(SQLException ex){}     
   
      
  
  
          // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void btnok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnok1ActionPerformed
   String Privilegio = "";
     
         int index = cmbvende.getSelectedIndex()-1;
                   int ID = IDe [index];  
           
     try{
     resultado = Conexion.consulta("Select [Privilegio] from [dbo].[Usuario] where [ID_Empleado] = " +ID);
     
     while(resultado.next()){
        Privilegio = resultado.getString(1);         
     }
     
     }catch(SQLException ex){}
     
     if( "".equals(Privilegio)){
    
     }
     else{
        
        
        int f = JOptionPane.showConfirmDialog(this,"Está Seguro Que Desea Eliminar al Usuario "+cmbvende.getSelectedItem(),"Confirmación",JOptionPane.YES_NO_OPTION);

                if(f==JOptionPane.YES_OPTION){
                 Eliminar();  
                }
        
     }
             // TODO add your handling code here:
    }//GEN-LAST:event_btnok1ActionPerformed

    private void txtpasswdconfirmationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpasswdconfirmationKeyTyped
        char a = evt.getKeyChar();

        if(a==KeyEvent.VK_ENTER){

            Registrar();
        }// TODO add your handling code here:
    }//GEN-LAST:event_txtpasswdconfirmationKeyTyped

    private void txtpasswdconfirmationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpasswdconfirmationKeyReleased
        // TODO add your handling code here:
        txtpasswdclear.setText(txtpasswdconfirmation.getText());
    }//GEN-LAST:event_txtpasswdconfirmationKeyReleased

    private void ckAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAdminActionPerformed


// TODO add your handling code here:
    }//GEN-LAST:event_ckAdminActionPerformed

    private void cmbvendeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbvendeItemStateChanged

        String user;
    
        user = (String) cmbvende.getSelectedItem();
          
        if("<Seleccione>".equals(user)){
           txtUserName.setText("");
          txtpasswd.setText("");
          txtpasswdclear.setText("");
          txtpasswdconfirmation.setText("");
          ckAdmin.setEnabled(false);
          ckshow.setEnabled(false);
          ckAdmin.setSelected(false);
          ckshow.setSelected(false);
          return;
        } 
        
  
            
        
   
     String NombreUsuario = null;
    int i=0;
    String NombreCompleto = (String) cmbvende.getSelectedItem();
    
    StringTokenizer User= new StringTokenizer(NombreCompleto, " ");
                   while(User.hasMoreTokens()){
                     
                     if(i==2){
                      NombreUsuario = NombreUsuario.concat(""+User.nextToken());
                       // JOptionPane.showMessageDialog(null, "Token ="+NombreUsuario+"\n i= "+i);
                      break;
                     }  
                       if(i==1){
                           User.nextToken();
                           i=2;
                       }
                       
                        if(i==0){
                    NombreUsuario = User.nextToken();
                    i=1;
                //    JOptionPane.showMessageDialog(null, "Token ="+NombreUsuario+"\n i= "+i);
                            
                       }
                        
                   }
        int index = cmbvende.getSelectedIndex()-1;
                   int ID = IDe [index];
                   
     NombreUsuario = NombreUsuario.concat(String.valueOf(ID));
     NombreUsuario = NombreUsuario.trim(); 
   
     String Privilegio = "";
     
     try{
     resultado = Conexion.consulta("Select [Privilegio] from [dbo].[Usuario] where [ID_Empleado] = " +ID);
     
     while(resultado.next()){
        Privilegio = resultado.getString(1);         
     }
     
     }catch(SQLException ex){}
     
     if("Administrador".equals(Privilegio)){
         
         ckAdmin.setSelected(true);
     }
     else{
          ckAdmin.setSelected(false);
     }
     
     if("".equals(Privilegio)){
        
          txtpasswd.setEnabled(true);
          txtpasswdclear.setEnabled(true);
          txtpasswdconfirmation.setEnabled(true);
          ckAdmin.setSelected(false);
          
          btnok.setEnabled(true);
          
     }
     
     if(ID == MenuPrincipal.ID_Usuario){
         
         txtpasswd.setEnabled(true);
          txtpasswdclear.setEnabled(true);
          txtpasswdconfirmation.setEnabled(true);
      //    ckAdmin.setSelected(false);
          
          btnok.setEnabled(true);
          
          String contra = null;
          String NombreU = null;
          
          try{
          resultado = Conexion.consulta("Select [Nombre_Usuario] , [Contrasena] from [dbo].[Usuario]"
                  + " where [ID_Empleado] = "+MenuPrincipal.ID_Usuario);
          while(resultado.next()){
              
              NombreU = resultado.getString(1);
              contra = resultado.getString(2);
          }
          
     }catch(SQLException ex){}
          txtUserName.setText(NombreU);
           txtpasswd.setText(contra);
          
     }else{
          txtpasswd.setText("");
          txtpasswdclear.setText("");
          txtpasswdconfirmation.setText("");
     }
       
     
       txtUserName.setText(NombreUsuario);
     
        txtpasswd.setEnabled(true);
        txtpasswdconfirmation.setEnabled(true);
            
  // TODO add your handling code here:
    }//GEN-LAST:event_cmbvendeItemStateChanged

    private void txtpasswdclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpasswdclearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpasswdclearActionPerformed

    private void txtpasswdclearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpasswdclearKeyReleased
txtpasswdconfirmation.setText(txtpasswdclear.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_txtpasswdclearKeyReleased

    private void ckshowStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ckshowStateChanged
        // TODO add your handling code here:
        if(txtpasswdconfirmation.isEnabled()){

            if(ckshow.isSelected()){
                txtpasswdclear.setVisible(true);
                txtpasswdconfirmation.setVisible(false);
                validate();
            }else{
                txtpasswdclear.setVisible(false);
                txtpasswdconfirmation.setVisible(true);
                validate();
            }
        }
    }//GEN-LAST:event_ckshowStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsuarioP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsuarioP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsuarioP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsuarioP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new UsuarioP().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btnok;
    private javax.swing.JButton btnok1;
    private javax.swing.JCheckBox ckAdmin;
    private javax.swing.JCheckBox ckshow;
    private javax.swing.JComboBox cmbvende;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLblFoto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JPasswordField txtpasswd;
    private javax.swing.JTextField txtpasswdclear;
    private javax.swing.JPasswordField txtpasswdconfirmation;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Ventanas;

import Clases.CustomTextField;
import Clases.Secuencial;
import Procedimientos.Conexion;
import Procedimientos.Producto;
import com.keffect.effects.animatedEffects.EntryBoucing;
import com.keffect.effects.animatedEffects.Shape;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.StringTokenizer;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Reymundo Tenorio
 */
public class ProductoP extends javax.swing.JFrame {

    /**
     * Creates new form ProductoP
     */
    
 
    
    public ProductoP() {
        
        try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         
        
        initComponents();
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
       
        /*COPIAR PEGAR DESACTIVAR*/
        
//         JTextComponent.KeyBinding[] newBindings = {
////        new JTextComponent.KeyBinding(
////          KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
////          DefaultEditorKit.beepAction),
//        new JTextComponent.KeyBinding(
//          KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
//          DefaultEditorKit.beepAction),
////        new JTextComponent.KeyBinding(
////            KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
////            DefaultEditorKit.beepAction)
////      
//         };
//            
//    Keymap k = txtNombre.getKeymap();
//    JTextComponent.loadKeymap(k, newBindings, txtNombre.getActions());
//    
    
        txtMargen.setTransferHandler(null);
        txtstockmin.setTransferHandler(null);
        txtCaja.setTransferHandler(null);
       
        txtCaja.setVisible(false); 
        lblcaja.setVisible(false);
        
        cmbLaboratorio.setVisible(false);
        lblLab.setVisible(false);
        btnBuscarLaboratorio.setVisible(false);
        
//        MultipleEffect effects = new MultipleEffect();
//				effects.addEffect(new ShadowFrame(20));
//				effects.addEffect(new Shadow(1000));
//				effects.addEffect(new SplitHorizontalFade(1000));
//				effects.addEffect(new SplitVerticalFade(2000));
//				effects.addEffect(new DarkenReverse(6000,50));
//                                
           // PanelEffect.setEffect(effects);                    
   
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        PopupMenu = new javax.swing.JPopupMenu();
        MnItemModificar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MnItemActDes = new javax.swing.JMenuItem();
        buttonGroup2 = new javax.swing.ButtonGroup();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelNuevo = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnnew = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtstockmin = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblContenido = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtContenido = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbProveedor = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        lblcaja = new javax.swing.JLabel();
        txtCaja = new javax.swing.JTextField();
        btnBuscarProveedor = new javax.swing.JButton();
        cmbCategoria = new javax.swing.JComboBox();
        btnBuscarCategoria = new javax.swing.JButton();
        txtcodigo = new javax.swing.JTextField();
        txtMargen = new javax.swing.JTextField();
        lblLab = new javax.swing.JLabel();
        cmbLaboratorio = new javax.swing.JComboBox();
        btnBuscarLaboratorio = new javax.swing.JButton();
        cmbTiposMedicamentos = new javax.swing.JComboBox();
        ckPrescripcion = new javax.swing.JCheckBox();
        ckIVA = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        cmbPresentaci√≥n = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        btnFoto = new javax.swing.JButton();
        jLblFoto = new javax.swing.JLabel();
        lblalerta = new javax.swing.JLabel();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        txtBusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnActivar = new javax.swing.JButton();
        btnDesactivar = new javax.swing.JButton();
        btnmodify = new javax.swing.JButton();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLblFoto1 = new javax.swing.JLabel();

        MnItemModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ModificarIcon.png"))); // NOI18N
        MnItemModificar.setMnemonic('m');
        MnItemModificar.setText("Modificar");
        MnItemModificar.setToolTipText("Modificar Registro");
        MnItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemModificarActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemModificar);
        PopupMenu.add(jSeparator1);

        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
        MnItemActDes.setMnemonic('a');
        MnItemActDes.setText("Activar");
        MnItemActDes.setToolTipText("Activar");
        MnItemActDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnItemActDesActionPerformed(evt);
            }
        });
        PopupMenu.add(MnItemActDes);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Producto");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });

        //KEffectPanel effectPanel = new KEffectPanel();
        //PanelNuevo = effectPanel;
        PanelNuevo = PanelEffect;
        PanelNuevo.setBackground(new java.awt.Color(0, 153, 204));
        PanelNuevo.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        btnnew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnnew.setForeground(new java.awt.Color(255, 255, 255));
        btnnew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Nuevo.png"))); // NOI18N
        btnnew.setMnemonic('n');
        btnnew.setText("Nuevo");
        btnnew.setToolTipText("Ingresar Nuevo Registro");
        btnnew.setContentAreaFilled(false);
        btnnew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnnew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewActionPerformed(evt);
            }
        });
        jPanel1.add(btnnew);

        btnsave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnsave.setForeground(new java.awt.Color(255, 255, 255));
        btnsave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Guardar.png"))); // NOI18N
        btnsave.setMnemonic('g');
        btnsave.setText("Guardar");
        btnsave.setToolTipText("Guardar Registro");
        btnsave.setContentAreaFilled(false);
        btnsave.setEnabled(false);
        btnsave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnsave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnsave);

        btncancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel.setForeground(new java.awt.Color(255, 255, 255));
        btncancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel.setMnemonic('c');
        btncancel.setText("Cancelar");
        btncancel.setToolTipText("Cancelar / Salir");
        btncancel.setContentAreaFilled(false);
        btncancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });
        jPanel1.add(btncancel);

        PanelNuevo.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBackground(new java.awt.Color(0, 153, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informaci√≥n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N

        jPanel3.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nombre");

        /*CustomTextField customTextField = new CustomTextField(100);
        txtNombre = customTextField;
        customTextField.setPlaceholder("Ingrese Nombres del Ejecutivo");
        customTextField.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField.setForeground(Color.BLACK);
        customTextField.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtNombre.setToolTipText("Ingrese Nombres");
        txtNombre.setEnabled(false);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("C√≥digo");

        /*CustomTextField customTextField1 = new CustomTextField(100);
        txtstockmin = customTextField1;
        customTextField1.setPlaceholder("Ingrese Apellidos del Ejecutivo");
        customTextField1.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField1.setForeground(Color.BLACK);
        customTextField1.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtstockmin.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtstockmin.setToolTipText("Ingrese Apellidos");
        txtstockmin.setEnabled(false);
        txtstockmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtstockminKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtstockminKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Stock M√≠nimo");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Porcentaje de Margen de Ganancia");

        lblContenido.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblContenido.setForeground(new java.awt.Color(255, 255, 255));
        lblContenido.setText("Contenido por");

        /*CustomTextFieldArea customTextField2 = new CustomTextFieldArea();
        txtContenido = customTextField2;
        customTextField2.setPlaceholder("Ingrese Direcci√≥n del Ejecutivo");
        customTextField2.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField2.setForeground(Color.BLACK);
        customTextField2.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtContenido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtContenido.setToolTipText("Ingrese Direcci√≥n");
        txtContenido.setEnabled(false);
        txtContenido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContenidoKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtContenido);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Categor√≠a");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Proveedor");

        cmbProveedor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbProveedor.setToolTipText("Seleccione Proveedor");
        cmbProveedor.setEnabled(false);
        cmbProveedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProveedorItemStateChanged(evt);
            }
        });
        cmbProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbProveedorKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Tipo Medicamento");

        lblcaja.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblcaja.setForeground(new java.awt.Color(255, 255, 255));
        lblcaja.setText("Unidades por Presentaci√≥n");

        /*CustomTextField customTextField3 = new CustomTextField(100);
        txtcorreo = customTextField3;
        customTextField3.setPlaceholder("Ingrese Correo del Ejecutivo");
        customTextField3.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField3.setForeground(Color.BLACK);
        customTextField3.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtCaja.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCaja.setToolTipText("Ingrese Correo Electr√≥nico");
        txtCaja.setEnabled(false);
        txtCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCajaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCajaKeyTyped(evt);
            }
        });

        btnBuscarProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnBuscarProveedor.setEnabled(false);
        btnBuscarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProveedorActionPerformed(evt);
            }
        });

        cmbCategoria.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbCategoria.setToolTipText("Seleccione Proveedor");
        cmbCategoria.setEnabled(false);
        cmbCategoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbCategoriaKeyTyped(evt);
            }
        });

        btnBuscarCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnBuscarCategoria.setEnabled(false);
        btnBuscarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCategoriaActionPerformed(evt);
            }
        });

        /*CustomTextField customTextField1 = new CustomTextField(100);
        txtstockmin = customTextField1;
        customTextField1.setPlaceholder("Ingrese Apellidos del Ejecutivo");
        customTextField1.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField1.setForeground(Color.BLACK);
        customTextField1.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtcodigo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtcodigo.setToolTipText("Ingrese Apellidos");
        txtcodigo.setEnabled(false);
        txtcodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcodigoKeyTyped(evt);
            }
        });

        /*CustomTextField customTextField1 = new CustomTextField(100);
        txtstockmin = customTextField1;
        customTextField1.setPlaceholder("Ingrese Apellidos del Ejecutivo");
        customTextField1.setFont(new java.awt.Font("Tahoma", 0, 18));
        customTextField1.setForeground(Color.BLACK);
        customTextField1.setPlaceholderForeground(Color.LIGHT_GRAY);*/
        txtMargen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtMargen.setToolTipText("Ingrese Apellidos");
        txtMargen.setEnabled(false);
        txtMargen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMargenKeyTyped(evt);
            }
        });

        lblLab.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblLab.setForeground(new java.awt.Color(255, 255, 255));
        lblLab.setText("Laboratorio");

        cmbLaboratorio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbLaboratorio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbLaboratorio.setToolTipText("Seleccione Proveedor");
        cmbLaboratorio.setEnabled(false);
        cmbLaboratorio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbLaboratorioKeyTyped(evt);
            }
        });

        btnBuscarLaboratorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnBuscarLaboratorio.setEnabled(false);
        btnBuscarLaboratorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarLaboratorioActionPerformed(evt);
            }
        });

        cmbTiposMedicamentos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbTiposMedicamentos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbTiposMedicamentos.setToolTipText("Seleccione Presentaci√≥n");
        cmbTiposMedicamentos.setEnabled(false);
        cmbTiposMedicamentos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTiposMedicamentosItemStateChanged(evt);
            }
        });
        cmbTiposMedicamentos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbTiposMedicamentosKeyTyped(evt);
            }
        });

        ckPrescripcion.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        ckPrescripcion.setForeground(new java.awt.Color(255, 255, 255));
        ckPrescripcion.setText("Necesita Prescripci√≥n M√©dica");
        ckPrescripcion.setToolTipText("Necesita Prescripci√≥n M√©dica");
        ckPrescripcion.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ckPrescripcion.setContentAreaFilled(false);
        ckPrescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ckPrescripcionKeyTyped(evt);
            }
        });

        ckIVA.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        ckIVA.setForeground(new java.awt.Color(255, 255, 255));
        ckIVA.setSelected(true);
        ckIVA.setText("Excento de I.V.A.");
        ckIVA.setToolTipText("Producto Excento de I.V.A.");
        ckIVA.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ckIVA.setContentAreaFilled(false);
        ckIVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ckIVAKeyTyped(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Presentaci√≥n");

        cmbPresentaci√≥n.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbPresentaci√≥n.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<Seleccione>" }));
        cmbPresentaci√≥n.setToolTipText("Seleccione Presentaci√≥n");
        cmbPresentaci√≥n.setEnabled(false);
        cmbPresentaci√≥n.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPresentaci√≥nItemStateChanged(evt);
            }
        });
        cmbPresentaci√≥n.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cmbPresentaci√≥nKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnBuscarProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnBuscarCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblLab, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cmbLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnBuscarLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ckPrescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ckIVA, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 0, 0)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(lblcaja, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(txtCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cmbPresentaci√≥n, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbTiposMedicamentos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(txtstockmin, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(txtMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblLab, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarLaboratorio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtstockmin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTiposMedicamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPresentaci√≥n, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblcaja, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblContenido, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ckIVA, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckPrescripcion))
                    .addComponent(jScrollPane2)))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel9.setOpaque(false);

        btnFoto.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnFoto.setForeground(new java.awt.Color(255, 255, 255));
        btnFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Foto.png"))); // NOI18N
        btnFoto.setMnemonic('a');
        btnFoto.setText("Agregar Fotograf√≠a");
        btnFoto.setToolTipText("Seleccionar Fotograf√≠a");
        btnFoto.setContentAreaFilled(false);
        btnFoto.setEnabled(false);
        btnFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFoto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFotoActionPerformed(evt);
            }
        });

        jLblFoto.setForeground(new java.awt.Color(235, 235, 150));
        jLblFoto.setEnabled(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFoto)
                .addContainerGap())
        );

        lblalerta.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblalerta.setForeground(new java.awt.Color(255, 255, 0));
        lblalerta.setText("Alertas");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 61, Short.MAX_VALUE)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblalerta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblalerta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        PanelNuevo.add(jPanel6, java.awt.BorderLayout.CENTER);

        TabbedPane.addTab("Nuevo", PanelNuevo);

        PanelVer = PanelEffect2;
        PanelVer.setBackground(new java.awt.Color(0, 153, 204));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Nombre", "C√≥digo", "Categor√≠a", "Composici√≥n", "Prescripci√≥n", "Tipo Medicamento", "Presentaci√≥n", "Proveedor", "Laboratorio", "Estado" }));
        cmbbusc.setToolTipText("Buscar Por:");

        txtBusc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtBusc.setToolTipText("Buscar");
        CustomTextField customTextField9 = new CustomTextField(100);
        txtBusc = customTextField9;
        customTextField9.setPlaceholder("Ingrese Informaci√≥n a Buscar");
        customTextField9.setFont(new java.awt.Font("Tahoma", 0, 16));
        customTextField9.setForeground(Color.BLACK);
        customTextField9.setPlaceholderForeground(Color.LIGHT_GRAY);
        txtBusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscKeyReleased(evt);
            }
        });
        /*txtBusc = new AutoComplete.AutoCompletar();
        ((AutoCompletar)txtBusc).setDesplegable(new DesplegableJPopUPMenu(txtBusc));
        ModeloAutoCompletar modelo1 = new ModeloVendNames();
        ((AutoCompletar)txtBusc).setModelo(modelo1);
        ((AutoCompletar)txtBusc).getDesplegable().setForeground(new Color(102,153,255));
        ((AutoCompletar)txtBusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });
        ((AutoCompletar)txtBusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBusc, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Tabla.setToolTipText("Lista Registros");
        Tabla.setComponentPopupMenu(PopupMenu);
        Tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnActivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnActivar.setForeground(new java.awt.Color(255, 255, 255));
        btnActivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarR.png"))); // NOI18N
        btnActivar.setMnemonic('A');
        btnActivar.setText("Activar");
        btnActivar.setToolTipText("Activar");
        btnActivar.setContentAreaFilled(false);
        btnActivar.setEnabled(false);
        btnActivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnActivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnActivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnActivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnActivarFocusLost(evt);
            }
        });
        btnActivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnActivar);

        btnDesactivar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDesactivar.setForeground(new java.awt.Color(255, 255, 255));
        btnDesactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/DesctivarR.png"))); // NOI18N
        btnDesactivar.setMnemonic('D');
        btnDesactivar.setText("Desactivar");
        btnDesactivar.setToolTipText("Desactivar");
        btnDesactivar.setContentAreaFilled(false);
        btnDesactivar.setEnabled(false);
        btnDesactivar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDesactivar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDesactivar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnDesactivarFocusLost(evt);
            }
        });
        btnDesactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesactivarActionPerformed(evt);
            }
        });
        jPanel5.add(btnDesactivar);

        btnmodify.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnmodify.setForeground(new java.awt.Color(255, 255, 255));
        btnmodify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Modificar.png"))); // NOI18N
        btnmodify.setMnemonic('o');
        btnmodify.setText("Modificar");
        btnmodify.setToolTipText("Modificar Registro");
        btnmodify.setContentAreaFilled(false);
        btnmodify.setEnabled(false);
        btnmodify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnmodify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnmodify.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnmodifyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnmodifyFocusLost(evt);
            }
        });
        btnmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifyActionPerformed(evt);
            }
        });
        jPanel5.add(btnmodify);

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TablaTodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Registros");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel11.setOpaque(false);

        jLblFoto1.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.EAST);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1219, 748));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private int ID_Producto;
    private boolean Modify;
    private String File = "";
    private MenuPrincipal MP;
    private String Foto;
    
     
  
   
    
    public void Foto (String Foto) {
        this.Foto = Foto;
    }
      
   
    
    public void setFoto(){
        
           File = this.Foto;
           jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
            jLblFoto.setSize(256,256);
    }
    
    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }
    
    
    public static ResultSet resultado;

    public void SetProveedor(String Proveedor)
    {
        cmbProveedor.setSelectedItem(Proveedor);
    }
    
    public void SetLaboratorio(String Laboratorio)
    {
        cmbLaboratorio.setSelectedItem(Laboratorio);
    }
    
    public void SetCategoria(String Categoria)
    {
        cmbCategoria.setSelectedItem(Categoria);
    }
    
    private int [] Proveedores;
    private int [] Categorias;
    private int [] Laboratorios;
    
    int XUnid = 0;
    
    public void Guardar (){
        
        
        String Nombre, Codigo, StockMin, Margen, Presentacion, Tipo_Medicamento,
                UnidsCaja, Contenido, Prescripcion, ExcludIVA, FotoP;
        
        int SelectCombo = cmbProveedor.getSelectedIndex();
        int SelectCombo1 = cmbCategoria.getSelectedIndex();
        int SelectCombo2 = cmbLaboratorio.getSelectedIndex();
        
        Nombre = txtNombre.getText().trim();
        Codigo = txtcodigo.getText().trim();
        StockMin = txtstockmin.getText().trim();
        Margen = txtMargen.getText().trim();
        UnidsCaja = txtCaja.getText().trim();
        Contenido = txtContenido.getText().trim();
        FotoP = File;
        Tipo_Medicamento = (String) cmbTiposMedicamentos.getSelectedItem();
        Presentacion = (String) cmbPresentaci√≥n.getSelectedItem();
        
        
        if(ckIVA.isSelected()){
            ExcludIVA = "Si";
        }
        else{
            ExcludIVA = "No";
        }
        
        if(XUnid == 0){
//            Presentacion = "Unidad";
            UnidsCaja = "1";
        }
        else{
//            Presentacion = "Caja";   
            
            if("".equals(UnidsCaja)){
               JOptionPane.showMessageDialog(this,"Ingrese La Unidades por Presentaci√≥n","Ingrese",JOptionPane.ERROR_MESSAGE);
               return;  
            }
        }
        
        if(ckPrescripcion.isSelected()){
            
            Prescripcion = "Si";
        }
        else{
            Prescripcion = "No";
        }

          if("".equals(Contenido))  {
            Contenido= "No Ingresada";
           }
          
          if("".equals(Nombre))  {
            JOptionPane.showMessageDialog(this,"Ingrese El Nombre","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
        
        if("".equals(Codigo))  {
            JOptionPane.showMessageDialog(this,"Ingrese El C√≥digo","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
        
        if("".equals(StockMin))  {
            JOptionPane.showMessageDialog(this,"Ingrese El Stock M√≠nimo","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
        
        if("".equals(Margen))  {
            JOptionPane.showMessageDialog(this,"Ingrese El Margen de Ganancia","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
         if("<Seleccione>".equals(Tipo_Medicamento))  {
            JOptionPane.showMessageDialog(this,"Seleccione El Tipo de Medicamento del Producto","Seleccione",JOptionPane.ERROR_MESSAGE);
            return;
           }
         if("<Seleccione>".equals(Presentacion))  {
            JOptionPane.showMessageDialog(this,"Seleccione La Presentaci√≥n del Producto","Seleccione",JOptionPane.ERROR_MESSAGE);
            return;
           }
  
        if(XUnid!=0){
            if("".equals(UnidsCaja))  {
            JOptionPane.showMessageDialog(this,"Ingrese Las Unidades por Presentaci√≥n","Ingrese",JOptionPane.ERROR_MESSAGE);
            return;
           }
        }
  
  

            int IDC = 0;  
 
    try{
    
    resultado = Conexion.consulta("Select [ID_Producto] from [dbo].[Producto] where [ID_Producto] != "+ID_Producto+" and "
            + "[Codigo_Producto] = '"+Codigo+"'");
    
    while(resultado.next()){
        IDC = resultado.getInt(1);
    }
    }catch(SQLException ex){

    }     

if(IDC != 0){
    JOptionPane.showMessageDialog(this, "C√≥digo "+Codigo+" del producto ya Existe en el Registro", "C√≥digo ya Registrado", JOptionPane.ERROR_MESSAGE);
    return;
}
     
         int IDC1 = 0;  
 
    try{
    
    resultado = Conexion.consulta("Select [ID_Producto] from [dbo].[Producto] where [ID_Producto] != "+ID_Producto+" and "
            + "[Nombre_Producto] = '"+Nombre+"'");
    
    while(resultado.next()){
        IDC1 = resultado.getInt(1);
    }
    }catch(SQLException ex){

    }     

if(IDC1 != 0){
    JOptionPane.showMessageDialog(this, "Nombre "+Nombre+" del producto ya Existe en el Registro", "Nombre ya Registrado", JOptionPane.ERROR_MESSAGE);
    return;
}

        
       if(SelectCombo==0){

            JOptionPane.showMessageDialog(this,"Seleccione El Proveedor","Seleccione",JOptionPane.ERROR_MESSAGE);
            return;
        }
       
       if(SelectCombo1==0){

            JOptionPane.showMessageDialog(this,"Seleccione La Categor√≠a","Seleccione",JOptionPane.ERROR_MESSAGE);
            return;
        }
       
       if(cmbLaboratorio.isEnabled())

        if(SelectCombo2==0){

            JOptionPane.showMessageDialog(this,"Seleccione El Laboratorio","Seleccione",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
       
         
//        if("".equals(Foto) && Modify == false)  {
//            JOptionPane.showMessageDialog(this,"Seleccione La Fotograf√≠a","Seleccione",JOptionPane.ERROR_MESSAGE);
//            return;
//           }
       
       if("".equals(FotoP)){
           File F = new File("");                  
           FotoP = F.getAbsolutePath()+"\\Farmacia\\Default\\Producto.jpg";
       }
     
  int ID_Proveedor = Proveedores[SelectCombo];
  int ID_Categoria = Categorias[SelectCombo1];
  int ID_Laboratorio;
  
   if(cmbLaboratorio.isEnabled()){
     ID_Laboratorio = Laboratorios[SelectCombo2];
   }
   else{
     ID_Laboratorio = ID_Proveedor;  
   }
  
  
  int Stock_Minimo = Integer.parseInt(StockMin);
  int UnidadesXCaja = Integer.parseInt(UnidsCaja);
  double Margen_Ganancia = Double.parseDouble(Margen);

            if(Modify==true){

                int ID = ID_Producto;
           
                Producto.Actualizar_Producto(ID, Nombre, Codigo, ID_Categoria, ID_Proveedor,
                        Contenido, Prescripcion, Stock_Minimo, Tipo_Medicamento, Margen_Ganancia,
                        Presentacion, UnidadesXCaja, FotoP, ID_Laboratorio, ExcludIVA);
//                
//                if(!"".equals(FotoP)){
//                Producto.Agregar_Imagen(ID, FotoP);
//                }
//                
                ActualizarTabla();
                CleanAll();
                DisableAll();
                Modify = false;
                
            }
            else{
                   
              
               
                Producto.Agregar_Producto(Nombre, Codigo, ID_Categoria, ID_Proveedor,
                        Contenido, Prescripcion, Stock_Minimo, Tipo_Medicamento, Margen_Ganancia,
                        Presentacion, UnidadesXCaja, FotoP, ID_Laboratorio, ExcludIVA);
                ActualizarTabla();
                CleanAll();
                DisableAll();

            }
    }
    
    public void CleanAll(){
        
        File = "";
        txtstockmin.setText("");
        txtNombre.setText("");
        txtContenido.setText("");
        txtMargen.setText("");
        txtCaja.setText("");
        txtcodigo.setText("");
        cmbCategoria.setSelectedIndex(0);
        cmbProveedor.setSelectedIndex(0);
        cmbPresentaci√≥n.setSelectedIndex(0);
        cmbTiposMedicamentos.setSelectedIndex(0);
        ID_Producto = 0;
        jLblFoto.setIcon(null);
        ckPrescripcion.setSelected(false);
        ckIVA.setSelected(true);
        Modify = false;
        
    }
    
    public void EnableAll(){
        txtstockmin.setEnabled(true);
        txtNombre.setEnabled(true);
        txtContenido.setEnabled(true);
        txtMargen.setEnabled(true);
//        txtCaja.setEnabled(true);
        txtcodigo.setEnabled(true);
        cmbCategoria.setEnabled(true);
        cmbProveedor.setEnabled(true);
        cmbLaboratorio.setEnabled(true);
        cmbPresentaci√≥n.setEnabled(true);
        cmbTiposMedicamentos.setEnabled(true);
        ckPrescripcion.setEnabled(true);
        ckIVA.setEnabled(true);
        jLblFoto.setEnabled(true);
        btnFoto.setEnabled(true);
        btnsave.setEnabled(true); 
        btnBuscarProveedor.setEnabled(true); 
        btnBuscarCategoria.setEnabled(true); 
    }
    
      public void DisableAll(){
        txtstockmin.setEnabled(false);
        txtNombre.setEnabled(false);
        txtContenido.setEnabled(false);
        txtMargen.setEnabled(false);
        txtCaja.setEnabled(false);
        txtcodigo.setEnabled(false);
        cmbCategoria.setEnabled(false);
        cmbProveedor.setEnabled(false);
        cmbLaboratorio.setEnabled(false);
        cmbPresentaci√≥n.setEnabled(false);
        cmbTiposMedicamentos.setEnabled(false);
        ckPrescripcion.setEnabled(false);
        ckIVA.setEnabled(false);
        jLblFoto.setEnabled(false);
        btnFoto.setEnabled(false);
        btnsave.setEnabled(false); 
        btnBuscarProveedor.setEnabled(false); 
        btnBuscarCategoria.setEnabled(false); 
        
    }
    
    
      
    public void AddPic(){
        
          JFileChooser dlg = new JFileChooser();
          FileNameExtensionFilter filtroImagen=new FileNameExtensionFilter("JPG, PNG, GIF, BMP, & TIFF","jpg","png","gif","bmp", "tif");
         
          dlg.setFileFilter(filtroImagen);
        
        int option = dlg.showOpenDialog(this);

        if(option==JFileChooser.APPROVE_OPTION) {
            //Obtiene La Ruta del Archivo Seleccionado
            File = dlg.getSelectedFile().getPath();
        
            jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
            jLblFoto.setSize(256,256);
        }
    }
    
    
   
    
   public void ActualizarTabla(){
        
       Titulo();
        
       model.setRowCount(0);
       Tabla.setModel(model);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from [dbo].[ProductoV]");

        
       
     
       while (resultado.next())
       {     
              Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);
              
              model.addRow(Datos);  
   
    }
       
       Tabla.setModel(model);
    
   
//        Tabla.getColumnModel().getColumn( 10 ).setCellEditor( new Celda_CheckBox() );
//        //para pintar la columna con el CheckBox en la tabla, en este caso, la primera columna
//        Tabla.getColumnModel().getColumn( 10 ).setCellRenderer(new Render_CheckBox());      

        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
          
    }
   
   public void Buscar(){
       
       Titulo();
       
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [ID_Producto] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

            case 2:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Nombre_Producto] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;
       
            case 3:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Codigo_Producto] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

    
            case 4:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Nombre_Categoria] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

        
            case 5:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Contenido] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

            
            case 6:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Controlado] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

                case 7:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Tipo_Medicamento] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

                
            case 8:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Presentacion] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

                    
            case 9:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Nombre_Proveedor] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

                        
            case 10:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Laboratorio] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

                            
            case 11:

            try{
                model.setRowCount(0);
                String Buscar = txtBusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ProductoV] where [Estado_Producto] like '%"+Buscar+"%'");

                while (resultado.next())
                {
            
                     
             Object [] Datos = new Object [20]; 

              Datos [0]= false;
              Datos [1]= String.valueOf(resultado.getInt(1));    
              Datos [2]= resultado.getString(2);
              Datos [3]= resultado.getString(3);
              Datos [4]= resultado.getString(4);
              Datos [5]= resultado.getString(5);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= String.valueOf(resultado.getInt(9));
              Datos [10]= String.valueOf(resultado.getDouble(10));
              Datos [11]= String.valueOf(resultado.getInt(11));
              Datos [12]= String.valueOf(resultado.getDouble(12));
              Datos [13]= resultado.getString(13);
              Datos [14]= String.valueOf(resultado.getInt(14));
              Datos [15]= resultado.getString(15);
              Datos [16]= resultado.getString(16);
              java.util.Date FechaI = resultado.getDate(17);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [17]= Fecha;
              String Empleado = resultado.getString(18).trim()+" "+resultado.getString(19).trim();
              Datos [18]= Empleado;
              Datos [19]= resultado.getString(20);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            break;

            default:

            break;

          
        
        }
        
        Tabla.setModel(model);
        
                
   }

   
    
   
    private void txtBuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscKeyReleased
       Buscar();
// TODO add your handling code here:
    }//GEN-LAST:event_txtBuscKeyReleased

    
    
    public void VerFoto(){
       
   int fila = Tabla.getSelectedRow();
      
   if (fila > -1){
     
          int ID = 0;
          
         ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
         
         String Fotografia;
                 
         try {
                 
          
   resultado = Conexion.consulta("Select Fotografia_Producto from Producto where ID_Producto = "+ID);
          
     if (resultado.next()){
            Fotografia = resultado.getString(1);
                            
            File = Fotografia;
            jLblFoto1.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(289,292,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto1.setIcon(newIcon);
            
           
     }                          
     
                              
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "El Producto No Posee Fotograf√≠a","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      
        }
    }
   
     public void ActivarBotones(){
       

   
      boolean Checkbox = false;
      
      for(int j=0; j<Tabla.getRowCount(); j++){
        
          Checkbox = (boolean) Tabla.getValueAt(j, 0);
          
          if(Checkbox == true){      
            
             btnActivar.setEnabled(true);
             btnDesactivar.setEnabled(true);
             
              break;
          }
       }
      
      
       
      int Fila = Tabla.getSelectedRow();
        
      if(Checkbox == false){
      
           btnActivar.setEnabled(false);
           btnDesactivar.setEnabled(false);

        if (Fila > -1){

            btnmodify.setEnabled(true);
            MnItemActDes.setEnabled(true);
            MnItemModificar.setEnabled(true);

            String Estado = ((String)this.Tabla.getModel().getValueAt(Fila, 19));
     

            if("Activo".equalsIgnoreCase(Estado)){
        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/DesactivarIcon.png"))); // NOI18N
        MnItemActDes.setText("Desactivar");
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
        MnItemActDes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ActivarIcon.png"))); // NOI18N
        MnItemActDes.setText("Activar");
            }
   
        }
        else{
            btnmodify.setEnabled(false);
            MnItemActDes.setEnabled(false);
            MnItemModificar.setEnabled(false);
    
        }  
      }

      
        if (Fila > -1){
              btnmodify.setEnabled(true);
              MnItemActDes.setEnabled(true);
              MnItemModificar.setEnabled(true);
        }
        else{
              btnmodify.setEnabled(false);
              MnItemActDes.setEnabled(false);
              MnItemModificar.setEnabled(false);
        }
    }
   
    
    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
      

   VerFoto();
   ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost
        
   ActivarBotones();
   // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private void btnActivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActivarActionPerformed

       ActivarBotones();
       Activar();
       ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarActionPerformed

   public void Activar(){
       
       
       int ID, Opcion;
       boolean Flag;
      
             
             Opcion= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar Producto(s) ?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            
            if(Opcion==JOptionPane.YES_OPTION){

                 
        for(int i=0; i<Tabla.getRowCount();i++){
            
            
            Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);
      
         if(Flag == true){
               ID= Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());
      
               Producto.Activar_Producto(ID);
         }
               
            }
         JOptionPane.showMessageDialog(this, "Producto(s) Activado(s) Con √âxito", "Activado(s) Con √âxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }
 
   
     public void Desactivar(){
       
       
       int ID, Opcion;
       boolean Flag;
      
             
             Opcion= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar Producto(s) ?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            
            if(Opcion==JOptionPane.YES_OPTION){

                 
        for(int i=0; i<Tabla.getRowCount();i++){
            
            
            Flag = (boolean) this.Tabla.getModel().getValueAt(i, 0);
      
         if(Flag == true){
               ID= Integer.parseInt(this.Tabla.getModel().getValueAt(i, 1).toString());
      
               Producto.Desactivar_Producto(ID);
         }
               
            }
         JOptionPane.showMessageDialog(this, "Producto(s) Desactivado(s) Con √âxito", "Activado(s) Con √âxito", JOptionPane.INFORMATION_MESSAGE);

        }

    }

   
    private void btnActivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusGained
       
        
        ActivarBotones();
 
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusGained

    public void Modificar(){
        int fila = Tabla.getSelectedRow();

        int ID;
       String Nombre, Codigo, StockMin, TipoMedicamento, Margen, Presentacion, 
               Exclud_IVA, UnidsCaja, Contenido, Prescripcion, Proveedor, 
               Categoria, Laboratorio;
    
        
        if (fila > -1){

            ID= Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Nombre=((String)this.Tabla.getModel().getValueAt(fila, 2));
            Codigo=((String)this.Tabla.getModel().getValueAt(fila, 3));
            Categoria=((String)this.Tabla.getModel().getValueAt(fila, 4));
            Contenido=((String)this.Tabla.getModel().getValueAt(fila, 5));
            Prescripcion=((String)this.Tabla.getModel().getValueAt(fila, 6));
            TipoMedicamento=((String)this.Tabla.getModel().getValueAt(fila, 7));
            Presentacion=((String)this.Tabla.getModel().getValueAt(fila, 8));
            UnidsCaja=((String)this.Tabla.getModel().getValueAt(fila, 9));
            Margen=((String)this.Tabla.getModel().getValueAt(fila, 10));
            Exclud_IVA=((String)this.Tabla.getModel().getValueAt(fila, 13));
            StockMin=((String)this.Tabla.getModel().getValueAt(fila, 14));
            Proveedor=((String)this.Tabla.getModel().getValueAt(fila, 15));
            Laboratorio=((String)this.Tabla.getModel().getValueAt(fila, 16));
           

            CleanAll();
            EnableAll();

        
        
        ID_Producto = ID;
        txtNombre.setText(Nombre);
        txtcodigo.setText(Codigo);
        txtMargen.setText(Margen);
        txtstockmin.setText(StockMin);
        txtContenido.setText(Contenido);
        cmbProveedor.setSelectedItem(Proveedor);
        cmbCategoria.setSelectedItem(Categoria);
        cmbLaboratorio.setSelectedItem(Laboratorio);
        cmbTiposMedicamentos.setSelectedItem(TipoMedicamento);
        cmbPresentaci√≥n.setSelectedItem(Presentacion);
        txtCaja.setText(UnidsCaja);
        
       
        
        if("Si".equalsIgnoreCase(Prescripcion)){
            ckPrescripcion.setSelected(true);
        }
        else{
            ckPrescripcion.setSelected(false); 
        }
        
        if("Si".equalsIgnoreCase(Exclud_IVA)){
            ckIVA.setSelected(true);
        }
        else{
            ckIVA.setSelected(false); 
        }

        ActualizarFoto();
        
            TabbedPane.setSelectedComponent(PanelNuevo);
            Modify=true;

        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Producto a Modificar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }
    
    private void btnmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifyActionPerformed

        ActivarBotones();      
        Modificar();
       
    }//GEN-LAST:event_btnmodifyActionPerformed

    private void btnmodifyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusGained
        ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusGained

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed
   
        ActualizarTabla();  
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

       
        File miDir = new File ("");
        String reporte = miDir.getAbsolutePath()+"\\src\\Reportes\\Producto.jasper";

        JasperPrint jp = null;
        try {
                jp = JasperFillManager.fillReport(reporte, null,Conexion.con);
            } catch (JRException ex) {
    
//                Logger.getLogger(ProveedorP.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("Productos - Sistema de Inventario y Facturaci√≥n RJ");
        
        view.setZoomRatio((float) 0.70);
        view.setVisible(true);
        
        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();
   //     this.toBack();
        
   //    this.setExtendedState(javax.swing.JFrame.CROSSHAIR_CURSOR); 
        
        

    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);  
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed
      
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged

   int index = TabbedPane.getSelectedIndex();
   if(index==0){
     
      PanelEffect.setEffect(new EntryBoucing(1000));
      PanelEffect.startEffect();
   }
   if(index==1){
     
      PanelEffect2.setEffect(new Shape(1000));
      PanelEffect2.startEffect();
      txtBusc.requestFocus();
   }
   
         // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

	  
    
KEffectPanel PanelEffect = new KEffectPanel();
KEffectPanel PanelEffect2 = new KEffectPanel();

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//                this.panelColor = new JPanel();
//		this.panelColor.setBackground(Color.BLACK);
//		this.panelColor.setBorder(new LineBorder(new Color(0, 0, 0)));
//		this.panelColor.setBounds(133, 618, 43, 32);
//                
//     PanelEffect.setEffect(new SplitHorizontalFade (1000,panelColor.getBackground()));
//     PanelEffect.startEffect();
    
				
PanelEffect.setEffect(new EntryBoucing(1000));
PanelEffect.startEffect();
                                

//Date now = new Date();
//
//DateFormat df =  DateFormat.getDateInstance();
//DateFormat df1 = DateFormat.getDateInstance(DateFormat.SHORT);
//DateFormat df2 = DateFormat.getDateInstance(DateFormat.MEDIUM);
//DateFormat df3 = DateFormat.getDateInstance(DateFormat.LONG);
//DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
//String s =  df.format(now);
//String s1 = df1.format(now);
//String s2 = df2.format(now);
//String s3 = df3.format(now);
//String s4 = df4.format(now);
//System.out.println("(Default) Hoy es:" + s);
//System.out.println("(SHORT)   Hoy es:" + s1);
//System.out.println("(MEDIUM)  Hoy es:" + s2);
//System.out.println("(LONG)    Hoy es:" + s3);
//System.out.println("(FULL)    Hoy es:" + s4);


      
        //this.setResizable(false);
        
       
       
        int MaxProv = 0;
        
        
        try{
           
            resultado = Conexion.consulta("Select Max(ID_Proveedor) from Proveedor");
            
            while(resultado.next()){
            
            MaxProv = resultado.getInt(1);
            }
            
            
        }catch(SQLException ex){}
     
        MaxProv++;
        
        int i = 1;
        
        Proveedores = new int [MaxProv];
        Proveedores[0]=0;
        
        try{
            
            
            resultado = Conexion.consulta("Select ID_Proveedor, Nombre_Proveedor from Proveedor "
                    + "where Estado_Proveedor = 'Activo'");
            
            while(resultado.next()){
                
              Proveedores[i]=resultado.getInt(1);
              cmbProveedor.addItem(resultado.getString(2).trim());
              i++;
            }
            
        }catch(SQLException ex){}
        
        
        int MaxProv1 = 0;
        
        
        try{
           
            resultado = Conexion.consulta("Select Max(ID_Categoria) from Categoria");
            
            while(resultado.next()){
            
            MaxProv1 = resultado.getInt(1);
            }
            
            
        }catch(SQLException ex){}
     
        MaxProv1++;
        
        int i1 = 1;
        
        Categorias = new int [MaxProv1];
        Categorias[0]=0;
        
        try{
            
            
            resultado = Conexion.consulta("Select ID_Categoria, Nombre_Categoria from Categoria "
                    + "where Estado_Categoria = 'Activo'");
            
            while(resultado.next()){
                
              Categorias[i1]=resultado.getInt(1);
              cmbCategoria.addItem(resultado.getString(2).trim());
              i1++;
            }
            
        }catch(SQLException ex){}
        
        
          int MaxProv12 = 0;
        
        
        try{
           
            resultado = Conexion.consulta("Select Max(ID_Proveedor) from Proveedor");
            
            while(resultado.next()){
            
            MaxProv12 = resultado.getInt(1);
            }
            
            
        }catch(SQLException ex){}
     
        MaxProv12++;
        
        int i12 = 1;
        
        Laboratorios = new int [MaxProv12];
        Laboratorios[0]=0;
        
        try{
            
            
            resultado = Conexion.consulta("Select ID_Proveedor, Nombre_Proveedor from Proveedor "
                    + "where Estado_Proveedor = 'Activo' and Tipo_Proveedor = 'Laboratorio'");
            
            while(resultado.next()){
                
              Laboratorios[i12]=resultado.getInt(1);
              cmbLaboratorio.addItem(resultado.getString(2).trim());
              i12++;
            }
            
        }catch(SQLException ex){}
        
       //  String Dia, Mes, Ano;
//
//        Calendar c = new GregorianCalendar();
//
//        Dia = Integer.toString(c.get(Calendar.DATE));
//        Mes = Integer.toString(c.get(Calendar.MONTH)+1);
//        Ano = Integer.toString(c.get(Calendar.YEAR));
//
//        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//        String strFecha =Dia+"-"+Mes+"-"+Ano ;
//        Date Fecha;
        
//        try {
//
//            Fecha = sdf.parse(strFecha);
//
//            jdFechaNacimiento.setMaxSelectableDate(Fecha);
//
//        } catch (ParseException ex) {
//        }
//        
        try{
          String NombreArchivo = "\\Presentacion\\Tipos_Medicamentos.txt";
          File Ruta = new File("");
          NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
          String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){

//            if(this.cmbTiposMedicamentos.getSize()!=null){
//                
//                this.cmbTiposMedicamentos.removeAllItems();
//                  
//            }
            
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbTiposMedicamentos.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
        
        
   ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
    public void Titulo(){
         Object [] Titulo = {"","No.", "Nombre", "C√≥digo",
            "Categor√≠a", "Contenido", "Prescripci√≥n", "Tipo Medicamento", "Presentaci√≥n", "Unids. por Caja", 
            "Margen de Ganancia", "Stock", "Precio de Venta", "Excento I.V.A.", "Stock M√≠nimo", "Proveedor", "Laboratorio",
            "Fecha Ingreso", "Registrado Por", "Estado"};
        
        model.setColumnIdentifiers(Titulo);
        
        this.Tabla.setModel(model);
        
        JTableHeader header = Tabla.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));
      
        Tabla.setDefaultRenderer(Object.class, new FormatoTabla());
      
        CheckBoxHeader();  
    }
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btnFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFotoActionPerformed
              ModoImagen Pic = new ModoImagen(this, false);
              this.setVisible(false);
              Pic.setProducto(this);
              Pic.setVisible(true);
              Pic.toFront();
        
     //   AddPic();        // TODO add your handling code here:
    }//GEN-LAST:event_btnFotoActionPerformed

    private void btnActivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnActivarFocusLost
 
      ActivarBotones();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnActivarFocusLost

    private void btnmodifyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnmodifyFocusLost
      ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_btnmodifyFocusLost

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained

      ActivarBotones();    // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
  
      ActivarBotones();  // TODO add your handling code here:
    }//GEN-LAST:event_TablaMousePressed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed

        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancelActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed

        Guardar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewActionPerformed

        EnableAll();
        CleanAll();
      
             
              
    }//GEN-LAST:event_btnnewActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
char a = evt.getKeyChar();

if(a == KeyEvent.VK_ENTER){
    txtcodigo.requestFocus();
}
// TODO add your handling code here:
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtstockminKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtstockminKeyTyped
char a = evt.getKeyChar();

if(!Character.isDigit(a)&&!Character.isISOControl(a)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
    } 


if(a == KeyEvent.VK_ENTER){
    txtMargen.requestFocus();
}
// TODO add your handling code here:
    }//GEN-LAST:event_txtstockminKeyTyped

    
    
    private void cmbProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbProveedorKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    txtstockmin.requestFocus();
}        
// TODO add your handling code here:
    }//GEN-LAST:event_cmbProveedorKeyTyped

    
    
       public void ActualizarFoto(){
       
   int fila = Tabla.getSelectedRow();
      
   if (fila > -1){
     
          int ID = 0;
          
         ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
         
         String Fotografia;
                 
         try {
                 
          
   resultado = Conexion.consulta("Select Fotografia_Producto from Producto where ID_Producto = "+ID);
          
     if (resultado.next()){
            Fotografia = resultado.getString(1);
                            
            File = Fotografia;
            jLblFoto.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(342,350,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto.setIcon(newIcon);
            //Se Cambia el Tamano de la Etiqueta
           // jLblFoto.setSize(256,256);
            
           
     }                          
     
                              
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "El Producto No Posee Fotograf√≠a","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      
        }
    }
  
    

    private void MnItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemModificarActionPerformed
        Modificar();      // TODO add your handling code here:
    }//GEN-LAST:event_MnItemModificarActionPerformed

    
    public void ActivarDesactivar(){
        int fila = Tabla.getSelectedRow();

        int ID;
        String Nombre;
        int v=JOptionPane.NO_OPTION;
        String Estado;

        if (fila > -1){
            
            

            ID= Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
            Nombre=((String)this.Tabla.getModel().getValueAt(fila, 2));
            Estado = ((String)this.Tabla.getModel().getValueAt(fila,19));

           
            
            if("Activo".equalsIgnoreCase(Estado)){
                
                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar al Producto "+Nombre.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
             
                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar al Producto "+Nombre.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }

            if(v==JOptionPane.YES_OPTION){

                
                Producto.Activar_Desactivar_Producto(ID);
               
                ActualizarTabla();
            }
        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Producto a Activar/Desactivar", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }
    
    
    
    private void MnItemActDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnItemActDesActionPerformed
        ActivarDesactivar();        // TODO add your handling code here:
    }//GEN-LAST:event_MnItemActDesActionPerformed

    private void btnDesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesactivarActionPerformed
ActivarBotones();
Desactivar();
ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarActionPerformed

    private void btnDesactivarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusGained
   ActivarBotones();        // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusGained

    private void btnDesactivarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnDesactivarFocusLost
   ActivarBotones();     // TODO add your handling code here:
    }//GEN-LAST:event_btnDesactivarFocusLost

    private void txtContenidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContenidoKeyTyped
char a = evt.getKeyChar();
        
 if(a == KeyEvent.VK_ENTER){
    ckPrescripcion.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtContenidoKeyTyped

    private void btnBuscarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProveedorActionPerformed
BuscarProveedor BuscarProv = new BuscarProveedor(this, true);
BuscarProv.setProducto(this);
BuscarProv.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarProveedorActionPerformed

    private void txtCajaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCajaKeyTyped
char a = evt.getKeyChar();

if(!Character.isDigit(a)&&!Character.isISOControl(a)){
        Toolkit.getDefaultToolkit().beep();
        evt.consume();
    }


if(a == KeyEvent.VK_ENTER){
    txtContenido.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtCajaKeyTyped

    private void cmbCategoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCategoriaKeyTyped
char a = evt.getKeyChar();

if(a == KeyEvent.VK_ENTER){
    cmbProveedor.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCategoriaKeyTyped

    private void btnBuscarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCategoriaActionPerformed
BuscarCategoria BuscarCat = new BuscarCategoria(this, true);
BuscarCat.setProducto(this);
BuscarCat.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarCategoriaActionPerformed

    private void txtcodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodigoKeyTyped
char a = evt.getKeyChar();

if(a == KeyEvent.VK_ENTER){
    cmbCategoria.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_txtcodigoKeyTyped

    private void txtMargenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenKeyTyped
char a = evt.getKeyChar();


if(!Character.isDigit(a)&&!Character.isISOControl(a)&&a!='.'){
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
}


        if("0".equals(txtMargen.getText())&&txtMargen.getCaretPosition()==1&&a!='.'&&!Character.isISOControl(a)){
        txtMargen.setText(txtMargen.getText()+".");
//        return;
        }

        if (a == '.' && txtMargen.getText().contains(".")) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
            return;
        }

        String x1 = "";
         if(Character.isDigit(a)||(Character.isISOControl(a)&&!"".equals(txtMargen.getText()))){
            x1 = txtMargen.getText();
        }
        if(Character.isDigit(a)||(a == '.')){
            x1 = txtMargen.getText().concat(String.valueOf(a));
        }
        
 
         if(!"".equals(x1)){
         
     try{ 

        Double x = Double.parseDouble(x1);  
        
         if(x>Double.MAX_VALUE){
          Toolkit.getDefaultToolkit().beep();
          evt.consume();    
         }
        
     }catch(NumberFormatException ex){
            Toolkit.getDefaultToolkit().beep();
            evt.consume();   
             }
        }
        

if(a == KeyEvent.VK_ENTER){
    cmbTiposMedicamentos.requestFocus();
}   
// TODO add your handling code here:
    }//GEN-LAST:event_txtMargenKeyTyped

    private void ckPrescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ckPrescripcionKeyTyped
char a = evt.getKeyChar();

if(a == KeyEvent.VK_ENTER){
    btnFoto.requestFocus();
}        // TODO add your handling code here:
    }//GEN-LAST:event_ckPrescripcionKeyTyped

    private void cmbLaboratorioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbLaboratorioKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbLaboratorioKeyTyped

    private void btnBuscarLaboratorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarLaboratorioActionPerformed
BuscarLaboratorio BuscarLab = new BuscarLaboratorio(this, true);
BuscarLab.setProducto(this);
BuscarLab.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarLaboratorioActionPerformed

    private void cmbProveedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProveedorItemStateChanged
  int SelectCombo = cmbProveedor.getSelectedIndex();
  
  int ID_Proveedor = Proveedores[SelectCombo];
  String Tipo = "";
  
    try{
            
            resultado = Conexion.consulta("Select Tipo_Proveedor from Proveedor "
                    + "where ID_Proveedor = "+ID_Proveedor);
            
            while(resultado.next()){
             
                Tipo = resultado.getString(1);  
            }
            
        }catch(SQLException ex){}
 
     if("Distribuidora".equals(Tipo)){
       cmbLaboratorio.setEnabled(true);
       lblLab.setEnabled(true); 
       cmbLaboratorio.setVisible(true);
       lblLab.setVisible(true); 
       btnBuscarLaboratorio.setVisible(true);
       btnBuscarLaboratorio.setEnabled(true);
    }
     else{
       cmbLaboratorio.setEnabled(false);
       lblLab.setEnabled(false); 
       cmbLaboratorio.setVisible(false);
       lblLab.setVisible(false);
       btnBuscarLaboratorio.setVisible(false);
       btnBuscarLaboratorio.setEnabled(false);
     }
  

// TODO add your handling code here:
    }//GEN-LAST:event_cmbProveedorItemStateChanged

    private void ckIVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ckIVAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ckIVAKeyTyped

    private void cmbTiposMedicamentosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTiposMedicamentosKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTiposMedicamentosKeyTyped

    private void cmbPresentaci√≥nKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbPresentaci√≥nKeyTyped
char a = evt.getKeyChar();

String Presentacion = (String) cmbPresentaci√≥n.getSelectedItem();
String Tipo = (String) cmbTiposMedicamentos.getSelectedItem();

if(a==KeyEvent.VK_ENTER){
if("Caja".equals(Presentacion) || "Frasco".equals(Presentacion) ||
        "Otros".equals(Presentacion) || "Otros".equals(Tipo)){
  
    txtCaja.requestFocus();
   
}
else{
  
    txtContenido.requestFocus();
}
}

// TODO add your handling code here:
    }//GEN-LAST:event_cmbPresentaci√≥nKeyTyped

    private void cmbTiposMedicamentosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTiposMedicamentosItemStateChanged
     
        String Tipo = (String) cmbTiposMedicamentos.getSelectedItem();
    
    
         cmbPresentaci√≥n.removeAllItems();
         cmbPresentaci√≥n.addItem("<Seleccione>");
      
         
         if("Ampolla".equals(Tipo)){
         
         try{
       
             String NombreArchivo = "\\Presentacion\\Ampolla.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
          
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
    }
    if("Capleta".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Capleta.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Capleta recubierta".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Capleta recubierta.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("C√°psula".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Capsula.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Comprimido".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Comprimido.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Comprimido recubierto".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Comprimido recubierto.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
    }
    if("Crema".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Crema.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Dispensador".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Dispensador.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }   
    if("Gel t√≥pico".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gel topico.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Gel vaginal".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gel vaginal.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Gotas nasales".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gotas nasales.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Gotas oft√°lmicas".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gotas oftalmicas.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Gotas orales".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gotas orales.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Gotas pedi√°tricas".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Gotas pediatricas.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Jarabe".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Jarabe.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Loci√≥n".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Locion.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("√ìvulo".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Ovulo.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Pasta".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Pasta.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("P√≠ldora".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Pildora.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Polvo".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Polvo.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Polvo granulado".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Polvo granulado.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Soluci√≥n".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Solucion.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Soluci√≥n para nebulizar".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Solucion nebulizar.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Supositorio".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Supositorio.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Tableta".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Tableta.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Tableta recubierta".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Tableta recubierta.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Ung√ºento".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Unguento.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }
    if("Otros".equals(Tipo)){
        
          try{
       
             String NombreArchivo = "\\Presentacion\\Otros.txt";
             File Ruta = new File("");
             NombreArchivo = Ruta.getAbsolutePath()+NombreArchivo;
             String Tipos = Secuencial.readFile(new File(NombreArchivo));

            if(Tipos!=null){
                
            StringTokenizer Token = new StringTokenizer(Tipos, "\n");
            
            while(Token.hasMoreTokens()){
                String c = Token.nextToken();
                this.cmbPresentaci√≥n.addItem(c.trim());
            }
            
            }
        }catch(IOException ex){}
        
          
    }

    
    if(!"<Seleccione>".equals(Tipo)){
        
        lblContenido.setText("Contenido por "+Tipo);
    }
    else{
         lblContenido.setText("Contenido");
    }
// TODO add your handling code here:
    }//GEN-LAST:event_cmbTiposMedicamentosItemStateChanged

    private void cmbPresentaci√≥nItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPresentaci√≥nItemStateChanged
String Presentacion = (String) cmbPresentaci√≥n.getSelectedItem();
String Tipo = (String) cmbTiposMedicamentos.getSelectedItem();

XUnid = 0;

if("Caja".equals(Presentacion) || "Frasco".equals(Presentacion) ||
        "Otros".equals(Presentacion) || "Otros".equals(Tipo)){ 
    XUnid = 1;
    
    if("Otros".equals(Tipo)&&"<Seleccione>".equals(Presentacion)){
    lblcaja.setText("Unidades por Presentaci√≥n");
    }
    else{
    lblcaja.setText("Unidades por "+Presentacion);
    }
    lblcaja.setVisible(true);
    txtCaja.setEnabled(true);
    txtCaja.setVisible(true);
}
else{
     lblcaja.setText("Unidades por Presentaci√≥n");
     lblcaja.setVisible(false);
     txtCaja.setEnabled(false);
     txtCaja.setVisible(false);
     txtCaja.setText("");
     
}


// TODO add your handling code here:
    }//GEN-LAST:event_cmbPresentaci√≥nItemStateChanged

    private void txtCajaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCajaKeyReleased
char a = evt.getKeyChar();

    String x1 = "";
        
     if(Character.isDigit(a)||(Character.isISOControl(a)&&!"".equals(txtCaja.getText()))){
            x1 = txtCaja.getText();
         }


     if(!"".equals(x1)){
       
         
     try{ 

        int x = Integer.parseInt(x1); 
        
          if(x>Integer.MAX_VALUE){
          Toolkit.getDefaultToolkit().beep();
          evt.consume();    
         }
         
          if(x<=0){
          txtCaja.setText("");
          Toolkit.getDefaultToolkit().beep();
          evt.consume(); 
          }
        
     }catch(NumberFormatException ex){
            Toolkit.getDefaultToolkit().beep();
            evt.consume();   
             }
         
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCajaKeyReleased

    private void txtstockminKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtstockminKeyReleased
char a = evt.getKeyChar();
    
    String x1 = "";
        
     if(Character.isDigit(a)||(Character.isISOControl(a)&&!"".equals(txtstockmin.getText()))){
            x1 = txtstockmin.getText();
         }


     if(!"".equals(x1)){
         
     try{ 

        int x = Integer.parseInt(x1);
        
         if(x>Integer.MAX_VALUE){
          Toolkit.getDefaultToolkit().beep();
          evt.consume();    
         }
         if(x<=0){
          txtstockmin.setText("");
          Toolkit.getDefaultToolkit().beep();
          evt.consume(); 
         }
        
     }catch(NumberFormatException ex){
            Toolkit.getDefaultToolkit().beep();
            evt.consume();   
             }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtstockminKeyReleased

    
    
    DefaultTableModel model = new DefaultTableModel() {

        
        
    Class[] types = new Class [] {
  
        java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class,
        java.lang.String.class, java.lang.String.class, java.lang.String.class,
        java.lang.String.class, java.lang.String.class
    };
 

    @Override
    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

  

    @Override
    public boolean isCellEditable(int row, int column) {
    
     if(column == 0){
            return true;
        }else{
            return false;
    }
       //all cells false
    
    }
};
    
    
    
    
     public class FormatoTabla extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
         
  if(String.valueOf(table.getValueAt(row,19)).equalsIgnoreCase("Inactivo"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }
  
//   if(String.valueOf(table.getValueAt(row,9)).equalsIgnoreCase("Si"))  {
//      setForeground(Color.GREEN);
//  }
                  
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }
   
     
 public class CheckBoxHeader extends JCheckBox  implements TableCellRenderer, MouseListener {  
 
  protected CheckBoxHeader rendererComponent;  
  protected int column;  
  protected boolean mousePressed = false;  
  
  public CheckBoxHeader(ItemListener itemListener) {  
    rendererComponent = this;  
    rendererComponent.addItemListener(itemListener);  
  }  
  @Override
  public Component getTableCellRendererComponent(  
      JTable table, Object value,  
      boolean isSelected, boolean hasFocus, int row, int column) {  
    if (table != null) {  
      JTableHeader header = table.getTableHeader();  
      if (header != null) {  
        rendererComponent.setForeground(header.getForeground());  
        rendererComponent.setBackground(header.getBackground());  
        rendererComponent.setFont(header.getFont());  
        header.addMouseListener(rendererComponent);  
      }  
    }  
    setColumn(column);  
    rendererComponent.setText("Selecc. Todo");  
    setBorder(UIManager.getBorder("TableHeader.cellBorder"));  
    return rendererComponent;  
  }  
  protected void setColumn(int column) {  
    this.column = column;  
  }  
  public int getColumn() {  
    return column;  
  }  
  
  protected void handleClickEvent(MouseEvent e) {  
    if (mousePressed) {  
      mousePressed=false;  
      JTableHeader header = (JTableHeader)(e.getSource());  
      JTable tableView = header.getTable();  
      TableColumnModel columnModel = tableView.getColumnModel();  
      int viewColumn = columnModel.getColumnIndexAtX(e.getX());  
      int columna = tableView.convertColumnIndexToModel(viewColumn);  
   
      if (viewColumn == this.column && e.getClickCount() == 1 && columna != -1) {  
        doClick();  
      }  
    }  
  } 
  
  @Override
  public void mouseClicked(MouseEvent e) {  
    handleClickEvent(e);  
    ((JTableHeader)e.getSource()).repaint();  
  }  
  @Override
  public void mousePressed(MouseEvent e) {  
    mousePressed = true;  
  }  
  @Override
  public void mouseReleased(MouseEvent e) {  
  }  
  @Override
  public void mouseEntered(MouseEvent e) {  
  }  
  @Override
  public void mouseExited(MouseEvent e) {  
  }  
}  

 public void CheckBoxHeader()  
  {  
   
    TableColumn tc = Tabla.getColumnModel().getColumn(0);  //No Columna
    tc.setCellEditor(Tabla.getDefaultEditor(Boolean.class));  
    tc.setCellRenderer(Tabla.getDefaultRenderer(Boolean.class));  
    tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));  
   
  }  
  class MyItemListener implements ItemListener  
  {  
    @Override
    public void itemStateChanged(ItemEvent e) {  
      Object source = e.getSource();  
      if (source instanceof AbstractButton == false) return;  
      boolean checked = e.getStateChange() == ItemEvent.SELECTED;  
      for(int x = 0, y = Tabla.getRowCount(); x < y; x++)  
      {  
        Tabla.setValueAt(checked,x,0);  //No Columna
      }  
    }  
  }  
 
      
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductoP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new ProductoP().setVisible(true);               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MnItemActDes;
    private javax.swing.JMenuItem MnItemModificar;
    private javax.swing.JPanel PanelNuevo;
    private javax.swing.JPanel PanelVer;
    private javax.swing.JPopupMenu PopupMenu;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnActivar;
    private javax.swing.JButton btnBuscarCategoria;
    private javax.swing.JButton btnBuscarLaboratorio;
    private javax.swing.JButton btnBuscarProveedor;
    private javax.swing.JButton btnDesactivar;
    private javax.swing.JButton btnFoto;
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnmodify;
    private javax.swing.JButton btnnew;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnshowall;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox ckIVA;
    private javax.swing.JCheckBox ckPrescripcion;
    private javax.swing.JComboBox cmbCategoria;
    private javax.swing.JComboBox cmbLaboratorio;
    private javax.swing.JComboBox cmbPresentaci√≥n;
    private javax.swing.JComboBox cmbProveedor;
    private javax.swing.JComboBox cmbTiposMedicamentos;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLblFoto;
    private javax.swing.JLabel jLblFoto1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblContenido;
    private javax.swing.JLabel lblLab;
    private javax.swing.JLabel lblalerta;
    private javax.swing.JLabel lblcaja;
    private javax.swing.JTextField txtBusc;
    private javax.swing.JTextField txtCaja;
    private javax.swing.JTextArea txtContenido;
    private javax.swing.JTextField txtMargen;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtcodigo;
    private javax.swing.JTextField txtstockmin;
    // End of variables declaration//GEN-END:variables
}

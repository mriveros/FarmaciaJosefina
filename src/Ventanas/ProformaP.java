/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.CustomTextField;
import Clases.FacturaTablaPJ;
import Clases.FacturacionPJ;
import Clases.ObtenerCambio;
import Procedimientos.Conexion;
import Procedimientos.Proforma;
import Reportes.FacturaReport;
import com.keffect.effects.animatedEffects.EntryBoucing;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Reymundo Tenorio
 */
public class ProformaP extends javax.swing.JFrame {

    /**
     * Creates new form ProductoP
     */
    public ProformaP() {

       try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         

        initComponents();
        JTableLista.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ckUnidad.setVisible(false);
        lblMoneda.setVisible(false);
        cmbMoneda.setVisible(false);
        rdTarjeta.setVisible(false);

        /*COPIAR PEGAR DESACTIVAR*/
//         JTextComponent.KeyBinding[] newBindings = {
////        new JTextComponent.KeyBinding(
////          KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
////          DefaultEditorKit.beepAction),
//        new JTextComponent.KeyBinding(
//          KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
//          DefaultEditorKit.beepAction),
////        new JTextComponent.KeyBinding(
////            KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
////            DefaultEditorKit.beepAction)
////      
//         };
//            
//    Keymap k = txtNombre.getKeymap();
//    JTextComponent.loadKeymap(k, newBindings, txtNombre.getActions());
//    
//        MultipleEffect effects = new MultipleEffect();
//				effects.addEffect(new ShadowFrame(20));
//				effects.addEffect(new Shadow(1000));
//				effects.addEffect(new SplitHorizontalFade(1000));
//				effects.addEffect(new SplitVerticalFade(2000));
//				effects.addEffect(new DarkenReverse(6000,50));
//                                
        // PanelEffect.setEffect(effects);                    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        JMnModificar = new javax.swing.JMenuItem();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelNuevo = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtCambio = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jFecha = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        rdContado = new javax.swing.JRadioButton();
        rdCredito = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        txtCliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtVendedor = new javax.swing.JTextField();
        lblMoneda = new javax.swing.JLabel();
        cmbMoneda = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        rdEfectivo = new javax.swing.JRadioButton();
        rdTarjeta = new javax.swing.JRadioButton();
        btnBuscarCliente = new javax.swing.JButton();
        ckCliente = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        btnBuscarProduct = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPV = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtUnidsDispon = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUnidsVender = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        ckUnidad = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        JTableLista = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtIVA = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cmbDescuento = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnProcesar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnCancelar1 = new javax.swing.JButton();
        PanelVer = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        txtbusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();

        JMnModificar.setText("Modificar");
        JMnModificar.setToolTipText("Modificar");
        jPopupMenu1.add(JMnModificar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Proforma");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setPreferredSize(new java.awt.Dimension(200, 574));

        //KEffectPanel effectPanel = new KEffectPanel();
        //PanelNuevo = effectPanel;
        PanelNuevo = PanelEffect;
        PanelNuevo.setBackground(new java.awt.Color(0, 153, 204));
        PanelNuevo.setLayout(new javax.swing.BoxLayout(PanelNuevo, javax.swing.BoxLayout.LINE_AXIS));

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel16.setOpaque(false);
        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información de Factura", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel14.setOpaque(false);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Tipo de Cambio");

        txtCambio.setEditable(false);
        txtCambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtCambio.setForeground(new java.awt.Color(0, 51, 51));
        txtCambio.setToolTipText("Tipo de Cambio Actual del Dólar");
        txtCambio.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Fecha");

        jFecha.setDateFormatString("dd-MM-yyyy");
        jFecha.setEnabled(false);
        jFecha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFecha.getDateEditor().getUiComponent().addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jdFechaKeyTyped(evt);
            }
        });

        jFecha.getDateEditor().getUiComponent().addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jdFechaKeyReleased(evt);
            }
        });

        jFecha.getDateEditor().getUiComponent().addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jdFechaKeyPressed(evt);
            }
        });

        jFecha.getDateEditor().getUiComponent().setToolTipText("Seleccione Fecha");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Tipo de Factura");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jPanel17.setOpaque(false);

        buttonGroup2.add(rdContado);
        rdContado.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        rdContado.setForeground(new java.awt.Color(255, 255, 255));
        rdContado.setSelected(true);
        rdContado.setText("Contado");
        rdContado.setToolTipText("Seleccione si la factura es al contado");
        rdContado.setEnabled(false);
        rdContado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rdContado.setOpaque(false);
        rdContado.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        rdContado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdContadoItemStateChanged(evt);
            }
        });
        jPanel17.add(rdContado);

        buttonGroup2.add(rdCredito);
        rdCredito.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        rdCredito.setForeground(new java.awt.Color(255, 255, 255));
        rdCredito.setText("Crédito");
        rdCredito.setToolTipText("Seleccione si la factura es al crédito");
        rdCredito.setEnabled(false);
        rdCredito.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rdCredito.setOpaque(false);
        rdCredito.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        rdCredito.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdCreditoItemStateChanged(evt);
            }
        });
        jPanel17.add(rdCredito);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanel16.add(jPanel14);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información Adicional", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel11.setOpaque(false);

        txtCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtCliente.setToolTipText("Ingrese el Nombre del Cliente");
        txtCliente.setEnabled(false);
        txtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtClienteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Vendedor");

        txtVendedor.setEditable(false);
        txtVendedor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtVendedor.setForeground(new java.awt.Color(0, 51, 51));
        txtVendedor.setToolTipText("Nombre del Vendedor");
        txtVendedor.setEnabled(false);

        lblMoneda.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lblMoneda.setForeground(new java.awt.Color(255, 255, 255));
        lblMoneda.setText("Tipo de Moneda");

        cmbMoneda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbMoneda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Córdobas", "Dólares" }));
        cmbMoneda.setToolTipText("Seleccione El Tipo de Moneda");
        cmbMoneda.setEnabled(false);
        cmbMoneda.setName(""); // NOI18N
        cmbMoneda.setPreferredSize(new java.awt.Dimension(220, 23));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tipo de Pago");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jPanel13.setOpaque(false);

        buttonGroup1.add(rdEfectivo);
        rdEfectivo.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        rdEfectivo.setForeground(new java.awt.Color(255, 255, 255));
        rdEfectivo.setSelected(true);
        rdEfectivo.setText("Efectivo");
        rdEfectivo.setToolTipText("Seleccione Si El Pago Es En Efectivo");
        rdEfectivo.setEnabled(false);
        rdEfectivo.setOpaque(false);
        jPanel13.add(rdEfectivo);

        buttonGroup1.add(rdTarjeta);
        rdTarjeta.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        rdTarjeta.setForeground(new java.awt.Color(255, 255, 255));
        rdTarjeta.setText("Tarjeta");
        rdTarjeta.setToolTipText("Seleccione Si El Pago Es Con Tarjeta de Crédito");
        rdTarjeta.setEnabled(false);
        rdTarjeta.setOpaque(false);
        rdTarjeta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdTarjetaItemStateChanged(evt);
            }
        });
        jPanel13.add(rdTarjeta);

        btnBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnBuscarCliente.setEnabled(false);
        btnBuscarCliente.setMaximumSize(new java.awt.Dimension(70, 34));
        btnBuscarCliente.setMinimumSize(new java.awt.Dimension(70, 34));
        btnBuscarCliente.setPreferredSize(new java.awt.Dimension(70, 34));
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });

        ckCliente.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        ckCliente.setForeground(new java.awt.Color(255, 255, 255));
        ckCliente.setSelected(true);
        ckCliente.setText(" Cliente Particular");
        ckCliente.setToolTipText("Seleccione si el cliente es particular");
        ckCliente.setOpaque(false);
        ckCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckClienteItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lblMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(cmbMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(ckCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btnBuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(118, 118, 118)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtVendedor, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ckCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanel16.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Producto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel12.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Código del Producto");
        jLabel3.setMaximumSize(new java.awt.Dimension(170, 34));
        jLabel3.setMinimumSize(new java.awt.Dimension(170, 34));
        jLabel3.setPreferredSize(new java.awt.Dimension(170, 34));

        txtProducto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtProducto.setToolTipText("");
        txtProducto.setEnabled(false);
        txtProducto.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        txtProducto.setMinimumSize(new java.awt.Dimension(6, 34));
        txtProducto.setPreferredSize(new java.awt.Dimension(6, 34));
        txtProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductoActionPerformed(evt);
            }
        });
        txtProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProductoKeyReleased(evt);
            }
        });

        btnBuscarProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnBuscarProduct.setEnabled(false);
        btnBuscarProduct.setMaximumSize(new java.awt.Dimension(70, 34));
        btnBuscarProduct.setMinimumSize(new java.awt.Dimension(70, 34));
        btnBuscarProduct.setPreferredSize(new java.awt.Dimension(70, 34));
        btnBuscarProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(txtProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(btnBuscarProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btnBuscarProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel16.add(jPanel12);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del Producto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel7.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Precio de Venta");

        txtPV.setEditable(false);
        txtPV.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtPV.setForeground(new java.awt.Color(0, 0, 102));
        txtPV.setToolTipText("Precio de Venta Unitario del Producto");
        txtPV.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("    Unidades a Vender");

        txtUnidsDispon.setEditable(false);
        txtUnidsDispon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtUnidsDispon.setToolTipText("Unidades Disponibles del Producto");
        txtUnidsDispon.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Unidades Disponibles");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        txtUnidsVender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtUnidsVender.setToolTipText("Unidades a Vender");
        txtUnidsVender.setEnabled(false);
        txtUnidsVender.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnidsVenderKeyTyped(evt);
            }
        });

        btnAgregar.setBackground(new java.awt.Color(0, 153, 153));
        btnAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAgregar.setText("Agregar a Lista");
        btnAgregar.setToolTipText("Agregar Producto a La Lista de Productos");
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(204, 0, 0));
        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEliminar.setText("Eliminar de Lista");
        btnEliminar.setToolTipText("Eliminar Producto de La Lista de Productos");
        btnEliminar.setEnabled(false);
        btnEliminar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnEliminarFocusGained(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        ckUnidad.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        ckUnidad.setForeground(new java.awt.Color(255, 255, 255));
        ckUnidad.setText("Unidades (Individuales)");
        ckUnidad.setToolTipText("Seleccione si el cliente es particular");
        ckUnidad.setOpaque(false);
        ckUnidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckUnidadItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUnidsDispon, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPV, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 84, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ckUnidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar))
                    .addComponent(txtUnidsVender))
                .addGap(50, 50, 50))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPV, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtUnidsVender, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtUnidsDispon, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ckUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        jPanel16.add(jPanel7);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de Productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel10.setOpaque(false);
        jPanel10.setLayout(new java.awt.BorderLayout());

        JTableLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        JTableLista.setToolTipText("Lista de Productos a Facturar");
        JTableLista.setComponentPopupMenu(jPopupMenu1);
        JTableLista.setEnabled(false);
        JTableLista.getTableHeader().setReorderingAllowed(false);
        JTableLista.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTableListaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTableListaFocusLost(evt);
            }
        });
        JTableLista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableListaMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(JTableLista);

        jPanel10.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel10);

        PanelNuevo.add(jPanel16);

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información de Pago", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel8.setOpaque(false);
        jPanel8.setLayout(new java.awt.GridLayout(4, 2, 5, 5));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("  Sub-Total");
        jPanel8.add(jLabel16);

        txtSubTotal.setEditable(false);
        txtSubTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSubTotal.setToolTipText("Sub-Total de La Venta");
        jPanel8.add(txtSubTotal);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("  I.V.A.");
        jPanel8.add(jLabel19);

        txtIVA.setEditable(false);
        txtIVA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtIVA.setToolTipText("Total a Pagar");
        jPanel8.add(txtIVA);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("  Descuento");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel8.add(jLabel17);

        cmbDescuento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbDescuento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0%", "5%", "10%" }));
        cmbDescuento.setToolTipText("Porcentaje de Descuento");
        cmbDescuento.setEnabled(false);
        cmbDescuento.setMaximumSize(new java.awt.Dimension(121, 23));
        cmbDescuento.setName(""); // NOI18N
        cmbDescuento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDescuentoItemStateChanged(evt);
            }
        });
        jPanel8.add(cmbDescuento);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("  TOTAL A PAGAR");
        jPanel8.add(jLabel18);

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTotal.setToolTipText("Total a Pagar");
        jPanel8.add(txtTotal);

        jPanel9.setBackground(new java.awt.Color(0, 102, 153));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel9.setOpaque(false);

        btnNuevo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Nuevo.png"))); // NOI18N
        btnNuevo.setMnemonic('n');
        btnNuevo.setText("Nueva Proforma");
        btnNuevo.setToolTipText("Realizar Nueva Orden");
        btnNuevo.setContentAreaFilled(false);
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnProcesar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnProcesar.setForeground(new java.awt.Color(255, 255, 255));
        btnProcesar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fact.png"))); // NOI18N
        btnProcesar.setMnemonic('p');
        btnProcesar.setText("Procesar Proforma");
        btnProcesar.setToolTipText("Procesar y Facturar Orden");
        btnProcesar.setContentAreaFilled(false);
        btnProcesar.setEnabled(false);
        btnProcesar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProcesar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcesarActionPerformed(evt);
            }
        });

        btnCancelar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/No.png"))); // NOI18N
        btnCancelar.setMnemonic('c');
        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar / Salir");
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnCancelar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelar1.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Calculadora.png"))); // NOI18N
        btnCancelar1.setMnemonic('A');
        btnCancelar1.setText("Calculadora");
        btnCancelar1.setToolTipText("Abrir Calculadora");
        btnCancelar1.setContentAreaFilled(false);
        btnCancelar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnProcesar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnCancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        PanelNuevo.add(jPanel2);

        TabbedPane.addTab("Nuevo", PanelNuevo);

        PanelVer = PanelEffect2;
        PanelVer.setBackground(new java.awt.Color(0, 153, 204));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel15.setBackground(new java.awt.Color(0, 153, 204));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Fecha Compra", "Proveedor", "Empleado", "Modo Compra", "Tiempo Para Pagar" }));
        cmbbusc.setToolTipText("Buscar Por:");

        txtbusc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtbusc.setToolTipText("Buscar");
        CustomTextField customTextField9 = new CustomTextField(100);
        txtbusc = customTextField9;
        customTextField9.setPlaceholder("Ingrese Información a Buscar");
        customTextField9.setFont(new java.awt.Font("Tahoma", 0, 16));
        customTextField9.setForeground(Color.BLACK);
        customTextField9.setPlaceholderForeground(Color.LIGHT_GRAY);
        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();
        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));
        ModeloAutoCompletar modelo1 = new ModeloVendNames();
        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));
        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });
        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel15.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Tabla.setToolTipText("Lista Registros");
        Tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla);

        jPanel15.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TablaTodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Registros");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel15.add(jPanel5, java.awt.BorderLayout.SOUTH);

        PanelVer.add(jPanel15);

        TabbedPane.addTab("Ver", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1308, 742));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

  
     public void SetCliente(int ID_Cliente, String NombreCliente, int Descuen){
        
        ckCliente.setSelected(false);
        this.ID_Cliente = ID_Cliente;
        txtCliente.setText(NombreCliente);
        if(rdContado.isSelected()){
       if(Descuen == 0){
           cmbDescuento.setSelectedIndex(0);
       }
       if(Descuen == 5){
           cmbDescuento.setSelectedIndex(1);
       }
       if(Descuen == 10){
           cmbDescuento.setSelectedIndex(2);
       }
        }
        
    }

    KEffectPanel PanelEffect = new KEffectPanel();
    KEffectPanel PanelEffect2 = new KEffectPanel();

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//                this.panelColor = new JPanel();
//		this.panelColor.setBackground(Color.BLACK);
//		this.panelColor.setBorder(new LineBorder(new Color(0, 0, 0)));
//		this.panelColor.setBounds(133, 618, 43, 32);
//                
//     PanelEffect.setEffect(new SplitHorizontalFade (1000,panelColor.getBackground()));
//     PanelEffect.startEffect();

        PanelEffect.setEffect(new EntryBoucing(1000));
        PanelEffect.startEffect();

//Date now = new Date();
//
//DateFormat df =  DateFormat.getDateInstance();
//DateFormat df1 = DateFormat.getDateInstance(DateFormat.SHORT);
//DateFormat df2 = DateFormat.getDateInstance(DateFormat.MEDIUM);
//DateFormat df3 = DateFormat.getDateInstance(DateFormat.LONG);
//DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
//String s =  df.format(now);
//String s1 = df1.format(now);
//String s2 = df2.format(now);
//String s3 = df3.format(now);
//String s4 = df4.format(now);
//System.out.println("(Default) Hoy es:" + s);
//System.out.println("(SHORT)   Hoy es:" + s1);
//System.out.println("(MEDIUM)  Hoy es:" + s2);
//System.out.println("(LONG)    Hoy es:" + s3);
//System.out.println("(FULL)    Hoy es:" + s4);
        double Cambio = 0;
        int ID_Cambio = 0;
        String Empleado = "";

        try {
            resultado = Conexion.consulta("Select  Nombres_Empleado, Apellidos_Empleado "
                    + "from Empleado where ID_Empleado = " + MenuPrincipal.ID_Usuario);
            while (resultado.next()) {
                Empleado = resultado.getString(1).trim() + " " + resultado.getString(2).trim();
            }

            txtVendedor.setText(Empleado);

        } catch (SQLException ex) {
        }

        try {
            resultado = Conexion.consulta("Select  Max(ID_Tipo_Cambio) from Tipo_Cambio");
            while (resultado.next()) {
                ID_Cambio = resultado.getInt(1);
            }

            resultado = Conexion.consulta("Select Tipo_Cambio from Tipo_Cambio where ID_Tipo_Cambio = " + ID_Cambio);
            while (resultado.next()) {
                Cambio = resultado.getDouble(1);
            }
        } catch (SQLException ex) {
        }

        txtCambio.setText(String.valueOf(Cambio));

//        try {
//            txtCambio.setText(new ObtenerCambio().Cambio());
//        } catch (IOException ex) { }
        java.util.Date Hoy = new java.util.Date();

        jFecha.setDate(Hoy);
        jFecha.setMaxSelectableDate(Hoy);
      
        ModeloProductos.setNumRows(0);

        TituloLista();

         ActualizarTabla();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private MenuPrincipal MP;

    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }

    public void jdFechaKeyTyped(KeyEvent evt) {

        char a = evt.getKeyChar();

        evt.consume();
        Toolkit.getDefaultToolkit().beep();

    }

    public void jdFechaKeyPressed(KeyEvent evt) {
        char a = evt.getKeyChar();

        evt.consume();
        Toolkit.getDefaultToolkit().beep();

    }

    public void jdFechaKeyReleased(KeyEvent evt) {
        char a = evt.getKeyChar();

        evt.consume();
        Toolkit.getDefaultToolkit().beep();

    }


    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MP.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed


    private void txtClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClienteKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteKeyTyped

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed
        BuscarCliente BuscarC = new BuscarCliente();
        BuscarC.setProforma(this);
        BuscarC.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void txtProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductoActionPerformed

        BuscarPorCodigoBarra();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductoActionPerformed

    int UnidadesPorCaja = 0;
    int Stock_MinP = 0;

    public void BuscarCodigoBarra() {

        String Codigo = txtProducto.getText().trim();
        UnidadesPorCaja = 0;
        Stock_MinP = 0;
        btnAgregar.setEnabled(false);

        int UnidsDisponibles = 0;
        double PV = 0;
        String Producto = "";
        int ID_Prod = 0;
        int Stock_Min = 0;
        int UnidsXCaja = -1;

        try {
            resultado = Conexion.consulta("Select ID_Producto, Nombre_Producto, Unidades_Disponibles, "
                    + "Precio_Venta, Stock_Min, UnidsXCaja from "
                    + "ProductoV Where Codigo_Producto = '" + Codigo + "'");
            while (resultado.next()) {
                ID_Prod = resultado.getInt(1);
                Producto = resultado.getString(2).trim();
                UnidsDisponibles = resultado.getInt(3);
                PV = resultado.getDouble(4);
                Stock_Min = resultado.getInt(7);
                UnidsXCaja = resultado.getInt(9);
            }
        } catch (SQLException ex) {
        }

        if ("".equals(Producto)) {

            return;
        }

        btnAgregar.setEnabled(true);

        ckUnidad.setSelected(false);
        ckUnidad.setVisible(false);

        this.UnidadesPorCaja = UnidsXCaja;
        this.Stock_MinP = Stock_Min;

        if (UnidsXCaja != -1) {

            if (UnidsXCaja > 1) {

                this.UnidadesPorCaja = UnidsXCaja;

                ckUnidad.setSelected(false);
                ckUnidad.setVisible(true);

            } else {
                ckUnidad.setSelected(false);
                ckUnidad.setVisible(false);
                UnidsDisponibles = UnidsDisponibles / UnidsXCaja;
                PV = PV * UnidsXCaja;
            }
        }

        int UnidsVendidas = 0;

        String Indi;
        int UnidsIndi;

        int Filas = JTableLista.getRowCount();

        for (int i = 0; i < Filas; i++) {

            int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
            Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

            if (ID_Prod == ProductID) {
                UnidsIndi = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                if ("Individual".equals(Indi)) {
                    UnidsIndi = UnidsIndi / UnidsXCaja;
                }
                UnidsVendidas = UnidsVendidas + UnidsIndi;

            }
        }

        UnidsDisponibles = UnidsDisponibles - UnidsVendidas;

        if (UnidsDisponibles <= Stock_Min) {
            txtUnidsDispon.setForeground(new Color(255, 102, 0));
        }
        if (UnidsDisponibles > Stock_Min) {
            txtUnidsDispon.setForeground(new Color(0, 153, 0));
        }
        if (UnidsDisponibles <= 0) {
            txtUnidsDispon.setForeground(new Color(204, 0, 0));
        }

        txtPV.setText(String.valueOf(PV));
        txtUnidsDispon.setText(String.valueOf(UnidsDisponibles));
        txtUnidsVender.requestFocus();

              // TODO add your handling code here:
    }

    private void txtProductoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductoKeyReleased
//        BuscarCodigoBarra();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductoKeyReleased

     public void BuscarPorCodigoBarra() {

        String Codigo = txtProducto.getText().trim();

        ID_BuscarProd = 0;
        btnAgregar.setEnabled(false);

        int UnidsDisponibles = 0;
        double PV = 0;
        String Nombre = "";
        int ID_Prod = 0;
        int UnidsXCaja = 0;
        String Controlado = "No";
        String IVA = "";
        String Presentacion = "";
        String Tipo = "";
        String Contenido = "";

        try {
            resultado = Conexion.consulta("Select ID_Producto, Nombre_Producto, Unidades_Disponibles, "
                    + "Precio_Venta, UnidsXCaja, Controlado, Exclud_IVA, Presentacion, "
                    + "Tipo_Medicamento, Contenido from ProductoV Where Codigo_Producto = '" + Codigo + "'");
            while (resultado.next()) {
                ID_Prod = resultado.getInt(1);
                Nombre = resultado.getString(2).trim();
                UnidsDisponibles = resultado.getInt(3);
                PV = resultado.getDouble(4);
                UnidsXCaja = resultado.getInt(5);
                Controlado = resultado.getString(6);
                IVA = resultado.getString(7);
                Presentacion = resultado.getString(8);
                Tipo = resultado.getString(9);
                Contenido = resultado.getString(10);
            }
        } catch (SQLException ex) {
        }

        int UnidsVendidas = 0;

        if ("".equals(Nombre)) {
            return;
        }
        
        
            String Producto = Nombre.trim() + " " + Presentacion.trim() + " x" + UnidsXCaja + " " + Tipo.trim() + " " + Contenido.trim();
            
           
            
            if("No".equals(IVA)){
              Producto = "*"+Producto;  
            }
       
            
        this.UnidadesPorCaja = UnidsXCaja;
        
        ckUnidad.setSelected(false);
        ckUnidad.setVisible(false);


       
       boolean Individual = false;

       //    Producto = Producto+" "+Presentacion+" x"+UnidsXCaja+" "+Tipo+" "+Contenido;
        int Filas = JTableLista.getRowCount();
        String Indi;
        String Unitario = "Presentación";
        
        boolean Existe = false;
        int Posicion = 0;
        

        for (int i = 0; i < Filas; i++) {

            int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
            Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

            if (ID_Prod == ProductID) {

                 if(Individual==true){
                    if("Individual".equals(Indi.trim())){
                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    Posicion = i;
                    Existe = true;
                    
                       
                    }
                    }
                   
                    if(Individual==false){
                    if("Presentación".equals(Indi.trim())){  
                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    Posicion = i;
                    Existe = true;
                 
                    }
                }
            }
        }

        UnidsDisponibles = UnidsDisponibles - UnidsVendidas;


        ID_BuscarProd = ID_Prod;
        
           if(UnidsDisponibles>0){
              
              if("Si".equals(Controlado)){
                  
                 Toolkit.getDefaultToolkit().beep();
                 int Control = JOptionPane.showConfirmDialog(this, "Producto "+Producto+" es un fármaco controlado,\n "
                          + "necesita de una prescripción médica, desea agregarlo?", "Procuto controlado",
                          JOptionPane.YES_NO_OPTION);
                  
                 if(Control==JOptionPane.NO_OPTION){
                     JOptionPane.showMessageDialog(this, "Producto controlado no agregado a la lista de venta");
                     return;
                 }      
              }
                     
              String UnidsVender = txtUnidsVender.getText().trim();
              
              if(!"".equals(UnidsVender)){
             
              int UnidsVen = Integer.parseInt(UnidsVender);
                  
              if(UnidsVen<=UnidsDisponibles){
                  
      if(Existe==false){  
          
      Object Datos[] = new Object[7];
      Datos[0]=false;
      Datos[1]=String.valueOf(UnidsVen);
      Datos[2]=Producto;
      Datos[3]=String.valueOf(PV);
      
      double Total = UnidsVen*PV;
      DecimalFormat df1 = new DecimalFormat("#0.00");
      Total=Double.parseDouble(df1.format(Total).replace(',','.'));
     
      Datos[4]=String.valueOf(Total);
      Datos[5]=ID_Prod;
      Datos[6]=Unitario;

      ModeloProductos.addRow(Datos);
      
      JTableLista.setModel(ModeloProductos);
                    
      double SubTotal = 0;
    
      try{
      SubTotal = Double.parseDouble(txtSubTotal.getText().trim());
      }catch(NumberFormatException ex){}
      
      SubTotal = SubTotal+Total;
      

  DecimalFormat df = new DecimalFormat("#0.00");
  SubTotal=Double.parseDouble(df.format(SubTotal).replace(',','.'));
  
  double NewIVA = 0;
                
               if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = Total*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                  else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                   

       int index = cmbDescuento.getSelectedIndex()+1;
               
       double Descuento = 0;
       
       switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){  }
                double SubTotalT = Sub + SubTotal;
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = (SubTotalT+NewIVA)-Descuento;
                
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));

            } else {

                int UnidsVendT = UnidsVendidas + UnidsVen;
                double Total = UnidsVendT * PV;
                DecimalFormat df1 = new DecimalFormat("#0.00");
                Total = Double.parseDouble(df1.format(Total).replace(',','.'));

                ModeloProductos.setValueAt(String.valueOf(UnidsVendT), Posicion, 1);
                ModeloProductos.setValueAt(String.valueOf(Total), Posicion, 4);

                JTableLista.setModel(ModeloProductos);

                DecimalFormat df = new DecimalFormat("#0.00");

                double NewIVA = 0;
                
                 if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = (UnidsVen*PV)*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                 else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                 
                int index = cmbDescuento.getSelectedIndex()+1;
               
                double Descuento = 0;
       
                switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){
                    
                }
                double SubTotalT = Sub + (UnidsVen*PV);
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = SubTotalT+NewIVA-Descuento;
                
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));

      }
    
    txtProducto.setText("");
    txtUnidsVender.setText("");
    txtPV.setText("");
    txtUnidsDispon.setText("");
    
    
    
    }
     else{
     JOptionPane.showMessageDialog(this, "Cantidad No Disponible, Solo Hay "+UnidsDisponibles+"\n"
             + "de "+Producto+" en Inventario",
             "Cantidad No Disponible", JOptionPane.ERROR_MESSAGE);
      return;
      }
              
     
              }
              
              else{
                  
                    
      if(Existe == false){
      Object Datos[] = new Object[7];
      Datos[0]=false;
      Datos[1]=String.valueOf(1);
      Datos[2]=Producto;
      Datos[3]=String.valueOf(PV);
      
      double Total = 1*PV;
      DecimalFormat df1 = new DecimalFormat("#0.00");
      Total=Double.parseDouble(df1.format(Total).replace(',','.'));
      
      Datos[4]=String.valueOf(Total);
      Datos[5]=ID_Prod;
      Datos[6]=Unitario;
      
      ModeloProductos.addRow(Datos);
      
      JTableLista.setModel(ModeloProductos);

        DecimalFormat df = new DecimalFormat("#0.00");

                double NewIVA = 0;
                
                 if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = (1*PV)*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                 else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                 
                int index = cmbDescuento.getSelectedIndex()+1;
               
                double Descuento = 0;
       
                switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){
                    
                }
                double SubTotalT = Sub + (1*PV);
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = SubTotalT+NewIVA-Descuento;
                
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));
        txtProducto.setText("");
        txtUnidsVender.setText("");
        txtPV.setText("");
        txtUnidsDispon.setText("");
    
       
      }
      else{
          
          int UnidsVendT = UnidsVendidas+1;
          double Total = UnidsVendT*PV;
          DecimalFormat df1 = new DecimalFormat("#0.00");
          Total=Double.parseDouble(df1.format(Total).replace(',','.'));
         
         ModeloProductos.setValueAt(String.valueOf(UnidsVendT),Posicion,1);
         ModeloProductos.setValueAt(String.valueOf(Total),Posicion,4);
      
         JTableLista.setModel(ModeloProductos);
        
    
                double NewIVA = 0;
                
                 if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = (1*PV)*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df1.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                 else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                 
                int index = cmbDescuento.getSelectedIndex()+1;
               
                double Descuento = 0;
       
                switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){
                    
                }
                double SubTotalT = Sub + (1*PV);
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = SubTotalT+NewIVA-Descuento;
                
                txtSubTotal.setText(df1.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df1.format(TotalT).replace(',','.'));}
    
  
           }
              
          }
          else{
              JOptionPane.showMessageDialog(this, "No hay unidades disponibles de \n"
             +Producto+" en Inventario",
             "Unidades no disponibles", JOptionPane.ERROR_MESSAGE);
          }
           
           
          
        txtProducto.setText("");
        txtUnidsVender.setText("");
        txtPV.setText("");
        txtUnidsDispon.setText("");
        
        txtProducto.requestFocus();

       // TODO add your handling code here:
    }

    int ID_BuscarProd;

    public void SetFactura(int ID_Prod, String Producto, String UnidasDisponibles, String PV,
            int Stock_Min, int UnidsxCaja) {

        btnAgregar.setEnabled(true);
        this.ID_BuscarProd = ID_Prod;
        int UnidsDisponibles = 0;
        int UnidsVendidas = 0;
        Stock_MinP = Stock_Min;

        UnidsDisponibles = Integer.parseInt(UnidasDisponibles.trim());

        this.UnidadesPorCaja = UnidsxCaja;

      
          if (UnidsxCaja > 1) {

                ckUnidad.setSelected(false);
                ckUnidad.setVisible(true);

            } else {
                ckUnidad.setSelected(false);
                ckUnidad.setVisible(false);
          }

        String Indi;
        int UnidsIndi;

        int Filas = JTableLista.getRowCount();

        for (int i = 0; i < Filas; i++) {

            int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
            Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

            if (ID_BuscarProd == ProductID) {
                UnidsIndi = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                if ("Individual".equals(Indi)) {
                    UnidsIndi = UnidsIndi / UnidadesPorCaja;
                }
                UnidsVendidas = UnidsVendidas + UnidsIndi;

            }
        }

        UnidsDisponibles = UnidsDisponibles - UnidsVendidas;

        btnAgregar.setEnabled(true);
        if (UnidsDisponibles <= Stock_Min) {
            txtUnidsDispon.setForeground(new Color(255, 102, 0));
        }
        if (UnidsDisponibles > Stock_Min) {
            txtUnidsDispon.setForeground(new Color(0, 153, 0));
        }
        if (UnidsDisponibles <= 0) {
            txtUnidsDispon.setForeground(new Color(204, 0, 0));
            btnAgregar.setEnabled(false);
        }

        txtProducto.setText(Producto);
        txtUnidsDispon.setText(String.valueOf(UnidsDisponibles));
        txtPV.setText(PV);
        txtUnidsVender.requestFocus();
    }

    private void btnBuscarProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProductActionPerformed
        BuscarProducto BuscarProd = new BuscarProducto(this, true);
        BuscarProd.setProforma(this);
        BuscarProd.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarProductActionPerformed

    private void txtUnidsVenderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnidsVenderKeyTyped

        char a = evt.getKeyChar();

        if (!Character.isDigit(a) && !Character.isISOControl(a)) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }

        String x1 = "";

        if (Character.isDigit(a) || (Character.isISOControl(a) && !"".equals(txtUnidsVender.getText()))) {
            x1 = txtUnidsVender.getText();
        }

        if (!"".equals(x1)) {

            try {

                int x = Integer.parseInt(x1);

                if (x > Integer.MAX_VALUE) {
                    Toolkit.getDefaultToolkit().beep();
                    evt.consume();
                }

            } catch (NumberFormatException ex) {
                Toolkit.getDefaultToolkit().beep();
                evt.consume();
            }
        }
        
        if(a==KeyEvent.VK_ENTER){
            Agregar();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnidsVenderKeyTyped

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        Agregar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnEliminarFocusGained
        int fila = JTableLista.getSelectedRow();
        //    int columna = jTable1.columnAtPoint(evt.getPoint());
        if (fila > -1) {

            btnEliminar.setEnabled(true);
        } else {
            btnEliminar.setEnabled(false);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarFocusGained

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        ActivarBotones();
        Eliminar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void JTableListaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTableListaFocusLost

        int fila = JTableLista.getSelectedRow();
        if (fila > -1) {

            btnEliminar.setEnabled(true);

        } else {

            btnEliminar.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_JTableListaFocusLost

    private void JTableListaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableListaMouseClicked

        ActivarBotones();

        // TODO add your handling code here:
    }//GEN-LAST:event_JTableListaMouseClicked

    private void cmbDescuentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDescuentoItemStateChanged
  int index = cmbDescuento.getSelectedIndex()+1;
               
       double Descuento = 0;
       
       switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
       
       
  DecimalFormat df = new DecimalFormat("#0.00");
       
double Sub = Double.parseDouble(txtSubTotal.getText().trim());
double IVA = Double.parseDouble(txtIVA.getText().trim());
double Desc = (Sub+IVA)*Descuento;
double Total = (Sub+IVA)-Desc;

txtTotal.setText(df.format(Total).replace(',','.'));
// TODO add your handling code here:
    }//GEN-LAST:event_cmbDescuentoItemStateChanged

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        CleanAll();
        EnableAll();
        

        ModeloProductos.setNumRows(0);
        JTableLista.setModel(ModeloProductos);
        
        TituloLista();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcesarActionPerformed
        Procesar();    
        CleanAll();
        EnableAll();
        

        ModeloProductos.setNumRows(0);
        JTableLista.setModel(ModeloProductos);
        
        TituloLista();// TODO add your handling code here:
    }//GEN-LAST:event_btnProcesarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
        // Buscar();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked

        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {

            int Fila = Tabla.getSelectedRow();

            if (Fila > -1) {

                String ID = (String) Tabla.getValueAt(Fila, 0);
                int ID_P = Integer.valueOf(ID);

                Desktop Archivo = Desktop.getDesktop();
                
                File F = new File("");
                
              String Ruta =  F.getAbsolutePath() + "\\Proformas\\Proforma_" + ID_P + ".pdf";
              
         try {
            Archivo.open(new File(Ruta));
           
// TODO add your handling code here:
        } catch (IOException | IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, "Archivo No Encontrado", "No Encontrado", JOptionPane.ERROR_MESSAGE); 
           
        }
       
        }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMousePressed

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed

        ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

        File miDir = new File("");
        String reporte = miDir.getAbsolutePath() + "\\src\\Reportes\\Compra.jasper";

        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(reporte, null, Conexion.con);
        } catch (JRException ex) {

            //                Logger.getLogger(ProveedorP.class.getName()).log(Level.SEVERE, null, ex);
        }

        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("Compras - Sistema de Inventario y Facturación RJ");

        view.setZoomRatio((float) 0.70);
        view.setVisible(true);

        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();
        //     this.toBack();

        //    this.setExtendedState(javax.swing.JFrame.CROSSHAIR_CURSOR);
    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void ckClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckClienteItemStateChanged
        if (ckCliente.isSelected()) {
            txtCliente.setText("");
            txtCliente.setEnabled(true);
            ID_Cliente = 0;
        } else {
            txtCliente.setEnabled(false);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_ckClienteItemStateChanged

    private void btnCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar1ActionPerformed
        AbrirCalculadora();        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelar1ActionPerformed

    private void rdTarjetaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdTarjetaItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTarjetaItemStateChanged

    private void ckUnidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckUnidadItemStateChanged

        if (ckUnidad.isSelected()) {
            int UnidsDispon = 0;
            double PV = 0;
            try{
             PV = Double.parseDouble(txtPV.getText().trim());
           }catch(NumberFormatException ex){}
            
            
  try {
            resultado = Conexion.consulta("Select Unidades_Disponibles from "
                    + "ProductoV Where ID_Producto = "+ID_BuscarProd);
            while (resultado.next()) {
                
                UnidsDispon = resultado.getInt(1); 
            }
            
  }catch(SQLException ex){}
            
            int UnidsVendidas = 0;

            String Indi;
            int UnidsIndi;
            
            UnidsDispon = UnidsDispon*UnidadesPorCaja;
            

            int Filas = JTableLista.getRowCount();

            for (int i = 0; i < Filas; i++) {

                int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
                Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

                if (ID_BuscarProd == ProductID) {
                    UnidsIndi = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    if (!"Individual".equals(Indi)) {
                        UnidsIndi = UnidsIndi * UnidadesPorCaja;
                       
                    }
                    UnidsVendidas = UnidsVendidas + UnidsIndi;
                    

                }
            }

            UnidsDispon = UnidsDispon - UnidsVendidas;
            

            int NewUnids = UnidsDispon;
            double NewPV = PV / UnidadesPorCaja;

            if (UnidsDispon <= (Stock_MinP * UnidadesPorCaja)) {
                txtUnidsDispon.setForeground(new Color(255, 102, 0));
            }
            if (UnidsDispon > (Stock_MinP * UnidadesPorCaja)) {
                txtUnidsDispon.setForeground(new Color(0, 153, 0));
            }
            if (UnidsDispon <= 0) {
                txtUnidsDispon.setForeground(new Color(204, 0, 0));
                btnAgregar.setEnabled(false);
            }

            txtUnidsDispon.setText(String.valueOf(NewUnids));
            txtPV.setText(String.valueOf(NewPV));

        } else {

            int UnidsDispon = 0;
            double PV = 0;
            
            try{
            UnidsDispon = Integer.parseInt(txtUnidsDispon.getText().trim());
            PV = Double.parseDouble(txtPV.getText().trim());
           }catch(NumberFormatException ex){}
            
            int UnidsVendidas = 0;

            String Indi;
            int UnidsIndi;
      
            UnidsDispon = UnidsDispon / UnidadesPorCaja;
    

            int Filas = JTableLista.getRowCount();

            for (int i = 0; i < Filas; i++) {

                int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
                Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

                if (ID_BuscarProd == ProductID) {
                    UnidsIndi = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    if ("Individual".equals(Indi)) {
                        UnidsIndi = UnidsIndi / UnidadesPorCaja;
       
                    }
                    UnidsVendidas = UnidsVendidas + UnidsIndi;
                

                }
            }

            UnidsDispon = UnidsDispon - UnidsVendidas;
  
            int NewUnids = UnidsDispon;
            double NewPV = PV*UnidadesPorCaja;

            if (UnidsDispon <= Stock_MinP) {
                txtUnidsDispon.setForeground(new Color(255, 102, 0));
            }
            if (UnidsDispon > Stock_MinP) {
                txtUnidsDispon.setForeground(new Color(0, 153, 0));
            }
            if (UnidsDispon <= 0) {
                txtUnidsDispon.setForeground(new Color(204, 0, 0));
                btnAgregar.setEnabled(false);
            }

            txtUnidsDispon.setText(String.valueOf(NewUnids));
            txtPV.setText(String.valueOf(NewPV));

        }

// TODO add your handling code here:
    }//GEN-LAST:event_ckUnidadItemStateChanged

    private void rdCreditoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdCreditoItemStateChanged
        if (rdContado.isSelected()) {
            cmbDescuento.setEnabled(true);
            cmbMoneda.setEnabled(true);
            rdEfectivo.setEnabled(true);
            rdEfectivo.setSelected(true);
            rdTarjeta.setEnabled(true);
            ckCliente.setEnabled(true);
        }

        if (rdCredito.isSelected()) {

            cmbDescuento.setEnabled(false);
            cmbDescuento.setSelectedIndex(0);
            cmbMoneda.setEnabled(false);
            cmbMoneda.setSelectedIndex(0);
            rdEfectivo.setEnabled(false);
            rdEfectivo.setSelected(false);
            rdTarjeta.setEnabled(false);
            rdTarjeta.setSelected(false);
            ckCliente.setEnabled(false);
            ckCliente.setSelected(false);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_rdCreditoItemStateChanged

    private void rdContadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdContadoItemStateChanged
        if (rdContado.isSelected()) {
            cmbDescuento.setEnabled(true);
            cmbMoneda.setEnabled(true);
            rdEfectivo.setEnabled(true);
            rdEfectivo.setSelected(true);
            rdTarjeta.setEnabled(true);
            ckCliente.setEnabled(true);
        }

        if (rdCredito.isSelected()) {

            cmbDescuento.setEnabled(false);
            cmbDescuento.setSelectedIndex(0);
            cmbMoneda.setEnabled(false);
            cmbMoneda.setSelectedIndex(0);
            rdEfectivo.setEnabled(false);
            rdEfectivo.setSelected(false);
            rdTarjeta.setEnabled(false);
            rdTarjeta.setSelected(false);
            ckCliente.setEnabled(false);
            ckCliente.setSelected(false);

        }           // TODO add your handling code here:
    }//GEN-LAST:event_rdContadoItemStateChanged

    private void JTableListaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTableListaFocusGained
ActivarBotones();        // TODO add your handling code here:
    }//GEN-LAST:event_JTableListaFocusGained

    public void AbrirCalculadora() {

        String Comando = "calc.exe"; //"cmd /C dir"
        try {
          /*  Process p = */Runtime.getRuntime().exec(Comando);
//            BufferedReader in = new BufferedReader(
//                    new InputStreamReader(p.getInputStream()));
//            String line = "";
//            while ((line = in.readLine()) != null) {
//                System.out.println(line);
//            }
        } catch (IOException e) {
        }

    }

    public static ResultSet resultado;

    public void txtprodTyped(KeyEvent e) {
        if (!"".equals(txtProducto.getText())) {

            String Nombre = txtProducto.getText().trim();
            int unidsd = 0;
            double PV = 0;

            try {

                resultado = Conexion.consulta("Select Unidades_Disponibles, Precio_Venta from Productov Where Nombre_Producto = '" + Nombre + "'");

                while (resultado.next()) {
                    unidsd = resultado.getInt(1);
                    PV = resultado.getDouble(2);

                }
            } catch (SQLException ex) {

            }

            int c = JTableLista.getRowCount();
            int UnidsVendidas = 0;

            for (int i = 0; i < c; i++) {
                String Producto = this.JTableLista.getModel().getValueAt(i, 1).toString();

                if (Producto.trim() == null ? Nombre == null : Producto.trim().equalsIgnoreCase(Nombre)) {

                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 0).toString());
                }
            }

//               
//               if(unidsd == 0 && PV == 0){
//                   JOptionPane.showMessageDialog(null, "Producto No Existe");
//                   return;
//               } 
            txtUnidsDispon.setText(String.valueOf(unidsd - UnidsVendidas));
            DecimalFormat df = new DecimalFormat("#0.00");
            PV = Double.parseDouble(df.format(PV).replace(',','.'));
            txtPV.setText(String.valueOf(PV));

            if (unidsd > 20) {
                txtUnidsDispon.setForeground(new Color(0, 153, 0));

            }

            if (unidsd <= 20) {
                txtUnidsDispon.setForeground(Color.ORANGE);
            }

            if (unidsd <= 10) {
                txtUnidsDispon.setForeground(Color.red);
            }

            if (unidsd == 0) {

//         JOptionPane.showMessageDialog(this, "No Hay Unidades Disponibles", "Error", JOptionPane.ERROR_MESSAGE);
//         return;
            }

        } else {
            txtUnidsDispon.setText("");
            txtPV.setText("");

        }
    }

    public void txtprodFocusLost(FocusEvent e) {
        if (!"".equals(txtProducto.getText())) {

            String Nombre = txtProducto.getText().trim();
            int unidsd = 0;
            double PV = 0;

            try {

                resultado = Conexion.consulta("Select Unidades_Disponibles, Precio_Venta from Productov Where Nombre_Producto = '" + Nombre + "'");

                while (resultado.next()) {
                    unidsd = resultado.getInt(1);
                    PV = resultado.getDouble(2);

                }
            } catch (SQLException ex) {

            }

            int c = JTableLista.getRowCount();
            int UnidsVendidas = 0;

            for (int i = 0; i < c; i++) {
                String Producto = this.JTableLista.getModel().getValueAt(i, 1).toString();

                if (Producto.trim() == null ? Nombre == null : Producto.trim().equalsIgnoreCase(Nombre)) {

                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 0).toString());
                }
            }

            txtUnidsDispon.setText(String.valueOf(unidsd - UnidsVendidas));
            DecimalFormat df = new DecimalFormat("#0.00");
            PV = Double.parseDouble(df.format(PV).replace(',','.'));
            txtPV.setText(String.valueOf(PV));

            if (unidsd > 20) {
                txtUnidsDispon.setForeground(new Color(0, 153, 0));

            }

            if (unidsd <= 20) {
                txtUnidsDispon.setForeground(Color.ORANGE);
            }

            if (unidsd <= 10) {
                txtUnidsDispon.setForeground(Color.red);
            }

            if (unidsd == 0) {

//         JOptionPane.showMessageDialog(this, "No Hay Unidades Disponibles", "Error", JOptionPane.ERROR_MESSAGE);
//         return;
            }

        } else {
            txtUnidsDispon.setText("");
            txtPV.setText("");

        }
    }

    public void EnableAll() {

        btnBuscarProduct.setEnabled(true);
        btnBuscarCliente.setEnabled(true);
        // jFecha.setEnabled(true);  
        txtCliente.setEnabled(true);
        txtProducto.setEnabled(true);
        txtPV.setEnabled(true);
        txtSubTotal.setEnabled(true);
        txtTotal.setEnabled(true);
        txtUnidsVender.setEnabled(true);
        cmbDescuento.setEnabled(true);
        cmbMoneda.setEnabled(true);
        txtVendedor.setEnabled(true);
        txtUnidsDispon.setEnabled(true);
        btnAgregar.setEnabled(true);
        txtCambio.setEnabled(true);
        btnProcesar.setEnabled(true);
        rdEfectivo.setEnabled(true);
        rdCredito.setEnabled(true);
        rdContado.setEnabled(true);
        rdTarjeta.setEnabled(true);
        ckCliente.setEnabled(true);
        JTableLista.setEnabled(true);
    }

    public void DisableAll() {
        btnBuscarProduct.setEnabled(false);
        btnBuscarCliente.setEnabled(false);
        // jFecha.setEnabled(false);  
        txtCliente.setEnabled(false);
        txtProducto.setEnabled(false);
        txtPV.setEnabled(false);
        txtSubTotal.setEnabled(false);
        txtTotal.setEnabled(false);
        txtUnidsVender.setEnabled(false);
        cmbDescuento.setEnabled(false);
        cmbMoneda.setEnabled(false);
        txtVendedor.setEnabled(false);
        txtUnidsDispon.setEnabled(false);
        btnAgregar.setEnabled(false);
        txtCambio.setEnabled(false);
        btnProcesar.setEnabled(false);
        rdEfectivo.setEnabled(false);
        rdCredito.setEnabled(false);
        rdContado.setEnabled(false);
        rdTarjeta.setEnabled(false);
        ckCliente.setEnabled(false);
        JTableLista.setEnabled(false);
    }

    public void CleanAll() {
        ID_BuscarProd = 0;
        ID_Cliente = 0;
        ckCliente.setSelected(true);
        ckUnidad.setSelected(true);
        rdEfectivo.setSelected(true);
        rdContado.setSelected(true);
        cmbDescuento.setSelectedIndex(0);
        cmbMoneda.setSelectedIndex(0);
        txtCliente.setText("");
        txtIVA.setText("0");
        txtPV.setText("");
        txtProducto.setText("");
        txtSubTotal.setText("0");
        txtTotal.setText("0");
        txtUnidsDispon.setText("");
        txtUnidsVender.setText("");
        ModeloProductos.setNumRows(0);

        TituloLista();
    }

    public void TituloLista() {
        String header1[] = {"", "Unidades", "Descripción del Producto", "Precio de Venta", "Total", "ID_Producto","Individual"};
        ModeloProductos.setColumnIdentifiers(header1);

        JTableLista.setModel(ModeloProductos);

        JTableHeader header = JTableLista.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));

        JTableLista.setDefaultRenderer(Object.class, new FormatoTabla());
        CheckBoxHeader();
    }

    public void Titulo() {

        String Titu[] = {"No.","Empleado", "Cliente", "Fecha", "Tipo Proforma", "Estado"};

        model.setColumnIdentifiers(Titu);

        JTableHeader header = Tabla.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));

        Tabla.setModel(model);

    }

//    
//    VentasReport DataSourceV = new VentasReport();
//    FacturaReport DataSource = new FacturaReport();
    int vvv = 0;
//ExistenciaReport DataSource2 = new ExistenciaReport();
    int ID_Producto;

    public void Agregar() {

        
        double PV = 0;

        try{
        PV = Double.valueOf(txtPV.getText().trim());
        }catch(NumberFormatException ex){}
        int UnidsD, UnidsV;

        if (!"".equals(txtUnidsDispon.getText()) && !"".equals(txtUnidsVender.getText())) {

            UnidsD = Integer.parseInt(txtUnidsDispon.getText().trim());
            UnidsV = Integer.parseInt(txtUnidsVender.getText().trim());

            if (UnidsV > UnidsD) {
                JOptionPane.showMessageDialog(this, "Unidades a Vender es mayor a unidades disponibles",
                        "Unidades no disponibles", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String Controlado = "No";
            String Nombre = "", Contenido = "", Presentacion = "", Tipo_Medicamento = "";
            int UnidsxCaja = 0;
            String IVA = "";
            try {

                resultado = Conexion.consulta("Select Controlado, Nombre_Producto, Contenido,"
                        + "Presentacion, UnidsXCaja, Tipo_Medicamento, Exclud_IVA from Producto Where ID_Producto = " + ID_BuscarProd);

                while (resultado.next()) {
                    Controlado = resultado.getString(1);
                    Nombre = resultado.getString(2);
                    Contenido = resultado.getString(3);
                    Presentacion = resultado.getString(4);
                    UnidsxCaja = resultado.getInt(5);
                    Tipo_Medicamento = resultado.getString(6);
                    IVA = resultado.getString(7);
                }
            } catch (SQLException ex) {

            }

             if ("".equals(Nombre)) {
            JOptionPane.showMessageDialog(this, "Producto No Encontrado", "No encontrado",JOptionPane.ERROR_MESSAGE);
            return;
        }
            
            String Producto = Nombre.trim() + " " + Presentacion.trim() + " x" + UnidsxCaja + " " + Tipo_Medicamento.trim() + " " + Contenido.trim();

            if("No".equals(IVA)){
              Producto = "*"+Producto;  
            }
           
            if ("Si".equals(Controlado)) {

                int Control = JOptionPane.showConfirmDialog(this, "Producto " + Producto
                        + " es un fármaco controlado,\n "
                        + "necesita de una prescripción médica, desea agregarlo?", "Procuto controlado",
                        JOptionPane.YES_NO_OPTION);

                if (Control == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(this, "Producto controlado no agregado a la lista de venta");
                    return;
                }
            }

            int UnidsVendidas = 0;
            
            boolean Individual = false;
            String Unitario = "Presentación";
            
            if(ckUnidad.isSelected()){
                Individual = true;
                Unitario = "Individual";
            }

            String Indi;
            boolean Existe = false;
            int Posicion = 0;
            
  

            int Filas = JTableLista.getRowCount();

            for (int i = 0; i < Filas; i++) {

                int ProductID = (int) this.JTableLista.getModel().getValueAt(i, 5);
                Indi = this.JTableLista.getModel().getValueAt(i, 6).toString();

                if (ID_BuscarProd == ProductID) {
                   
                    if(Individual==true){
                    if("Individual".equals(Indi.trim())){
                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    Posicion = i;
                    Existe = true;
                    
                       
                    }
                    }
                   
                    if(Individual==false){
                    if("Presentación".equals(Indi.trim())){  
                    UnidsVendidas = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                    Posicion = i;
                    Existe = true;
                 
                    }
                }
            }
            }

            if (Existe == false) {

                Object Datos[] = new Object[7];

                Datos[0] = false;
                Datos[1] = String.valueOf(UnidsV);
                Datos[2] = Producto;
                Datos[3] = txtPV.getText().trim();

                double Total = UnidsV * (PV);
                DecimalFormat df1 = new DecimalFormat("#0.00");
                Total = Double.parseDouble(df1.format(Total).replace(',','.'));

                Datos[4] = String.valueOf(Total);
                Datos[5] = ID_BuscarProd;
                Datos[6] = Unitario;

                ModeloProductos.addRow(Datos);

                JTableLista.setModel(ModeloProductos);
                
              
                double SubTotal = 0;
                SubTotal = SubTotal + Total;

                DecimalFormat df = new DecimalFormat("#0.00");
                SubTotal = Double.parseDouble(df.format(SubTotal).replace(',','.'));
                
                double NewIVA = 0;
                
                 if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = Total*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                  else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                   

       int index = cmbDescuento.getSelectedIndex()+1;
               
       double Descuento = 0;
       
       switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){  }
                double SubTotalT = Sub + SubTotal;
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = (SubTotalT+NewIVA)-Descuento;
                
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));

            } else {

                int UnidsVendT = UnidsVendidas + UnidsV;
                double Total = UnidsVendT * PV;
                DecimalFormat df1 = new DecimalFormat("#0.00");
                Total = Double.parseDouble(df1.format(Total).replace(',','.'));

                ModeloProductos.setValueAt(String.valueOf(UnidsVendT), Posicion, 1);
                ModeloProductos.setValueAt(String.valueOf(Total), Posicion, 4);

                JTableLista.setModel(ModeloProductos);
                
                DecimalFormat df = new DecimalFormat("#0.00"); 
                  
                double NewIVA = 0;
                
                 if("No".equals(IVA)){
                double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){ }
                NewIVA = (UnidsV*PV)*0.15;
                NewIVA = NewIVA+IVAT;
                String IVAA = df.format(NewIVA).replace(',','.');
                txtIVA.setText(IVAA);
                 }
                 else{
                     double IVAT = 0;
                try{
                IVAT = Double.parseDouble(txtIVA.getText().trim());
                }catch(NumberFormatException ex){}
                    
                  NewIVA = NewIVA+IVAT;
                
                 }
                 
                int index = cmbDescuento.getSelectedIndex()+1;
               
                double Descuento = 0;
       
                switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double Sub = 0;
                try{
                Sub = Double.parseDouble(txtSubTotal.getText().trim());
                }catch(NumberFormatException ex){
                    
                }
                double SubTotalT = Sub + (UnidsV*PV);
                Descuento =  (SubTotalT+NewIVA)*Descuento; 
                double TotalT = SubTotalT+NewIVA-Descuento;
                
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));

            }

            txtProducto.setText("");
            txtUnidsVender.setText("");
            txtPV.setText("");
            txtUnidsDispon.setText("");

            txtProducto.requestFocus();

            ID_BuscarProd = 0;

//
        }

    }

   public void ActivarBotones(){
         boolean Checkbox = false;

        for (int j = 0; j < JTableLista.getRowCount(); j++) {

            Checkbox = (boolean) JTableLista.getValueAt(j, 0);

            if (Checkbox == true) {

                btnEliminar.setEnabled(true);
                break;
            }
        }

        int Fila = JTableLista.getSelectedRow();

        if (Checkbox == false) {

            btnEliminar.setEnabled(false);

            if (Fila > -1) {

               btnEliminar.setEnabled(true);

            } else {
               btnEliminar.setEnabled(false);

            }
        }

      

    }
    
    public void Eliminar() {
      
      boolean Flag;
      boolean Flag2 = false;
      
      List<Integer> Filas = new ArrayList<Integer>();
       
        for (int j = 0; j < JTableLista.getRowCount(); j++) {

                Flag = (boolean) this.JTableLista.getValueAt(j, 0);

                if (Flag == true) { 
                    Filas.add(j);

                    Flag2 = true;
                }

        }
        
        DefaultTableModel ModelTest;
        ModelTest = ModeloProductos;
        int j=0;
        for (Integer Fila : Filas) {
           
            if(j!=0){
                Fila--;
            }
            ModelTest.removeRow(Fila);
            j++;
        }
        
        ModeloProductos = ModelTest;

        if(Flag2==false){

            
        int Fila = JTableLista.getSelectedRow();

            if (Fila > -1) {
                

          ModeloProductos.removeRow(Fila);

            } 
        
        }
        
       JTableLista.setModel(ModeloProductos); 
       
       
        double Total = 0;
        double TotalF = 0;
        int ID = 0;
        String IVA = "Si";
        double NewIVAT = 0;
        
               for (int i = 0; i < JTableLista.getRowCount(); i++) {

                ID = Integer.parseInt(this.JTableLista.getModel().getValueAt(i, 1).toString());
                Total = Double.parseDouble(this.JTableLista.getModel().getValueAt(i, 4).toString());
                TotalF = TotalF+Total;
                 try {

                resultado = Conexion.consulta("Select Exclud_IVA from Producto Where ID_Producto = " + ID);

                while (resultado.next()) {
                     IVA = resultado.getString(1);
                }
            } catch (SQLException ex) {

            }

                 if("No".equals(IVA)){
                double NewIVA = 0;
                NewIVA = Total*0.15;
                NewIVAT = NewIVAT +NewIVA;
                 }
               
            }
               
                  int index = cmbDescuento.getSelectedIndex()+1;
               
       double Descuento = 0;
       
       switch(index){
        
           case 1: 
               Descuento = 0;
               break;
        
           
           case 2 :
               
                Descuento = 0.05;
               break;
               
           case 3 :
                Descuento = 0.10;
                break;
               
              default: break;
              
    }
      
                double SubTotalT = TotalF;
                Descuento =  (SubTotalT+NewIVAT)*Descuento; 
                double TotalT = (SubTotalT+NewIVAT)-Descuento;
                DecimalFormat df = new DecimalFormat("#0.00");
                String IVAA = df.format(NewIVAT).replace(',','.');
                txtIVA.setText(IVAA);
                txtSubTotal.setText(df.format(SubTotalT).replace(',','.'));
                txtTotal.setText(df.format(TotalT).replace(',','.'));
                
                
                       JTableLista.setModel(ModeloProductos);
                       TituloLista();
               

    }

//    ModeloAutoCompletar modelo2 = new ModeloVentasVend();
//    ModeloAutoCompletar modelo3 = new ModeloVentasFechaC();
//     ModeloAutoCompletar modelo1 = new ModeloVentasName();
    public void ActualizarTabla() {

        Titulo();

        model.setRowCount(0);
        Tabla.setModel(model);

        try {

            resultado = Conexion.consulta("Select * from ProformaV");

            while (resultado.next()) {

                String[] Datos = new String[6];

                Datos[0] = String.valueOf(resultado.getInt(1));
                String NombreE = resultado.getString(2);
                String ApellidoE = resultado.getString(3);

                Datos[1] = NombreE.trim() + " " + ApellidoE.trim();
                Datos[2] = resultado.getString(4);
                Date Fecha = resultado.getDate(5);
                SimpleDateFormat format = new SimpleDateFormat("dd 'de' MMMMM 'de' yyyy");
                Datos[3] = format.format(Fecha);
                Datos[4] = resultado.getString(6);
                Datos[5] = resultado.getString(7);
              
              

                model.addRow(Datos);

            }

        } catch (SQLException ex) {
            Logger.getLogger(ProformaP.class.getName()).log(Level.SEVERE, null, ex);
        }

        Tabla.setModel(model);

    }

    FacturaReport DataSource = new FacturaReport();

    int ID_Cliente = 0;

    public void Procesar() {
        vvv = 0;

        String NombreCliente = "";
        String Vendedor;
        String TipoMoneda;
        String TipoPago;
        String ModoFactura;
        String Total;
        String SubTotal;
        String Descuento;
        String IVA;

        
        if(rdCredito.isSelected()){
            TipoPago = "Crédito";
            ModoFactura = "Crédito";
        }
        else{
            ModoFactura = "Contado";
            if (rdEfectivo.isSelected()) {
            TipoPago = "Efectivo";
        } else {
            TipoPago = "Tarjeta";
        }
        }
        
        if(rdCredito.isSelected()&&ID_Cliente==0){
             JOptionPane.showMessageDialog(this, "Seleccione Cliente", "Seleccione", JOptionPane.ERROR_MESSAGE);
            return;  
        }

        Total = txtTotal.getText().trim();
        SubTotal = txtSubTotal.getText().trim();

             if (  "".equals(Total) || "0".equals(Total) ||
                "".equals(SubTotal) || "0".equals(SubTotal)) {

            JOptionPane.showMessageDialog(this, "Facturar al Menos Un Artículo", "Facturar", JOptionPane.ERROR_MESSAGE);
            return;
        } 

            if (ID_Cliente != 0) {
                if (!"".equals(txtCliente.getText())) {
                    NombreCliente = txtCliente.getText().trim();
                } 
            } else {
                ID_Cliente = 1;
                if (!"".equals(txtCliente.getText())) {
                    NombreCliente = txtCliente.getText().trim();
                } 
                else {
                    NombreCliente = "-";
                }
            }
           
       

            Vendedor = txtVendedor.getText();
            TipoMoneda = (String) cmbMoneda.getSelectedItem();
           
            double Total1, SubTotal1, IVA1;
            Total = txtTotal.getText().trim();
            Total1 = Double.parseDouble(Total);
            SubTotal = txtSubTotal.getText().trim();
            SubTotal1 = Double.parseDouble(SubTotal);
            IVA = txtIVA.getText().trim();
            IVA1 = Double.parseDouble(IVA);
            
            Descuento = (String) cmbDescuento.getSelectedItem();

            int FilasProductos = JTableLista.getRowCount();

            int v = 0;

            int UnidsTotales = 0;

           double Desc = 0;

            switch (cmbDescuento.getSelectedIndex() + 1) {
                case 1:
                    Desc = 0;
                    break;
                case 2:
                    Desc = 5;
                    break;
                case 3:
                    Desc = 10;
                    break;

                default:
                    break;
            }

       
            double TipoC = Double.parseDouble(txtCambio.getText().trim());
            String Individual = "Individual";
            
       
           int ID_P = 0;
           int ID_TipoCambio = 0;

           try{
               resultado = Conexion.consulta("Select Max(ID_Tipo_Cambio) from [dbo].[Tipo_Cambio]");
               
               while(resultado.next()){
               ID_TipoCambio = resultado.getInt(1);
               }
           }catch(SQLException ex){}
           
             Date Fecha = jFecha.getDate();
            
             ID_P = Proforma.Agregar_Proforma(MenuPrincipal.ID_Usuario, NombreCliente, ID_Cliente, Fecha , Desc, ID_TipoCambio, ModoFactura);
             System.out.println("ID: "+ID_P);            
             ID_P++;
             
           
            for (int j = 0; j < FilasProductos; j++) {

                int ID_Prod;
                int UnidsV;
                double PrecioV;
                
                UnidsV = Integer.parseInt(this.JTableLista.getModel().getValueAt(j, 1).toString());
                PrecioV = Double.parseDouble(this.JTableLista.getModel().getValueAt(j, 3).toString());
                ID_Prod = Integer.parseInt(this.JTableLista.getModel().getValueAt(j, 5).toString());
                Individual = this.JTableLista.getModel().getValueAt(j, 6).toString();
                
                if("Presentación".equals(Individual)){
                    int UnidCaja = 0;
                    try{
                     resultado = Conexion.consulta("Select [UnidsXCaja] from ProductoV where ID_Producto = "+ID_Prod);
                     
                     while(resultado.next()){
                         UnidCaja = resultado.getInt(1);
                     }
                  
                 }catch(SQLException ex){}
                 
                    UnidsV = UnidsV*UnidCaja;
                    PrecioV = PrecioV/UnidCaja;
                 
                }

             
             Proforma.Agregar_DetalleProforma(ID_P, ID_Prod, UnidsV, Individual, PrecioV);
            }


            FacturacionPJ fc = new FacturacionPJ();

            fc.setNombreCliente(NombreCliente);
            fc.setID(ID_P);
            fc.setDescuento(Descuento);
            fc.setSubTotal(SubTotal1);
            fc.setTipoMoneda(TipoMoneda);
            fc.setTipoPago(TipoPago);
            fc.setTotal(Total1);
            fc.setVendedor(Vendedor);
            fc.setIVA(IVA1);
            fc.setTipoFactura(ModoFactura);
            fc.setCajero(Vendedor);

            int c1 = JTableLista.getRowCount();

            for (int k = 0; k < c1; k++) {

                FacturaTablaPJ fc1 = new FacturaTablaPJ();

                String Unids1 = this.JTableLista.getModel().getValueAt(k, 1).toString();
                String NombreProducto1 = this.JTableLista.getModel().getValueAt(k, 2).toString();
                String PV1 = this.JTableLista.getModel().getValueAt(k, 3).toString();
                String TotalF1 = this.JTableLista.getModel().getValueAt(k, 4).toString();
                String Indiv= this.JTableLista.getModel().getValueAt(k, 6).toString();
                
                if("Individual".equals(Indiv)){
                    NombreProducto1 = "#"+NombreProducto1;
                }
                
                fc1.setUnids(Unids1);
                fc1.setNombreProducto(NombreProducto1);
                fc1.setPV(PV1);
                fc1.setTotalF(TotalF1);

                DataSource.addValor1(fc1);
            }

            double recibido = 0;
            double cambio = 0;
            

            fc.setTipoCambio(TipoC);
            fc.setCambio(cambio);
            fc.setRecibido(recibido);

            DataSource.addValor(fc);

                //           File miDir = new File ("");
            // String reporte = miDir.getAbsolutePath()+"\\src\\iReport\\Existencia.jasper";
            //
            //
            //
            //        try {
            //            JasperPrint jp = JasperFillManager.fillReport(reporte, null,DataSource2);
            //            JasperViewer view = new JasperViewer(jp, false);
            //            view.setTitle("Productos a Agotarse");
            //            view.setVisible(true);
            //        } catch (JRException ex) {
            //            JOptionPane.showMessageDialog(this, "Error Al Realizar Reporte","Error",JOptionPane.ERROR_MESSAGE);
            //            return;
            //
            //        }
            //
            //
            File F = new File("");
            String RutaFarmacia = F.getAbsolutePath() + "\\Proformas\\";
            File Farmacia = new File(RutaFarmacia);

            if (!Farmacia.exists()) {
                Farmacia.mkdir();
            }

            String reporte = F.getAbsolutePath() + "\\src\\Reportes\\Proforma.jasper";

            JasperPrint jp = null;
            try {
                jp = JasperFillManager.fillReport(reporte, null, DataSource);
                JasperExportManager.exportReportToPdfFile(jp, F.getAbsolutePath() + "\\Proformas\\Proforma_" + ID_P + ".pdf");

            } catch (JRException ex) {

            }
            JasperViewer view = new JasperViewer(jp, false);

            view.setTitle("Proforma");
            
        view.setZoomRatio((float) 0.70);
        view.setVisible(true);

        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();

        
    }

    DefaultTableModel model = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int row, int column) {
            //all cells false
            return false;
        }
    };

    DefaultTableModel ModeloProductos = new DefaultTableModel() {

        Class[] types = new Class[]{
            java.lang.Boolean.class, java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.String.class, java.lang.Integer.class,
            java.lang.String.class
        };

        @Override
        public boolean isCellEditable(int row, int column) {

            if (column == 0) {
                return true;
            } else {
                //all cells false
                return false;
            }
        }
    };

    public class FormatoTabla extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused, int row, int column) {

            if (String.valueOf(table.getValueAt(row, 5)).equalsIgnoreCase("true")) {

                setForeground(Color.RED);
            } else {
                setForeground(Color.BLACK);
            }

            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            return this;
        }
    }

    public class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected CheckBoxHeader rendererComponent;
        protected int column;
        protected boolean mousePressed = false;

        public CheckBoxHeader(ItemListener itemListener) {
            rendererComponent = this;
            rendererComponent.addItemListener(itemListener);
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            rendererComponent.setText("Selecc. Todo");
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;
                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();
                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int columna = tableView.convertColumnIndexToModel(viewColumn);

                if (viewColumn == this.column && e.getClickCount() == 1 && columna != -1) {
                    doClick();
                }
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        @Override
        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }

    public void CheckBoxHeader() {

        TableColumn tc = JTableLista.getColumnModel().getColumn(0);  //No Columna
        tc.setCellEditor(JTableLista.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(JTableLista.getDefaultRenderer(Boolean.class));
        tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));

    }

    class MyItemListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = JTableLista.getRowCount(); x < y; x++) {
                JTableLista.setValueAt(checked, x, 0);  //No Columna
            }
            JTableLista.requestFocus();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProformaP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new ProformaP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMnModificar;
    private javax.swing.JTable JTableLista;
    private javax.swing.JPanel PanelNuevo;
    private javax.swing.JPanel PanelVer;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnBuscarProduct;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelar1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnProcesar;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnshowall;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox ckCliente;
    private javax.swing.JCheckBox ckUnidad;
    private javax.swing.JComboBox cmbDescuento;
    private javax.swing.JComboBox cmbMoneda;
    private javax.swing.JComboBox cmbbusc;
    private com.toedter.calendar.JDateChooser jFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblMoneda;
    private javax.swing.JRadioButton rdContado;
    private javax.swing.JRadioButton rdCredito;
    private javax.swing.JRadioButton rdEfectivo;
    private javax.swing.JRadioButton rdTarjeta;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtIVA;
    private javax.swing.JTextField txtPV;
    private javax.swing.JTextField txtProducto;
    private javax.swing.JTextField txtSubTotal;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUnidsDispon;
    private javax.swing.JTextField txtUnidsVender;
    private javax.swing.JTextField txtVendedor;
    private javax.swing.JTextField txtbusc;
    // End of variables declaration//GEN-END:variables
}

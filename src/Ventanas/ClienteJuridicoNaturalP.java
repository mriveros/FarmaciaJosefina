/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.CustomTextField;
import Procedimientos.Conexion;
import com.keffect.effects.animatedEffects.Shape;
import com.keffectpanel.KEffectPanel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.BadLocationException;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Reymundo
 */
public class ClienteJuridicoNaturalP extends javax.swing.JDialog {

    /**
     * Creates new form ClienteJuridicoNaturalP
     * @param parent
     * @param modal
     */
    public ClienteJuridicoNaturalP(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
           try {
            this.setIconImage(new ImageIcon(getClass().getResource("Icono.png")).getImage());
        } catch (NullPointerException ex) {
        }
         
         
        initComponents();
        Tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        txtbusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLblFoto1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clientes Naturales");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });

        PanelVer.setBackground(new java.awt.Color(0, 153, 204));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No.", "Nombres", "Apellidos", "No. Cédula", "Sexo", "Descuento", "Estado" }));
        cmbbusc.setToolTipText("Buscar Por:");

        txtbusc.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtbusc.setToolTipText("Buscar");
        CustomTextField customTextField9 = new CustomTextField(100);
        txtbusc = customTextField9;
        customTextField9.setPlaceholder("Ingrese Información a Buscar");
        customTextField9.setFont(new java.awt.Font("Tahoma", 0, 16));
        customTextField9.setForeground(Color.BLACK);
        customTextField9.setPlaceholderForeground(Color.LIGHT_GRAY);
        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();
        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));
        ModeloAutoCompletar modelo1 = new ModeloVendNames();
        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));
        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });
        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Tabla.setToolTipText("Lista Registros");
        Tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla.getTableHeader().setReorderingAllowed(false);
        Tabla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TablaFocusLost(evt);
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/TablaTodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Registros");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotografía", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel11.setOpaque(false);

        jLblFoto1.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.EAST);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver", PanelVer);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1168, 682));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
      
    private String File = "";
   
      
   
   
    public static ResultSet resultado;
    public static ResultSet resultado2;

    int ID_ClienteJ;

    public void setID_ClienteJ(int ID_ClienteJ) {
        this.ID_ClienteJ = ID_ClienteJ;
    }
    
   
    
   public void ActualizarTabla(){
        
       Titulo();
        
       model.setRowCount(0);
       Tabla.setModel(model);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV]"
                + " where ID_ClienteJuridico = "+ID_ClienteJ);

        
       
     
       while (resultado.next())
       {     
             
           Object [] Datos = new Object [15]; 
              
              
            Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);
              
              model.addRow(Datos);  
   
    }
       
       Tabla.setModel(model);
    
   
//        Tabla.getColumnModel().getColumn( 10 ).setCellEditor( new Celda_CheckBox() );
//        //para pintar la columna con el CheckBox en la tabla, en este caso, la primera columna
//        Tabla.getColumnModel().getColumn( 10 ).setCellRenderer(new Render_CheckBox());      

        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
//       for(int i =0;i<Tabla.getColumnCount();i++){
//       Tabla.getColumnModel().getColumn(i).setCellRenderer(getRenderer());
//        }    
//       Tabla.repaint();
    }
   
   public void Buscar(){
       
       Titulo();
       
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] "
                        + "where [ID_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
            Object [] Datos = new Object [15]; 
              
              
            Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
            Tabla.getColumnModel().getColumn(1).setCellRenderer(getRenderer());
       
            break;

                case 2:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] "
                        + "where [Nombres_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
                     
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            Tabla.getColumnModel().getColumn(3).setCellRenderer(getRenderer());
//            
             break;
                    
          case 3:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] "
                        + "where [Apellidos_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

            Tabla.getColumnModel().getColumn(4).setCellRenderer(getRenderer());
            
            break;
           
           case 4:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] "
                        + "where [Cedula_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
              Object [] Datos = new Object [15]; 
              
              
             Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
            Tabla.getColumnModel().getColumn(6).setCellRenderer(getRenderer());
       
            break;
               
            case 5:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] "
                        + "where [Sexo_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
             Object [] Datos = new Object [15]; 
              
              
            Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);

              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }

              Tabla.getColumnModel().getColumn(7).setCellRenderer(getRenderer());
       
            break;
                
            case 6:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] where "
                        + "[Descuento_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
              Object [] Datos = new Object [15]; 
              
              
             Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
              Tabla.getColumnModel().getColumn(11).setCellRenderer(getRenderer());
       

            break;
                
            case 7:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[ClienteJuridicoNaturalV] where "
                        + "[Estado_Cliente] like '%"+Buscar+"%' and ID_ClienteJuridico = "+ID_ClienteJ);

                while (resultado.next())
                {
            
                     
              Object [] Datos = new Object [15]; 
              
              
              Datos [0]= resultado.getString(1);
              
              int ID_C = resultado.getInt(2);
              Datos [1]= String.valueOf(ID_C); 
              
              String Juridico = "-";
              
              int ID_CJ = resultado.getInt(3);

              try{
                  
                  resultado2 = Conexion.consulta("Select Nombre_ClienteJuridico from "
                          + "ClienteJuridico where ID_ClienteJuridico ="+ID_CJ);
                  
                  while(resultado2.next()){
                  Juridico = resultado2.getString(1).trim();
                  }
                  
              }catch(SQLException ex){}
              
              Datos [2]= Juridico; 
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              double Deuda = 0;
              
              try{
                  
                  resultado2 = Conexion.consulta("Select Sum(Saldo) from "
                          + "CuentaCobrar where ID_Cliente ="+ID_C);
                  
                  while(resultado2.next()){
                  Deuda = resultado2.getDouble(1);
                  }
                  
              }catch(SQLException ex){}
              
              Datos [5]= String.valueOf(Deuda);
              Datos [6]= resultado.getString(6);
              Datos [7]= resultado.getString(7);
              Datos [8]= resultado.getString(8);
              Datos [9]= resultado.getString(9);
              Datos [10]= resultado.getString(10);
              Datos [11]= resultado.getString(11);
              java.util.Date FechaI = resultado.getDate(12);
              DateFormat df4 = DateFormat.getDateInstance(DateFormat.FULL);
              String Fecha = df4.format(FechaI);
              Datos [12]= Fecha;
              String Empleado = resultado.getString(13).trim()+" "+resultado.getString(14).trim();
              Datos [13]= Empleado;
              Datos [14]= resultado.getString(15);
              
              model.addRow(Datos);  
   
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No Encontrado");
            }
            
              Tabla.getColumnModel().getColumn(14).setCellRenderer(getRenderer());
       

            break;
                
         
           
            default:

            break;

          
        
        }
        Tabla.setModel(model);
        
         
        Tabla.repaint();
             
//         for(int i =0;i<Tabla.getColumnCount();i++){
////       Tabla.getColumnModel().getColumn(i).setCellRenderer(getRenderer());
//        }
//       Tabla.repaint();
   }

   
       
    public void VerFoto(){
       
   int fila = Tabla.getSelectedRow();
      
   if (fila > -1){
     
          int ID = 0;
          
         ID = Integer.parseInt(this.Tabla.getModel().getValueAt(fila, 1).toString());
         
         String Fotografia;
                 
         try {
                 
          
   resultado = Conexion.consulta("Select Fotografia_Cliente from Cliente where ID_Cliente = "+ID);
          
     if (resultado.next()){
            Fotografia = resultado.getString(1);
                            
            File = Fotografia;
            jLblFoto1.setIcon(new ImageIcon(File));
            //Convirtiendo Imagen a ImageIcon
            ImageIcon icon = new ImageIcon(File);
            //Se Extrae La Imagen de Icono
            Image img = icon.getImage();
            //Se Cambia y Ajusta El Tamano de La Imagen
            Image newimg = img.getScaledInstance(289,292,java.awt.Image.SCALE_SMOOTH);
            //Se Genera La Nueva Imagen Con El ImageIcon
            ImageIcon newIcon = new ImageIcon(newimg);
            //Se Coloca el Nuevo Icono Modificado
            jLblFoto1.setIcon(newIcon);
            
           
     }                          
     
                              
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "El Cliente No Posee Fotografía","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      
        }
    }
   
 
    private TableCellRenderer getRenderer() {
        return new TableCellRenderer() {
            JTextField f = new JTextField();

            @Override
            public Component getTableCellRendererComponent(JTable arg0, Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                if(arg1 != null){
                    f.setText(arg1.toString());
                    String string = arg1.toString();
                    string = string.toLowerCase();
                    String Busc = txtbusc.getText().toLowerCase();
                    if(string.contains(Busc)){
                        int indexOf = string.indexOf(Busc);
                        try {
                            f.getHighlighter().addHighlight(indexOf,indexOf+Busc.length(),
                                    new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.CYAN));
                        } catch (BadLocationException e) {
                        }
                    }
                } else {
                    f.setText("");
                    f.getHighlighter().removeAllHighlights();
                }
                return f;
            }
        };
    }



    
    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
        Buscar();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

    private void TablaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusGained

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusGained

    private void TablaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaFocusLost

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaFocusLost

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked

        VerFoto();

        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMouseClicked

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaMousePressed

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed

        ActualizarTabla();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

        File miDir = new File ("");
        String reporte = miDir.getAbsolutePath()+"\\src\\Reportes\\Cliente.jasper";

        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(reporte, null,Conexion.con);
        } catch (JRException ex) {

            //                Logger.getLogger(ProveedorP.class.getName()).log(Level.SEVERE, null, ex);
        }

        JasperViewer view = new JasperViewer(jp, false);
        view.setTitle("Clientes - Sistema de Inventario y Facturación RJ");

        view.setZoomRatio((float) 0.70);
        view.setVisible(true);

        view.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        view.toFront();
        //     this.toBack();

        //    this.setExtendedState(javax.swing.JFrame.CROSSHAIR_CURSOR);

    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed

        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged

     
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

         public void Titulo(){
         Object [] Titulo = {"Representante","No.", "Organización", "Nombres", "Apellidos", "Deuda",
            "No. Cédula", "Sexo", "Teléfono", "Correo", "Dirección", "Descuento", 
            "Fecha Ingreso", "Registrado Por", "Estado"};
        
        model.setColumnIdentifiers(Titulo);
        
        this.Tabla.setModel(model);
        
        JTableHeader header = Tabla.getTableHeader();
        header.setFont(new Font("Tahoma", Font.BOLD, 14));
      
        Tabla.setDefaultRenderer(Object.class, new FormatoTabla());
      
  
    }
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

                            
 
   ActualizarTabla();// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
    
    DefaultTableModel model = new DefaultTableModel() {

        
        
    Class[] types = new Class [] {
  
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class, 
        java.lang.String.class, java.lang.String.class, java.lang.String.class
    };
 

    @Override
    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

  

    @Override
    public boolean isCellEditable(int row, int column) {
    
    
            return false;
    
       //all cells false
    
    }
};
    
    
    
    
     public class FormatoTabla extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
      
  if(String.valueOf(table.getValueAt(row,14)).equalsIgnoreCase("Inactivo"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }
  if(column==5){
     setForeground(Color.RED); 
  }   
  
//   if(String.valueOf(table.getValueAt(row,9)).equalsIgnoreCase("Si"))  {
//      setForeground(Color.GREEN);
//  }
                  
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteJuridicoNaturalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteJuridicoNaturalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteJuridicoNaturalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteJuridicoNaturalP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClienteJuridicoNaturalP dialog = new ClienteJuridicoNaturalP(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelVer;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnshowall;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLblFoto1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField txtbusc;
    // End of variables declaration//GEN-END:variables
}
